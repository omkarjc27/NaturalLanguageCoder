send a signal `signal.SIGUSR1` to the current process##$$##os.kill(os.getpid(), signal.SIGUSR1)@##@@decode a hex string '4a4b4c' to UTF-8.##$$##bytes.fromhex('4a4b4c').decode('utf-8')@##@@check if all elements in list `myList` are identical##$$##all(x == myList[0] for x in myList)@##@@format number of spaces between strings `Python`, `:` and `Very Good` to be `20`##$$##print('%*s : %*s' % (20, 'Python', 20, 'Very Good'))@##@@None##$$##d.decode('cp1251').encode('utf8')@##@@get rid of None values in dictionary `kwargs`##$$##res = {k: v for k, v in list(kwargs.items()) if v is not None}@##@@get rid of None values in dictionary `kwargs`##$$##res = dict((k, v) for k, v in kwargs.items() if v is not None)@##@@capture final output of a chain of system commands `ps -ef | grep something | wc -l`##$$##subprocess.check_output('ps -ef | grep something | wc -l', shell=True)@##@@concatenate a list of strings `['a', 'b', 'c']`##$$##"""""".join(['a', 'b', 'c'])@##@@find intersection data between series `s1` and series `s2`##$$##pd.Series(list(set(s1).intersection(set(s2))))@##@@sending http headers to `client`##$$##client.send('HTTP/1.0 200 OK\r\n')@##@@Format a datetime string `when` to extract date only##$$##then = datetime.datetime.strptime(when, '%Y-%m-%d').date()@##@@split a multi-line string `inputString` into separate strings##$$##inputString.split('\n')@##@@Split a multi-line string ` a \n b \r\n c ` by new line character `\n`##$$##' a \n b \r\n c '.split('\n')@##@@concatenate elements of list `b` by a colon ":"##$$##""":""".join(str(x) for x in b)@##@@get the first object from a queryset in django model `Entry`##$$##Entry.objects.filter()[:1].get()@##@@Calculate sum over all rows of 2D numpy array##$$##a.sum(axis=1)@##@@enable warnings using action 'always'##$$##warnings.simplefilter('always')@##@@concatenate items of list `l` with a space ' '##$$##print(' '.join(map(str, l)))@##@@run script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable##$$##subprocess.call(['python.exe', 'hello.py', 'htmlfilename.htm'])@##@@None##$$##time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')@##@@convert a string `my_string` with dot and comma into a float number `my_float`##$$##my_float = float(my_string.replace(',', ''))@##@@convert a string `123,456.908` with dot and comma into a floating number##$$##float('123,456.908'.replace(',', ''))@##@@set pythonpath in python script.##$$##sys.path.append('/path/to/whatever')@##@@split string 'Words, words, words.' using a regex '(\\W+)'##$$##re.split('(\\W+)', 'Words, words, words.')@##@@open a file `Output.txt` in append mode##$$##file = open('Output.txt', 'a')@##@@download a file "http://www.example.com/songs/mp3.mp3" over HTTP and save to "mp3.mp3"##$$##urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')@##@@download a file `url` over HTTP and save to `file_name`##$$##u = urllib.request.urlopen(url)
f = open(file_name, 'wb')
meta = u.info()
file_size = int(meta.getheaders('Content-Length')[0])
print(('Downloading: %s Bytes: %s' % (file_name, file_size)))
file_size_dl = 0
block_sz = 8192
while True:
    buffer = u.read(block_sz)
    if (not buffer):
        break
    file_size_dl += len(buffer)
    f.write(buffer)
    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))
    status = (status + (chr(8) * (len(status) + 1)))
    print(status, end=' ')
f.close()@##@@download a file 'http://www.example.com/' over HTTP##$$##response = urllib.request.urlopen('http://www.example.com/')
html = response.read()@##@@download a file `url` over HTTP##$$##r = requests.get(url)@##@@download a file `url` over HTTP and save to "10MB"##$$##response = requests.get(url, stream=True)
with open('10MB', 'wb') as handle:
    for data in tqdm(response.iter_content()):
        handle.write(data)@##@@argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`##$$##parser.add_argument('--version', action='version', version='%(prog)s 2.0')@##@@remove key 'c' from dictionary `d`##$$##{i: d[i] for i in d if i != 'c'}@##@@Create new DataFrame object by merging columns "key" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively##$$##pd.merge(split_df, csv_df, on=['key'], suffixes=('_left', '_right'))@##@@Split a string `s` by space with `4` splits##$$##s.split(' ', 4)@##@@read keyboard-input##$$##input('Enter your input:')@##@@enable debug mode on Flask application `app`##$$##app.run(debug=True)@##@@python save list `mylist` to file object 'save.txt'##$$##pickle.dump(mylist, open('save.txt', 'wb'))@##@@Multiply a matrix `P` with a 3d tensor `T` in scipy##$$##scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)@##@@Create 3d array of zeroes of size `(3,3,3)`##$$##numpy.zeros((3, 3, 3))@##@@cut off the last word of a sentence `content`##$$##""" """.join(content.split(' ')[:-1])@##@@convert scalar `x` to array##$$##x = np.asarray(x).reshape(1, -1)[(0), :]@##@@sum all elements of nested list `L`##$$##sum(sum(i) if isinstance(i, list) else i for i in L)@##@@convert hex string '470FC614' to a float number##$$##struct.unpack('!f', '470FC614'.decode('hex'))[0]@##@@Multiple each value by `2` for all keys in a dictionary `my_dict`##$$##my_dict.update((x, y * 2) for x, y in list(my_dict.items()))@##@@running bash script 'sleep.sh'##$$##subprocess.call('sleep.sh', shell=True)@##@@Join elements of list `l` with a comma `,`##$$##""",""".join(l)@##@@make a comma-separated string from a list `myList`##$$##myList = ','.join(map(str, myList))@##@@reverse the list that contains 1 to 10##$$##list(reversed(list(range(10))))@##@@remove substring 'bag,' from a string 'lamp, bag, mirror'##$$##print('lamp, bag, mirror'.replace('bag,', ''))@##@@Reverse the order of words, delimited by `.`, in string `s`##$$##""".""".join(s.split('.')[::-1])@##@@convert epoch time represented as milliseconds `s` to string using format '%Y-%m-%d %H:%M:%S.%f'##$$##datetime.datetime.fromtimestamp(s).strftime('%Y-%m-%d %H:%M:%S.%f')@##@@parse milliseconds epoch time '1236472051807' to format '%Y-%m-%d %H:%M:%S'##$$##time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(1236472051807 / 1000.0))@##@@get the date 7 days before the current date##$$##(datetime.datetime.now() - datetime.timedelta(days=7)).date()@##@@sum elements at index `column` of each list in list `data`##$$##print(sum(row[column] for row in data))@##@@sum columns of a list `array`##$$##[sum(row[i] for row in array) for i in range(len(array[0]))]@##@@encode binary string 'your string' to base64 code##$$##base64.b64encode(bytes('your string', 'utf-8'))@##@@combine list of dictionaries `dicts` with the same keys in each list to a single dictionary##$$##dict((k, [d[k] for d in dicts]) for k in dicts[0])@##@@Merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`##$$##{k: [d[k] for d in dicts] for k in dicts[0]}@##@@None##$$##request.args['myParam']@##@@identify duplicate values in list `mylist`##$$##[k for k, v in list(Counter(mylist).items()) if v > 1]@##@@Insert directory 'apps' into directory `__file__`##$$##sys.path.insert(1, os.path.join(os.path.dirname(__file__), 'apps'))@##@@modify sys.path for python module `subdir`##$$##sys.path.append(os.path.join(os.path.dirname(__file__), 'subdir'))@##@@Insert a 'None' value into a SQLite3 table.##$$##db.execute("INSERT INTO present VALUES('test2', ?, 10)", (None,))@##@@flatten list `list_of_menuitems`##$$##[image for menuitem in list_of_menuitems for image in menuitem]@##@@append elements of a set `b` to a list `a`##$$##a.extend(b)@##@@None##$$##a.extend(list(b))@##@@write the data of dataframe `df` into text file `np.txt`##$$##np.savetxt('c:\\data\\np.txt', df.values, fmt='%d')@##@@write content of DataFrame `df` into text file 'c:\\data\\pandas.txt'##$$##df.to_csv('c:\\data\\pandas.txt', header=None, index=None, sep=' ', mode='a')@##@@Split a string `x` by last occurrence of character `-`##$$##print(x.rpartition('-')[0])@##@@get the last part of a string before the character '-'##$$##print(x.rsplit('-', 1)[0])@##@@upload file using FTP##$$##ftp.storlines('STOR ' + filename, open(filename, 'r'))@##@@add one to the hidden web element with id 'XYZ' with selenium python script##$$##browser.execute_script("document.getElementById('XYZ').value+='1'")@##@@create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`##$$##np.maximum([2, 3, 4], [1, 5, 2])@##@@print a list `l` and move first 3 elements to the end of the list##$$##print(l[3:] + l[:3])@##@@loop over files in directory '.'##$$##for fn in os.listdir('.'):
    if os.path.isfile(fn):
        pass@##@@loop over files in directory `source`##$$##for (root, dirs, filenames) in os.walk(source):
    for f in filenames:
        pass@##@@create a random list of integers##$$##[int(1000 * random.random()) for i in range(10000)]@##@@None##$$##datetime.datetime.now().strftime('%H:%M:%S.%f')@##@@Google App Engine execute GQL query 'SELECT * FROM Schedule WHERE station = $1' with parameter `foo.key()`##$$##db.GqlQuery('SELECT * FROM Schedule WHERE station = $1', foo.key())@##@@filter rows in pandas starting with alphabet 'f' using regular expression.##$$##df.b.str.contains('^f')@##@@print a 2 dimensional list `tab` as a table with delimiters##$$##print('\n'.join('\t'.join(str(col) for col in row) for row in tab))@##@@pandas: delete rows in dataframe `df` based on multiple columns values##$$##df.set_index(list('BC')).drop(tuples, errors='ignore').reset_index()@##@@format the variables `self.goals` and `self.penalties` using string formatting##$$##"""({:d} goals, ${:d})""".format(self.goals, self.penalties)@##@@format string "({} goals, ${})" with variables `goals` and `penalties`##$$##"""({} goals, ${})""".format(self.goals, self.penalties)@##@@format string "({0.goals} goals, ${0.penalties})"##$$##"""({0.goals} goals, ${0.penalties})""".format(self)@##@@convert list of lists `L` to list of integers##$$##[int(''.join(str(d) for d in x)) for x in L]@##@@combine elements of each list in list `L` into digits of a single integer##$$##[''.join(str(d) for d in x) for x in L]@##@@convert a list of lists `L` to list of integers##$$##L = [int(''.join([str(y) for y in x])) for x in L]@##@@write the elements of list `lines` concatenated by special character '\n' to file `myfile`##$$##myfile.write('\n'.join(lines))@##@@removing an element from a list based on a predicate 'X' or 'N'##$$##[x for x in ['AAT', 'XAC', 'ANT', 'TTA'] if 'X' not in x and 'N' not in x]@##@@Remove duplicate words from a string `text` using regex##$$##text = re.sub('\\b(\\w+)( \\1\\b)+', '\\1', text)@##@@count non zero values in each column in pandas data frame##$$##df.astype(bool).sum(axis=1)@##@@search for string that matches regular expression pattern '(?<!Distillr)\\\\AcroTray\\.exe' in string 'C:\\SomeDir\\AcroTray.exe'##$$##re.search('(?<!Distillr)\\\\AcroTray\\.exe', 'C:\\SomeDir\\AcroTray.exe')@##@@split string 'QH QD JC KD JS' into a list on white spaces##$$##"""QH QD JC KD JS""".split()@##@@search for occurrences of regex pattern '>.*<' in xml string `line`##$$##print(re.search('>.*<', line).group(0))@##@@erase all the contents of a file `filename`##$$##open(filename, 'w').close()@##@@convert a string into datetime using the format '%Y-%m-%d %H:%M:%S.%f'##$$##datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')@##@@find the index of a list with the first element equal to '332' within the list of lists `thelist`##$$##[index for index, item in enumerate(thelist) if item[0] == '332']@##@@lower a string `text` and remove non-alphanumeric characters aside from space##$$##re.sub('[^\\sa-zA-Z0-9]', '', text).lower().strip()@##@@remove all non-alphanumeric characters except space from a string `text` and lower it##$$##re.sub('(?!\\s)[\\W_]', '', text).lower().strip()@##@@subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.##$$##plt.plot(x, y, label='H\u2082O')@##@@subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.##$$##plt.plot(x, y, label='$H_2O$')@##@@loop over a list `mylist` if sublists length equals 3##$$##[x for x in mylist if len(x) == 3]@##@@initialize a list `lst` of 100 objects Object()##$$##lst = [Object() for _ in range(100)]@##@@create list `lst` containing 100 instances of object `Object`##$$##lst = [Object() for i in range(100)]@##@@get the content of child tag with`href` attribute whose parent has css `someclass`##$$##self.driver.find_element_by_css_selector('.someclass a').get_attribute('href')@##@@joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'Date_Time' in both dataframes##$$##df1.merge(df2, on='Date_Time')@##@@use `%s` operator to print variable values `str1` inside a string##$$##'first string is: %s, second one is: %s' % (str1, 'geo.tif')@##@@None##$$##[x.strip() for x in '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')]@##@@check if directory `directory ` exists and create it if necessary##$$##if (not os.path.exists(directory)):
    os.makedirs(directory)@##@@check if a directory `path` exists and create it if necessary##$$##try:
    os.makedirs(path)
except OSError:
    if (not os.path.isdir(path)):
        raise@##@@check if a directory `path` exists and create it if necessary##$$##distutils.dir_util.mkpath(path)@##@@check if a directory `path` exists and create it if necessary##$$##try:
    os.makedirs(path)
except OSError as exception:
    if (exception.errno != errno.EEXIST):
        raise@##@@Replace a separate word 'H3' by 'H1' in a string 'text'##$$##re.sub('\\bH3\\b', 'H1', text)@##@@substitute ASCII letters in string 'aas30dsa20' with empty string ''##$$##re.sub('\\D', '', 'aas30dsa20')@##@@get digits only from a string `aas30dsa20` using lambda function##$$##"""""".join([x for x in 'aas30dsa20' if x.isdigit()])@##@@access a tag called "name" in beautifulsoup `soup`##$$##print(soup.find('name').string)@##@@get a dictionary `records` of key-value pairs in PyMongo cursor `cursor`##$$##records = dict((record['_id'], record) for record in cursor)@##@@Create new matrix object  by concatenating data from matrix A and matrix B##$$##np.concatenate((A, B))@##@@concat two matrices `A` and `B` in numpy##$$##np.vstack((A, B))@##@@Get the characters count in a file `filepath`##$$##os.stat(filepath).st_size@##@@count the occurrences of item "a" in list `l`##$$##l.count('a')@##@@count the occurrences of items in list `l`##$$##Counter(l)@##@@count the occurrences of items in list `l`##$$##[[x, l.count(x)] for x in set(l)]@##@@count the occurrences of items in list `l`##$$##dict(((x, l.count(x)) for x in set(l)))@##@@count the occurrences of item "b" in list `l`##$$##l.count('b')@##@@copy file `srcfile` to directory `dstdir`##$$##shutil.copy(srcfile, dstdir)@##@@find the key associated with the largest value in dictionary `x` whilst key is non-zero value##$$##max(k for k, v in x.items() if v != 0)@##@@get the largest key whose not associated with value of 0 in dictionary `x`##$$##(k for k, v in x.items() if v != 0)@##@@get the largest key in a dictionary `x` with non-zero value##$$##max(k for k, v in x.items() if v != 0)@##@@Put the curser at beginning of the file##$$##file.seek(0)@##@@combine values from column 'b' and column 'a' of dataframe `df`  into column 'c' of datafram `df`##$$##df['c'] = np.where(df['a'].isnull, df['b'], df['a'])@##@@remove key 'ele' from dictionary `d`##$$##del d['ele']@##@@Update datetime field in `MyModel` to be the existing `timestamp` plus 100 years##$$##MyModel.objects.update(timestamp=F('timestamp') + timedelta(days=36524.25))@##@@merge list `['it']` and list `['was']` and list `['annoying']` into one list##$$##['it'] + ['was'] + ['annoying']@##@@increment a value with leading zeroes in a number `x`##$$##str(int(x) + 1).zfill(len(x))@##@@check if a pandas dataframe `df`'s index is sorted##$$##all(df.index[:-1] <= df.index[1:])@##@@Convert tuple `t` to list##$$##list(t)@##@@Convert list `t` to tuple##$$##tuple(l)@##@@Convert tuple `level1` to list##$$##level1 = map(list, level1)@##@@send the output of pprint object `dataobject` to file `logFile`##$$##pprint.pprint(dataobject, logFile)@##@@get index of rows in column 'BoolCol'##$$##df.loc[df['BoolCol']]@##@@Create a list containing the indexes of rows where the value of column 'BoolCol' in dataframe `df` are equal to True##$$##df.iloc[np.flatnonzero(df['BoolCol'])]@##@@get list of indexes of rows where column 'BoolCol' values match True##$$##df[df['BoolCol'] == True].index.tolist()@##@@get index of rows in dataframe `df` which column 'BoolCol' matches value True##$$##df[df['BoolCol']].index.tolist()@##@@change working directory to the directory `owd`##$$##os.chdir(owd)@##@@insert data from a string `testfield` to sqlite db `c`##$$##c.execute("INSERT INTO test VALUES (?, 'bar')", (testfield,))@##@@decode string "\\x89\\n" into a normal string##$$##"""\\x89\\n""".decode('string_escape')@##@@convert a raw string `raw_string` into a normal string##$$##raw_string.decode('string_escape')@##@@convert a raw string `raw_byte_string` into a normal string##$$##raw_byte_string.decode('unicode_escape')@##@@split a string `s` with into all strings of repeated characters##$$##[m.group(0) for m in re.finditer('(\\d)\\1*', s)]@##@@scatter a plot with x, y position of `np.random.randn(100)` and face color equal to none##$$##plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')@##@@do a scatter plot with empty circles##$$##plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')@##@@remove a div with a id `main-content` using beautifulsoup##$$##soup.find('div', id='main-content').decompose()@##@@filter rows containing key word `ball` in column `ids`##$$##df[df['ids'].str.contains('ball')]@##@@convert index at level 0 into a column in dataframe `df`##$$##df.reset_index(level=0, inplace=True)@##@@Add indexes in a data frame `df` to a column `index1`##$$##df['index1'] = df.index@##@@convert pandas index in a dataframe to columns##$$##df.reset_index(level=['tick', 'obs'])@##@@Get reverse of list items from list 'b' using extended slicing##$$##[x[::-1] for x in b]@##@@join each element in array `a` with element at the same index in array `b` as a tuple##$$##np.array([zip(x, y) for x, y in zip(a, b)])@##@@zip two 2-d arrays `a` and `b`##$$##np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)@##@@convert list `list_of_ints` into a comma separated string##$$##""",""".join([str(i) for i in list_of_ints])@##@@Send a post request with raw data `DATA` and basic authentication with `username` and `password`##$$##requests.post(url, data=DATA, headers=HEADERS_DICT, auth=(username, password))@##@@Find last occurrence of character '}' in string "abcd}def}"##$$##'abcd}def}'.rfind('}')@##@@Iterate ove list `[1, 2, 3]` using list comprehension##$$##print([item for item in [1, 2, 3]])@##@@extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples##$$##[(x['x'], x['y']) for x in d]@##@@get the filename without the extension from file 'hemanth.txt'##$$##print(os.path.splitext(os.path.basename('hemanth.txt'))[0])@##@@create a dictionary by adding each two adjacent elements in tuple `x` as key/value pair to it##$$##dict(x[i:i + 2] for i in range(0, len(x), 2))@##@@create a list containing flattened list `[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]`##$$##values = sum([['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']], [])@##@@select rows in a dataframe `df` column 'closing_price' between two values 99 and 101##$$##df = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]@##@@replace all occurences of newlines `\n` with `<br>` in dataframe `df`##$$##df.replace({'\n': '<br>'}, regex=True)@##@@replace all occurrences of a string `\n` by string `<br>` in a pandas data frame `df`##$$##df.replace({'\n': '<br>'}, regex=True)@##@@create a list containing each two adjacent letters in string `word` as its elements##$$##[(x + y) for x, y in zip(word, word[1:])]@##@@Get a list of pairs from a string `word` using lambda function##$$##list(map(lambda x, y: x + y, word[:-1], word[1:]))@##@@extract a url from a string `myString`##$$##print(re.findall('(https?://[^\\s]+)', myString))@##@@extract a url from a string `myString`##$$##print(re.search('(?P<url>https?://[^\\s]+)', myString).group('url'))@##@@remove all special characters, punctuation and spaces from a string `mystring` using regex##$$##re.sub('[^A-Za-z0-9]+', '', mystring)@##@@create a DatetimeIndex containing 13 periods of the second friday of each month starting from date '2016-01-01'##$$##pd.date_range('2016-01-01', freq='WOM-2FRI', periods=13)@##@@Create multidimensional array `matrix` with 3 rows and 2 columns in python##$$##matrix = [[a, b], [c, d], [e, f]]@##@@replace spaces with underscore##$$##mystring.replace(' ', '_')@##@@get an absolute file path of file 'mydir/myfile.txt'##$$##os.path.abspath('mydir/myfile.txt')@##@@split string `my_string` on white spaces##$$##""" """.join(my_string.split())@##@@get filename without extension from file `filename`##$$##os.path.splitext(filename)[0]@##@@get a list containing the sum of each element `i` in list `l` plus the previous elements##$$##[sum(l[:i]) for i, _ in enumerate(l)]@##@@split a string `Docs/src/Scripts/temp` by `/` keeping `/` in the result##$$##"""Docs/src/Scripts/temp""".replace('/', '/\x00/').split('\x00')@##@@shuffle columns of an numpy array 'r'##$$##np.random.shuffle(np.transpose(r))@##@@copy all values in a column 'B' to a new column 'D' in a pandas data frame 'df'##$$##df['D'] = df['B']@##@@find a value within nested json 'data' where the key inside another key 'B' is unknown.##$$##list(data['A']['B'].values())[0]['maindata'][0]['Info']@##@@check characters of string `string` are true predication of function `predicate`##$$##all(predicate(x) for x in string)@##@@determine number of files on a drive with python##$$##os.statvfs('/').f_files - os.statvfs('/').f_ffree@##@@None##$$##cursor.fetchone()[0]@##@@convert string `user_input` into a list of integers `user_list`##$$##user_list = [int(number) for number in user_input.split(',')]@##@@Get a list of integers by splitting  a string `user` with comma##$$##[int(s) for s in user.split(',')]@##@@None##$$##sorted(list, key=lambda x: (x[0], -x[1]))@##@@sort a list of objects `ut`, based on a function `cmpfun` in descending order##$$##ut.sort(key=cmpfun, reverse=True)@##@@reverse list `ut` based on the `count` attribute of each object##$$##ut.sort(key=lambda x: x.count, reverse=True)@##@@sort a list of objects `ut` in reverse order by their `count` property##$$##ut.sort(key=lambda x: x.count, reverse=True)@##@@click a href button 'Send' with selenium##$$##driver.find_element_by_partial_link_text('Send').click()@##@@click a href button having text `Send InMail` with selenium##$$##driver.findElement(By.linkText('Send InMail')).click()@##@@click a href button with text 'Send InMail' with selenium##$$##driver.find_element_by_link_text('Send InMail').click()@##@@cast an int `i` to a string and concat to string 'ME'##$$##'ME' + str(i)@##@@None##$$##df.sort_values(['System_num', 'Dis'])@##@@prepend the line '#test firstline\n' to the contents of file 'infile' and save as the file 'outfile'##$$##open('outfile', 'w').write('#test firstline\n' + open('infile').read())@##@@sort a list `l` by length of value in tuple##$$##l.sort(key=lambda t: len(t[1]), reverse=True)@##@@split string `s` by words that ends with 'd'##$$##re.findall('\\b(\\w+)d\\b', s)@##@@return `True` if string `foobarrrr` contains regex `ba[rzd]`##$$##bool(re.search('ba[rzd]', 'foobarrrr'))@##@@Removing duplicates in list `t`##$$##list(set(t))@##@@Removing duplicates in list `source_list`##$$##list(set(source_list))@##@@Removing duplicates in list `abracadabra`##$$##list(OrderedDict.fromkeys('abracadabra'))@##@@Convert array `a` into a list##$$##numpy.array(a).reshape(-1).tolist()@##@@Convert the first row of numpy matrix `a` to a list##$$##numpy.array(a)[0].tolist()@##@@In `soup`, get the content of the sibling of the `td`  tag with text content `Address:`##$$##print(soup.find(text='Address:').findNext('td').contents[0])@##@@convert elements of each tuple in list `l` into a string  separated by character `@`##$$##""" """.join([('%d@%d' % t) for t in l])@##@@convert each tuple in list `l` to a string with '@' separating the tuples' elements##$$##""" """.join([('%d@%d' % (t[0], t[1])) for t in l])@##@@get the html from the current web page of a Selenium driver##$$##driver.execute_script('return document.documentElement.outerHTML;')@##@@Get all matches with regex pattern `\\d+[xX]` in list of string `teststr`##$$##[i for i in teststr if re.search('\\d+[xX]', i)]@##@@select values from column 'A' for which corresponding values in column 'B' will be greater than 50, and in column 'C' - equal 900 in dataframe `df`##$$##df['A'][(df['B'] > 50) & (df['C'] == 900)]@##@@Sort dictionary `o` in ascending order based on its keys and items##$$##sorted(o.items())@##@@get sorted list of keys of dict `d`##$$##sorted(d)@##@@None##$$##sorted(d.items())@##@@convert string "1" into integer##$$##int('1')@##@@function to convert strings into integers##$$##int()@##@@convert items in `T1` to integers##$$##T2 = [map(int, x) for x in T1]@##@@call a shell script `./test.sh` using subprocess##$$##subprocess.call(['./test.sh'])@##@@call a shell script `notepad` using subprocess##$$##subprocess.call(['notepad'])@##@@combine lists `l1` and `l2`  by alternating their elements##$$##[val for pair in zip(l1, l2) for val in pair]@##@@encode string 'data to be encoded'##$$##encoded = base64.b64encode('data to be encoded')@##@@encode a string `data to be encoded` to `ascii` encoding##$$##encoded = 'data to be encoded'.encode('ascii')@##@@parse tab-delimited CSV file 'text.txt' into a list##$$##lol = list(csv.reader(open('text.txt', 'rb'), delimiter='\t'))@##@@Get attribute `my_str` of object `my_object`##$$##getattr(my_object, my_str)@##@@group a list of dicts `LD` into one dict by key##$$##print(dict(zip(LD[0], zip(*[list(d.values()) for d in LD]))))@##@@None##$$##sum([pair[0] for pair in list_of_pairs])@##@@convert unicode string u"{'code1':1,'code2':1}" into dictionary##$$##d = ast.literal_eval("{'code1':1,'code2':1}")@##@@find all words in a string `mystring` that start with the `$` sign##$$##[word for word in mystring.split() if word.startswith('$')]@##@@remove any url within string `text`##$$##text = re.sub('^https?:\\/\\/.*[\\r\\n]*', '', text, flags=re.MULTILINE)@##@@replace all elements in array `A` that are not present in array `[1, 3, 4]` with zeros##$$##np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)@##@@calculate mean across dimension in a 2d array `a`##$$##np.mean(a, axis=1)@##@@running r script '/pathto/MyrScript.r' from python##$$##subprocess.call(['/usr/bin/Rscript', '--vanilla', '/pathto/MyrScript.r'])@##@@run r script '/usr/bin/Rscript --vanilla /pathto/MyrScript.r'##$$##subprocess.call('/usr/bin/Rscript --vanilla /pathto/MyrScript.r', shell=True)@##@@add a header to a csv file##$$##writer.writeheader()@##@@replacing nan in the dataframe `df` with row average##$$##df.fillna(df.mean(axis=1), axis=1)@##@@Convert unix timestamp '1347517370' to formatted string '%Y-%m-%d %H:%M:%S'##$$##time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1347517370))@##@@Call a base class's class method `do` from derived class `Derived`##$$##super(Derived, cls).do(a)@##@@selecting rows in Numpy ndarray 'a', where the value in the first column is 0 and value in the second column is 1##$$##a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]@##@@separate words delimited by one or more spaces into a list##$$##re.split(' +', 'hello world sample text')@##@@length of longest element in list `words`##$$##len(max(words, key=len))@##@@get the value associated with unicode key 'from_user' of first dictionary in list `result`##$$##result[0]['from_user']@##@@Retrieve each line from a file 'File.txt' as a list##$$##[line.split() for line in open('File.txt')]@##@@swap keys with values in a dictionary `a`##$$##res = dict((v, k) for k, v in a.items())@##@@Open a file `path/to/FILE_NAME.ext` in write mode##$$##new_file = open('path/to/FILE_NAME.ext', 'w')@##@@None##$$##df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()@##@@Check if any key in the dictionary `dict1` starts with the string `EMP$$`##$$##any(key.startswith('EMP$$') for key in dict1)@##@@create list of values from dictionary `dict1` that have a key that starts with 'EMP$$'##$$##[value for key, value in list(dict1.items()) if key.startswith('EMP$$')]@##@@convert a pandas series `sf` into a pandas dataframe `df` with columns `email` and `list`##$$##pd.DataFrame({'email': sf.index, 'list': sf.values})@##@@print elements of list `list` seperated by tabs `\t`##$$##print('\t'.join(map(str, list)))@##@@print unicode string '\xd0\xbf\xd1\x80\xd0\xb8' with utf-8##$$##print('\xd0\xbf\xd1\x80\xd0\xb8'.encode('raw_unicode_escape'))@##@@Encode a latin character in string `Sopet\xc3\xb3n` properly##$$##'Sopet\xc3\xb3n'.encode('latin-1').decode('utf-8')@##@@resized image `image` to width, height of `(x, y)` with filter of `ANTIALIAS`##$$##image = image.resize((x, y), Image.ANTIALIAS)@##@@regex, find "n"s only in the middle of string `s`##$$##re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', s)@##@@display the float `1/3*100` as a percentage##$$##print('{0:.0f}%'.format(1.0 / 3 * 100))@##@@sort a list of dictionary `mylist` by the key `title`##$$##mylist.sort(key=lambda x: x['title'])@##@@sort a list `l` of dicts by dict value 'title'##$$##l.sort(key=lambda x: x['title'])@##@@sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.##$$##l.sort(key=lambda x: (x['title'], x['title_url'], x['id']))@##@@find 10 largest differences between each respective elements of list `l1` and list `l2`##$$##heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))@##@@BeautifulSoup find all 'span' elements in HTML string `soup` with class of 'starGryB sp'##$$##soup.find_all('span', {'class': 'starGryB sp'})@##@@write records in dataframe `df` to table 'test' in schema 'a_schema'##$$##df.to_sql('test', engine, schema='a_schema')@##@@Extract brackets from string `s`##$$##brackets = re.sub('[^(){}[\\]]', '', s)@##@@remove duplicate elements from list 'L'##$$##list(dict((x[0], x) for x in L).values())@##@@read a file `file` without newlines##$$##[line.rstrip('\n') for line in file]@##@@get the position of item 1 in `testlist`##$$##[i for (i, x) in enumerate(testlist) if (x == 1)]@##@@get the position of item 1 in `testlist`##$$##[i for (i, x) in enumerate(testlist) if (x == 1)]@##@@get the position of item 1 in `testlist`##$$##for i in [i for (i, x) in enumerate(testlist) if (x == 1)]:
    pass@##@@get the position of item 1 in `testlist`##$$##for i in (i for (i, x) in enumerate(testlist) if (x == 1)):
    pass@##@@get the position of item 1 in `testlist`##$$##gen = (i for (i, x) in enumerate(testlist) if (x == 1))
for i in gen:
    pass@##@@get the position of item `element` in list `testlist`##$$##print(testlist.index(element))@##@@get the position of item `element` in list `testlist`##$$##try:
    print(testlist.index(element))
except ValueError:
    pass@##@@find the first element of the tuple with the maximum second element in a list of tuples `lis`##$$##max(lis, key=lambda item: item[1])[0]@##@@get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`##$$##max(lis, key=itemgetter(1))[0]@##@@Make a delay of 1 second##$$##time.sleep(1)@##@@convert list of tuples `L` to a string##$$##""", """.join('(' + ', '.join(i) + ')' for i in L)@##@@Django set default value of field `b` equal to '0000000'##$$##b = models.CharField(max_length=7, default='0000000', editable=False)@##@@Sort lis `list5` in ascending order based on the degrees value of its elements##$$##sorted(list5, lambda x: (degree(x), x))@##@@None##$$##sorted(list5, key=lambda vertex: (degree(vertex), vertex))@##@@convert a list  into a generator object##$$##(n for n in [1, 2, 3, 5])@##@@remove elements from list `oldlist` that have an index number mentioned in list `removelist`##$$##newlist = [v for i, v in enumerate(oldlist) if i not in removelist]@##@@Open a file `yourfile.txt` in write mode##$$##f = open('yourfile.txt', 'w')@##@@get attribute 'attr' from object `obj`##$$##getattr(obj, 'attr')@##@@convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to tuple##$$##from functools import reduce
reduce(lambda a, b: a + b, (('aa',), ('bb',), ('cc',)))@##@@convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line##$$##map(lambda a: a[0], (('aa',), ('bb',), ('cc',)))@##@@None##$$##df['range'].replace(',', '-', inplace=True)@##@@unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`##$$##zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])@##@@unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`##$$##zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])@##@@unzip list `original`##$$##result = ([a for (a, b) in original], [b for (a, b) in original])@##@@unzip list `original` and return a generator##$$##result = ((a for (a, b) in original), (b for (a, b) in original))@##@@unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`##$$##zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])@##@@unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with None##$$##map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])@##@@encode `Decimal('3.9')` to a JSON string##$$##json.dumps(Decimal('3.9'))@##@@Add key "mynewkey" to dictionary `d` with value "mynewvalue"##$$##d['mynewkey'] = 'mynewvalue'@##@@Add key 'a' to dictionary `data` with value 1##$$##data.update({'a': 1, })@##@@Add key 'a' to dictionary `data` with value 1##$$##data.update(dict(a=1))@##@@Add key 'a' to dictionary `data` with value 1##$$##data.update(a=1)@##@@find maximal value in matrix `matrix`##$$##max([max(i) for i in matrix])@##@@Round number `answer` to 2 precision after the decimal point##$$##answer = str(round(answer, 2))@##@@extract ip address from an html string##$$##ip = re.findall('[0-9]+(?:\\.[0-9]+){3}', s)@##@@filter dataframe `df` by values in column `A` that appear more than once##$$##df.groupby('A').filter(lambda x: len(x) > 1)@##@@append each line in file `myfile` into a list##$$##[x for x in myfile.splitlines() if x != '']@##@@Get a list of integers `lst` from a file `filename.txt`##$$##lst = map(int, open('filename.txt').readlines())@##@@add color bar with image `mappable` to plot `plt`##$$##plt.colorbar(mappable=mappable, cax=ax3)@##@@count most frequent 100 words in column 'text' of dataframe `df`##$$##Counter(' '.join(df['text']).split()).most_common(100)@##@@None##$$##re.findall('(.+?):(.+?)\\b ?', text)@##@@generate all 2-element subsets of tuple `(1, 2, 3)`##$$##list(itertools.combinations((1, 2, 3), 2))@##@@get a value of datetime.today() in the UTC time zone##$$##datetime.now(pytz.utc)@##@@Get a new list `list2`by removing empty list from a list of lists `list1`##$$##list2 = [x for x in list1 if x != []]@##@@Create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`##$$##list2 = [x for x in list1 if x]@##@@Django response with JSON `data`##$$##return HttpResponse(data, mimetype='application/json')@##@@get all text that is not enclosed within square brackets in string `example_str`##$$##re.findall('(.*?)\\[.*?\\]', example_str)@##@@Use a regex to get all text in a string `example_str` that is not surrounded by square brackets##$$##re.findall('(.*?)(?:\\[.*?\\]|$)', example_str)@##@@get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc'##$$##re.findall('\\(.+?\\)|\\w', '(zyx)bc')@##@@match regex '\\((.*?)\\)|(\\w)' with string '(zyx)bc'##$$##re.findall('\\((.*?)\\)|(\\w)', '(zyx)bc')@##@@match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`##$$##re.findall('\\(.*?\\)|\\w', '(zyx)bc')@##@@formate each string cin list `elements` into pattern '%{0}%'##$$##elements = ['%{0}%'.format(element) for element in elements]@##@@Open a background process 'background-process' with arguments 'arguments'##$$##subprocess.Popen(['background-process', 'arguments'])@##@@get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys'##$$##[mydict[x] for x in mykeys]@##@@convert list `[('Name', 'Joe'), ('Age', 22)]` into a dictionary##$$##dict([('Name', 'Joe'), ('Age', 22)])@##@@average each two columns of array `data`##$$##data.reshape(-1, j).mean(axis=1).reshape(data.shape[0], -1)@##@@double backslash escape all double quotes in string `s`##$$##print(s.encode('unicode-escape').replace('"', '\\"'))@##@@split a string into a list of words and whitespace##$$##re.split('(\\W+)', s)@##@@None##$$##df.plot(kind='barh', stacked=True)@##@@reverse the keys and values in a dictionary `myDictionary`##$$##{i[1]: i[0] for i in list(myDictionary.items())}@##@@finding the index of elements containing substring 'how' and 'what' in a list of strings 'myList'.##$$##[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]@##@@check if object `obj` is a string##$$##isinstance(obj, str)@##@@check if object `o` is a string##$$##isinstance(o, str)@##@@check if object `o` is a string##$$##(type(o) is str)@##@@check if object `o` is a string##$$##isinstance(o, str)@##@@check if `obj_to_test` is a string##$$##isinstance(obj_to_test, str)@##@@append list `list1` to `list2`##$$##list2.extend(list1)@##@@append list `mylog` to `list1`##$$##list1.extend(mylog)@##@@append list `a` to `c`##$$##c.extend(a)@##@@append items in list `mylog` to `list1`##$$##for line in mylog:
    list1.append(line)@##@@append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`##$$##b.append((a[0][0], a[0][2]))@##@@Initialize `SECRET_KEY` in flask config with `Your_secret_string `##$$##app.config['SECRET_KEY'] = 'Your_secret_string'@##@@unpack a series of tuples in pandas into a DataFrame with column names 'out-1' and 'out-2'##$$##pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)@##@@find the index of an element 'MSFT' in a list `stocks_list`##$$##[x for x in range(len(stocks_list)) if stocks_list[x] == 'MSFT']@##@@rotate the xtick labels of matplotlib plot `ax` by `45` degrees to make long labels readable##$$##ax.set_xticklabels(labels, rotation=45)@##@@remove symbols from a string `s`##$$##re.sub('[^\\w]', ' ', s)@##@@Get the current directory of a script##$$##os.path.basename(os.path.dirname(os.path.realpath(__file__)))@##@@Find octal characters matches from a string `str` using regex##$$##print(re.findall("'\\\\[0-7]{1,3}'", str))@##@@split string `input` based on occurrences of regex pattern '[ ](?=[A-Z]+\\b)'##$$##re.split('[ ](?=[A-Z]+\\b)', input)@##@@Split string `input` at every space followed by an upper-case letter##$$##re.split('[ ](?=[A-Z])', input)@##@@send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`##$$##r = requests.post(url, files=files, headers=headers, data=data)@##@@write bytes `bytes_` to a file `filename` in python 3##$$##open('filename', 'wb').write(bytes_)@##@@get a list from a list `lst` with values mapped into a dictionary `dct`##$$##[dct[k] for k in lst]@##@@find duplicate names in column 'name' of the dataframe `x`##$$##x.set_index('name').index.get_duplicates()@##@@truncate float 1.923328437452 to 3 decimal places##$$##round(1.923328437452, 3)@##@@sort list `li` in descending order based on the date value in second element of each list in list `li`##$$##sorted(li, key=lambda x: datetime.strptime(x[1], '%d/%m/%Y'), reverse=True)@##@@place the radial ticks in plot `ax` at 135 degrees##$$##ax.set_rlabel_position(135)@##@@check if path `my_path` is an absolute path##$$##os.path.isabs(my_path)@##@@get number of keys in dictionary `yourdict`##$$##len(list(yourdict.keys()))@##@@count the number of keys in dictionary `yourdictfile`##$$##len(set(open(yourdictfile).read().split()))@##@@pandas dataframe get first row of each group by 'id'##$$##df.groupby('id').first()@##@@split a list in first column  into multiple columns keeping other columns as well in pandas data frame##$$##pd.concat([df[0].apply(pd.Series), df[1]], axis=1)@##@@extract attributes 'src="js/([^"]*\\bjquery\\b[^"]*)"' from string `data`##$$##re.findall('src="js/([^"]*\\bjquery\\b[^"]*)"', data)@##@@Sum integers contained in strings in list `['', '3.4', '', '', '1.0']`##$$##sum(int(float(item)) for item in [_f for _f in ['', '3.4', '', '', '1.0'] if _f])@##@@Call a subprocess with arguments `c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat` that may contain spaces##$$##subprocess.Popen(['c:\\Program Files\\VMware\\VMware Server\\vmware-cmd.bat'])@##@@reverse a priority queue `q` in python without using classes##$$##q.put((-n, n))@##@@make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`##$$##df['group'].plot(kind='bar', color=['r', 'g', 'b', 'r', 'g', 'b', 'r'])@##@@find all matches of regex pattern '([a-fA-F\\d]{32})' in string `data`##$$##re.findall('([a-fA-F\\d]{32})', data)@##@@Get the length of list `my_list`##$$##len(my_list)@##@@Getting the length of array `l`##$$##len(l)@##@@Getting the length of array `s`##$$##len(s)@##@@Getting the length of `my_tuple`##$$##len(my_tuple)@##@@Getting the length of `my_string`##$$##len(my_string)@##@@remove escape character from string "\\a"##$$##"""\\a""".decode('string_escape')@##@@replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.##$$##"""obama""".replace('a', '%temp%').replace('b', 'a').replace('%temp%', 'b')@##@@remove directory tree '/folder_name'##$$##shutil.rmtree('/folder_name')@##@@create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`##$$##data['weekday'] = data['my_dt'].apply(lambda x: x.weekday())@##@@reverse sort Counter `x` by values##$$##sorted(x, key=x.get, reverse=True)@##@@reverse sort counter `x` by value##$$##sorted(list(x.items()), key=lambda pair: pair[1], reverse=True)@##@@append a numpy array 'b' to a numpy array 'a'##$$##np.vstack((a, b))@##@@numpy concatenate two arrays `a` and `b` along the first axis##$$##print(concatenate((a, b), axis=0))@##@@numpy concatenate two arrays `a` and `b` along the second axis##$$##print(concatenate((a, b), axis=1))@##@@numpy concatenate two arrays `a` and `b` along the first axis##$$##c = np.r_[(a[None, :], b[None, :])]@##@@numpy concatenate two arrays `a` and `b` along the first axis##$$##np.array((a, b))@##@@fetch address information for host 'google.com' ion port 80##$$##print(socket.getaddrinfo('google.com', 80))@##@@add a column 'day' with value 'sat' to dataframe `df`##$$##df.xs('sat', level='day', drop_level=False)@##@@return a 401 unauthorized in django##$$##return HttpResponse('Unauthorized', status=401)@##@@Flask set folder 'wherever' as the default template folder##$$##Flask(__name__, template_folder='wherever')@##@@How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?##$$##session.execute('INSERT INTO t1 (SELECT * FROM t2)')@##@@sort a list of lists 'c2' such that third row comes first##$$##c2.sort(key=lambda row: row[2])@##@@None##$$##c2.sort(key=lambda row: (row[2], row[1], row[0]))@##@@None##$$##c2.sort(key=lambda row: (row[2], row[1]))@##@@set font `Arial` to display non-ascii characters in matplotlib##$$##matplotlib.rc('font', **{'sans-serif': 'Arial', 'family': 'sans-serif'})@##@@Convert  DateTime column 'date' of pandas dataframe 'df' to ordinal##$$##df['date'].apply(lambda x: x.toordinal())@##@@get html source of Selenium WebElement `element`##$$##element.get_attribute('innerHTML')@##@@Get the integer location of a key `bob` in a pandas data frame##$$##df.index.get_loc('bob')@##@@open a 'gnome' terminal from python script and run  'sudo apt-get update' command.##$$##os.system('gnome-terminal -e \'bash -c "sudo apt-get update; exec bash"\'')@##@@add an item with key 'third_key' and value 1 to an dictionary `my_dict`##$$##my_dict.update({'third_key': 1})@##@@declare an array##$$##my_list = []@##@@Insert item `12` to a list `my_list`##$$##my_list.append(12)@##@@add an entry 'wuggah' at the beginning of list `myList`##$$##myList.insert(0, 'wuggah')@##@@convert a hex-string representation to actual bytes##$$##"""\\xF3\\xBE\\x80\\x80""".replace('\\x', '').decode('hex')@##@@select the last column of dataframe `df`##$$##df[df.columns[-1]]@##@@get the first value from dataframe `df` where column 'Letters' is equal to 'C'##$$##df.loc[df['Letters'] == 'C', 'Letters'].values[0]@##@@converting two lists `[1, 2, 3]` and `[4, 5, 6]` into a matrix##$$##np.column_stack(([1, 2, 3], [4, 5, 6]))@##@@get the type of `i`##$$##type(i)@##@@determine the type of variable `v`##$$##type(v)@##@@determine the type of variable `v`##$$##type(v)@##@@determine the type of variable `v`##$$##type(v)@##@@determine the type of variable `v`##$$##type(v)@##@@get the type of variable `variable_name`##$$##print(type(variable_name))@##@@get the 5th item of a generator##$$##next(itertools.islice(range(10), 5, 5 + 1))@##@@Print a string `word` with string format##$$##print('"{}"'.format(word))@##@@join a list of strings `list` using a space ' '##$$##""" """.join(list)@##@@create list `y` containing two empty lists##$$##y = [[] for n in range(2)]@##@@read a file 'C:/name/MyDocuments/numbers' into a list `data`##$$##data = [line.strip() for line in open('C:/name/MyDocuments/numbers', 'r')]@##@@delete all occurrences of character 'i' in string 'it is icy'##$$##"""""".join([char for char in 'it is icy' if char != 'i'])@##@@delete all instances of a character 'i' in a string 'it is icy'##$$##re.sub('i', '', 'it is icy')@##@@delete all characters "i" in string "it is icy"##$$##"""it is icy""".replace('i', '')@##@@None##$$##"""""".join([char for char in 'it is icy' if char != 'i'])@##@@Drop rows of pandas dataframe `df` having NaN in column at index "1"##$$##df.dropna(subset=[1])@##@@get elements from list `myList`, that have a field `n` value 30##$$##[x for x in myList if x.n == 30]@##@@converting list of strings `intstringlist` to list of integer `nums`##$$##nums = [int(x) for x in intstringlist]@##@@convert list of string numbers into list of integers##$$##map(int, eval(input('Enter the unfriendly numbers: ')))@##@@print "." without newline##$$##sys.stdout.write('.')@##@@round off the float that is the product of `2.52 * 100` and convert it to an int##$$##int(round(2.51 * 100))@##@@Find all files in directory "/mydir" with extension ".txt"##$$##os.chdir('/mydir')
for file in glob.glob('*.txt'):
    pass@##@@Find all files in directory "/mydir" with extension ".txt"##$$##for file in os.listdir('/mydir'):
    if file.endswith('.txt'):
        pass@##@@Find all files in directory "/mydir" with extension ".txt"##$$##for (root, dirs, files) in os.walk('/mydir'):
    for file in files:
        if file.endswith('.txt'):
            pass@##@@plot dataframe `df` without a legend##$$##df.plot(legend=False)@##@@loop through the IP address range "192.168.x.x"##$$##for i in range(256):
    for j in range(256):
        ip = ('192.168.%d.%d' % (i, j))
        print(ip)@##@@loop through the IP address range "192.168.x.x"##$$##for (i, j) in product(list(range(256)), list(range(256))):
    pass@##@@loop through the IP address range "192.168.x.x"##$$##generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)@##@@Sum the corresponding decimal values for binary values of each boolean element in list `x`##$$##sum(1 << i for i, b in enumerate(x) if b)@##@@write multiple strings `line1`, `line2` and `line3` in one line in a file `target`##$$##target.write('%r\n%r\n%r\n' % (line1, line2, line3))@##@@Convert list of lists `data` into a flat list##$$##[y for x in data for y in (x if isinstance(x, list) else [x])]@##@@Print new line character as `\n` in a string `foo\nbar`##$$##print('foo\nbar'.encode('string_escape'))@##@@remove last comma character ',' in string `s`##$$##"""""".join(s.rsplit(',', 1))@##@@calculate the mean of each element in array `x` with the element previous to it##$$##(x[1:] + x[:-1]) / 2@##@@get an array of the mean of each two consecutive values in numpy array `x`##$$##x[:-1] + (x[1:] - x[:-1]) / 2@##@@load data containing `utf-8` from file `new.txt` into numpy array `arr`##$$##arr = numpy.fromiter(codecs.open('new.txt', encoding='utf-8'), dtype='<U2')@##@@reverse sort list of dicts `l` by value for key `time`##$$##l = sorted(l, key=itemgetter('time'), reverse=True)@##@@Sort a list of dictionary `l` based on key `time` in descending order##$$##l = sorted(l, key=lambda a: a['time'], reverse=True)@##@@get rows of dataframe `df` that match regex '(Hel|Just)'##$$##df.loc[df[0].str.contains('(Hel|Just)')]@##@@find the string in `your_string` between two special characters "[" and "]"##$$##re.search('\\[(.*)\\]', your_string).group(1)@##@@None##$$##[d.strftime('%Y%m%d') for d in pandas.date_range('20130226', '20130302')]@##@@count number of times string 'brown' occurred in string 'The big brown fox is brown'##$$##"""The big brown fox is brown""".count('brown')@##@@decode json string `request.body` to python dict##$$##json.loads(request.body)@##@@download the file from url `url` and save it under file `file_name`##$$##urllib.request.urlretrieve(url, file_name)@##@@split string `text` by space##$$##text.split()@##@@split string `text` by ","##$$##text.split(',')@##@@Split string `line` into a list by whitespace##$$##line.split()@##@@replace dot characters  '.' associated with ascii letters in list `s` with space ' '##$$##[re.sub('(?<!\\d)\\.(?!\\d)', ' ', i) for i in s]@##@@sort list `list_of_strings` based on second index of each string `s`##$$##sorted(list_of_strings, key=lambda s: s.split(',')[1])@##@@call multiple bash function ‘vasp’ and ‘tee tee_output’ using ‘|’##$$##subprocess.check_call('vasp | tee tee_output', shell=True)@##@@eliminate all strings from list `lst`##$$##[element for element in lst if isinstance(element, int)]@##@@get all the elements except strings from the list 'lst'.##$$##[element for element in lst if not isinstance(element, str)]@##@@Sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`##$$##newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])@##@@sort a list of dictionaries `l` by values in key `name` in descending order##$$##newlist = sorted(l, key=itemgetter('name'), reverse=True)@##@@None##$$##list_of_dicts.sort(key=operator.itemgetter('name'))@##@@None##$$##list_of_dicts.sort(key=operator.itemgetter('age'))@##@@None##$$##df.groupby('prots').sum().sort('scores', ascending=False)@##@@join together with "," elements inside a list indexed with 'category' within a dictionary `trans`##$$##""",""".join(trans['category'])@##@@concatenate array of strings `['A', 'B', 'C', 'D']` into a string##$$##"""""".join(['A', 'B', 'C', 'D'])@##@@get json data from restful service 'url'##$$##json.load(urllib.request.urlopen('url'))@##@@Remove all strings from a list a strings `sents` where the values starts with `@$\t` or `#`##$$##[x for x in sents if not x.startswith('@$\t') and not x.startswith('#')]@##@@django filter by hour##$$##Entry.objects.filter(pub_date__contains='08:00')@##@@sort a list of dictionary `list` first by key `points` and then by `time`##$$##list.sort(key=lambda item: (item['points'], item['time']))@##@@convert datetime object `(1970, 1, 1)` to seconds##$$##(t - datetime.datetime(1970, 1, 1)).total_seconds()@##@@insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.##$$##re.sub('(\\_a)?\\.([^\\.]*)$', '_suff.\\2', 'long.file.name.jpg')@##@@reload a module `module`##$$##import imp
imp.reload(module)@##@@Convert integer `number` into an unassigned integer##$$##struct.unpack('H', struct.pack('h', number))@##@@convert int values in list `numlist` to float##$$##numlist = [float(x) for x in numlist]@##@@write dataframe `df`, excluding index, to a csv file##$$##df.to_csv(filename, index=False)@##@@convert a urllib unquoted string `unescaped` to a json data `json_data`##$$##json_data = json.loads(unescaped)@##@@Create a list containing all ascii characters as its elements##$$##[chr(i) for i in range(127)]@##@@write `newFileBytes` to a binary file `newFile`##$$##newFile.write(struct.pack('5B', *newFileBytes))@##@@python regex - check for a capital letter with a following lowercase in string `string`##$$##re.sub('^[A-Z0-9]*(?![a-z])', '', string)@##@@get the last key of dictionary `dict`##$$##list(dict.keys())[-1]@##@@write line "hi there" to file `f`##$$##print('hi there', file=f)@##@@write line "hi there" to file `myfile`##$$##f = open('myfile', 'w')
f.write('hi there\n')
f.close()@##@@write line "Hello" to file `somefile.txt`##$$##with open('somefile.txt', 'a') as the_file:
    the_file.write('Hello\n')@##@@convert unicode string `s` to ascii##$$##s.encode('iso-8859-15')@##@@Django get maximum value associated with field 'added' in model `AuthorizedEmail`##$$##AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]@##@@Find all numbers and dots from a string `text` using regex##$$##re.findall('Test([0-9.]*[0-9]+)', text)@##@@python regex  to find all numbers and dots from 'text'##$$##re.findall('Test([\\d.]*\\d+)', text)@##@@execute script 'script.ps1' using 'powershell.exe' shell##$$##os.system('powershell.exe', 'script.ps1')@##@@Sort a list of tuples `b` by third item in the tuple##$$##b.sort(key=lambda x: x[1][2])@##@@get a list of all keys in Cassandra database `cf` with pycassa##$$##list(cf.get_range().get_keys())@##@@create a datetime with the current date & time##$$##datetime.datetime.now()@##@@get the index of an integer `1` from a list `lst` if the list also contains boolean items##$$##next(i for i, x in enumerate(lst) if not isinstance(x, bool) and x == 1)@##@@subtract 13 from every number in a list `a`##$$##a[:] = [(x - 13) for x in a]@##@@choose a random file from the directory contents of the C drive, `C:\\`##$$##random.choice(os.listdir('C:\\'))@##@@get the highest element in absolute value in a numpy matrix `x`##$$##max(x.min(), x.max(), key=abs)@##@@Get all urls within text `s`##$$##re.findall('"(http.*?)"', s, re.MULTILINE | re.DOTALL)@##@@match urls whose domain doesn't start with `t` from string `document` using regex##$$##re.findall('http://[^t][^s"]+\\.html', document)@##@@split a string `mystring` considering the spaces ' '##$$##mystring.replace(' ', '! !').split('!')@##@@open file `path` with mode 'r'##$$##open(path, 'r')@##@@sum elements at the same index in list `data`##$$##[[sum(item) for item in zip(*items)] for items in zip(*data)]@##@@add a new axis to array `a`##$$##a[:, (np.newaxis)]@##@@Concatenate elements of a list 'x' of multiple integers to a single integer##$$##sum(d * 10 ** i for i, d in enumerate(x[::-1]))@##@@convert a list of integers into a single integer##$$##r = int(''.join(map(str, x)))@##@@convert a DateTime string back to a DateTime object of format '%Y-%m-%d %H:%M:%S.%f'##$$##datetime.strptime('2010-11-13 10:33:54.227806', '%Y-%m-%d %H:%M:%S.%f')@##@@get the average of a list values for each key in dictionary `d`)##$$##[(i, sum(j) / len(j)) for i, j in list(d.items())]@##@@zip two lists `[1, 2]` and `[3, 4]` into a list of two tuples containing elements at the same index in each list##$$##zip([1, 2], [3, 4])@##@@prepend string 'hello' to all items in list 'a'##$$##['hello{0}'.format(i) for i in a]@##@@regex for repeating words in a string `s`##$$##re.sub('(?<!\\S)((\\S+)(?:\\s+\\2))(?:\\s+\\2)+(?!\\S)', '\\1', s)@##@@normalize a pandas dataframe `df` by row##$$##df.div(df.sum(axis=1), axis=0)@##@@swap values in a tuple/list inside a list `mylist`##$$##map(lambda t: (t[1], t[0]), mylist)@##@@Swap values in a tuple/list in list `mylist`##$$##[(t[1], t[0]) for t in mylist]@##@@None##$$##driver.find_element_by_xpath("//p[@id, 'one']/following-sibling::p")@##@@find all occurrences of the pattern '\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+' within `strs`##$$##re.findall('\\[[^\\]]*\\]|\\([^\\)]*\\)|"[^"]*"|\\S+', strs)@##@@generate the combinations of 3 from a set `{1, 2, 3, 4}`##$$##print(list(itertools.combinations({1, 2, 3, 4}, 3)))@##@@add multiple columns `hour`, `weekday`, `weeknum` to pandas data frame `df` from lambda function `lambdafunc`##$$##df[['hour', 'weekday', 'weeknum']] = df.apply(lambdafunc, axis=1)@##@@BeautifulSoup search string 'Elsie' inside tag 'a'##$$##soup.find_all('a', string='Elsie')@##@@Convert a datetime object `my_datetime` into readable format `%B %d, %Y`##$$##my_datetime.strftime('%B %d, %Y')@##@@parse string `s` to int when string contains a number##$$##int(''.join(c for c in s if c.isdigit()))@##@@add dictionary `{'class': {'section': 5}}` to key 'Test' of dictionary `dic`##$$##dic['Test'].update({'class': {'section': 5}})@##@@transforming the string `s` into dictionary##$$##dict(map(int, x.split(':')) for x in s.split(','))@##@@None##$$##driver.find_element_by_xpath("//div[@id='a']//a[@class='click']")@##@@find rows matching `(0,1)` in a 2 dimensional numpy array `vals`##$$##np.where((vals == (0, 1)).all(axis=1))@##@@None##$$##SomeModel.objects.filter(id=id).delete()@##@@build a dictionary containing the conversion of each list in list `[['two', 2], ['one', 1]]` to a key/value pair as its items##$$##dict([['two', 2], ['one', 1]])@##@@convert list `l` to dictionary having each two adjacent elements as key/value pair##$$##dict(zip(l[::2], l[1::2]))@##@@assign float 9.8 to variable `GRAVITY`##$$##GRAVITY = 9.8@##@@separate numbers from characters in string "30m1000n20m"##$$##re.findall('(([0-9]+)([A-Z]))', '20M10000N80M')@##@@separate numbers and characters in string '20M10000N80M'##$$##re.findall('([0-9]+|[A-Z])', '20M10000N80M')@##@@separate numbers and characters in string '20M10000N80M'##$$##re.findall('([0-9]+)([A-Z])', '20M10000N80M')@##@@Get a list of  words from a string `Hello world, my name is...James the 2nd!` removing punctuation##$$##re.compile('\\w+').findall('Hello world, my name is...James the 2nd!')@##@@Convert string '03:55' into datetime.time object##$$##datetime.datetime.strptime('03:55', '%H:%M').time()@##@@request url 'https://www.reporo.com/' without verifying SSL certificates##$$##requests.get('https://www.reporo.com/', verify=False)@##@@Extract values not equal to 0 from numpy array `a`##$$##a[a != 0]@##@@map two lists `keys` and `values` into a dictionary##$$##new_dict = {k: v for k, v in zip(keys, values)}@##@@map two lists `keys` and `values` into a dictionary##$$##dict((k, v) for k, v in zip(keys, values))@##@@map two lists `keys` and `values` into a dictionary##$$##dict([(k, v) for k, v in zip(keys, values)])@##@@find the string matches within parenthesis from a string `s` using regex##$$##m = re.search('\\[(\\w+)\\]', s)@##@@Enable the SO_REUSEADDR socket option in socket object `s` to fix the error `only one usage of each socket address is normally permitted`##$$##s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)@##@@append the sum of each tuple pair in the grouped list `list1` and list `list2` elements to list `list3`##$$##list3 = [(a + b) for a, b in zip(list1, list2)]@##@@converting hex string `s` to its integer representations##$$##[ord(c) for c in s.decode('hex')]@##@@sort list `student_tuples` by second element of each tuple in ascending and third element of each tuple in descending##$$##print(sorted(student_tuples, key=lambda t: (-t[2], t[0])))@##@@get list of duplicated elements in range of 3##$$##[y for x in range(3) for y in [x, x]]@##@@read the contents of the file 'file.txt' into `txt`##$$##txt = open('file.txt').read()@##@@divide each element in list `myList` by integer `myInt`##$$##myList[:] = [(x / myInt) for x in myList]@##@@None##$$##"""Name: {0[person.name]}""".format({'person.name': 'Joe'})@##@@replace white spaces in dataframe `df` with '_'##$$##df.replace(' ', '_', regex=True)@##@@convert date `my_date` to datetime##$$##datetime.datetime.combine(my_date, datetime.time.min)@##@@convert tuple `tst` to string `tst2`##$$##tst2 = str(tst)@##@@get modified time of file `file`##$$##time.ctime(os.path.getmtime(file))@##@@get creation time of file `file`##$$##time.ctime(os.path.getctime(file))@##@@get modification time of file `filename`##$$##t = os.path.getmtime(filename)@##@@get modification time of file `path`##$$##os.path.getmtime(path)@##@@get modified time of file `file`##$$##print(('last modified: %s' % time.ctime(os.path.getmtime(file))))@##@@get the creation time of file `file`##$$##print(('created: %s' % time.ctime(os.path.getctime(file))))@##@@get the creation time of file `path_to_file`##$$##return os.path.getctime(path_to_file)@##@@execute os command ''TASKKILL /F /IM firefox.exe''##$$##os.system('TASKKILL /F /IM firefox.exe')@##@@split string `string` on whitespaces using a generator##$$##return (x.group(0) for x in re.finditer("[A-Za-z']+", string))@##@@Unpack each value in list `x` to its placeholder '%' in string '%.2f'##$$##""", """.join(['%.2f'] * len(x))@##@@match regex pattern '(\\d+(\\.\\d+)?)' with string '3434.35353'##$$##print(re.match('(\\d+(\\.\\d+)?)', '3434.35353').group(1))@##@@replace parentheses and all data within it with empty string '' in column 'name' of dataframe `df`##$$##df['name'].str.replace('\\(.*\\)', '')@##@@create a list `result` containing elements form list `list_a` if first element of list `list_a` is in list `list_b`##$$##result = [x for x in list_a if x[0] in list_b]@##@@generate all possible string permutations of each two elements in list `['hel', 'lo', 'bye']`##$$##print([''.join(a) for a in combinations(['hel', 'lo', 'bye'], 2)])@##@@get a list of items form nested list `li` where third element of each item contains string 'ar'##$$##[x for x in li if 'ar' in x[2]]@##@@Sort lists in the list `unsorted_list` by the element at index 3 of each list##$$##unsorted_list.sort(key=lambda x: x[3])@##@@Log message 'test' on the root logger.##$$##logging.info('test')@##@@Return a subplot axes positioned by the grid definition `1,1,1` using matpotlib##$$##fig.add_subplot(1, 1, 1)@##@@Sort dictionary `x` by value in ascending order##$$##sorted(list(x.items()), key=operator.itemgetter(1))@##@@Sort dictionary `dict1` by value in ascending order##$$##sorted(dict1, key=dict1.get)@##@@Sort dictionary `d` by value in descending order##$$##sorted(d, key=d.get, reverse=True)@##@@Sort dictionary `d` by value in ascending order##$$##sorted(list(d.items()), key=(lambda x: x[1]))@##@@elementwise product of 3d arrays `A` and `B`##$$##np.einsum('ijk,ikl->ijl', A, B)@##@@Print a string `card` with string formatting##$$##print('I have: {0.price}'.format(card))@##@@Write a comment `# Data for Class A\n` to a file object `f`##$$##f.write('# Data for Class A\n')@##@@move the last item in list `a` to the beginning##$$##a = a[-1:] + a[:-1]@##@@Parse DateTime object `datetimevariable` using format '%Y-%m-%d'##$$##datetimevariable.strftime('%Y-%m-%d')@##@@Normalize line ends in a string 'mixed'##$$##mixed.replace('\r\n', '\n').replace('\r', '\n')@##@@find the real user home directory using python##$$##os.path.expanduser('~user')@##@@index a list `L` with another list `Idx`##$$##T = [L[i] for i in Idx]@##@@get a list of words `words` of a file 'myfile'##$$##words = open('myfile').read().split()@##@@Get a list of lists with summing the values of the second element from each list of lists `data`##$$##[[sum([x[1] for x in i])] for i in data]@##@@summing the second item in a list of lists of lists##$$##[sum([x[1] for x in i]) for i in data]@##@@sort objects in `Articles` in descending order of counts of `likes`##$$##Article.objects.annotate(like_count=Count('likes')).order_by('-like_count')@##@@return a DateTime object with the current UTC date##$$##today = datetime.datetime.utcnow().date()@##@@create a list containing the multiplication of each elements at the same index of list `lista` and list `listb`##$$##[(a * b) for a, b in zip(lista, listb)]@##@@fetch smilies matching regex pattern '(?::|;|=)(?:-)?(?:\\)|\\(|D|P)' in string `s`##$$##re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)', s)@##@@match the pattern '[:;][)(](?![)(])' to the string `str`##$$##re.match('[:;][)(](?![)(])', str)@##@@convert a list of objects `list_name` to json string `json_string`##$$##json_string = json.dumps([ob.__dict__ for ob in list_name])@##@@create a list `listofzeros` of `n` zeros##$$##listofzeros = [0] * n@##@@decode the string 'stringnamehere'  to UTF-8##$$##stringnamehere.decode('utf-8', 'ignore')@##@@Match regex pattern '((?:A|B|C)D)' on string 'BDE'##$$##re.findall('((?:A|B|C)D)', 'BDE')@##@@Create a key `key` if it does not exist in dict `dic` and append element `value` to value.##$$##dic.setdefault(key, []).append(value)@##@@Get the value of the minimum element in the second column of array `a`##$$##a[np.argmin(a[:, (1)])]@##@@extend dictionary `a` with key/value pairs of dictionary `b`##$$##a.update(b)@##@@removing key values pairs with key 'mykey1' from a list of dictionaries `mylist`##$$##[{k: v for k, v in d.items() if k != 'mykey1'} for d in mylist]@##@@None##$$##[dict((k, v) for k, v in d.items() if k != 'mykey1') for d in mylist]@##@@create 3 by 3 matrix of random numbers##$$##numpy.random.random((3, 3))@##@@make new column 'C' in panda dataframe by adding values from other columns 'A' and 'B'##$$##df['C'] = df['A'] + df['B']@##@@create a list of values from the dictionary `programs` that have a key with a case insensitive match to 'new york'##$$##[value for key, value in list(programs.items()) if 'new york' in key.lower()]@##@@append a path `/path/to/main_folder` in system path##$$##sys.path.append('/path/to/main_folder')@##@@get all digits in a string `s` after a '[' character##$$##re.findall('\\d+(?=[^[]+$)', s)@##@@python pickle/unpickle a list to/from a file 'afile'##$$##pickle.load(open('afile', 'rb'))@##@@None##$$##driver.find_element_by_xpath('xpath').click()@##@@count unique index values in column 'A' in pandas dataframe `ex`##$$##ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())@##@@Create a pandas dataframe of values from a dictionary `d` which contains dictionaries of dictionaries##$$##pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)@##@@find out the number of non-matched elements at the same index of list `a` and list `b`##$$##sum(1 for i, j in zip(a, b) if i != j)@##@@make all keys lowercase in dictionary `d`##$$##d = {(a.lower(), b): v for (a, b), v in list(d.items())}@##@@sort list `list_` based on first element of each tuple and by the length of the second element of each tuple##$$##list_.sort(key=lambda x: [x[0], len(x[1]), x[1]])@##@@trim whitespace in string `s`##$$##s.strip()@##@@trim whitespace (including tabs) in `s` on the left side##$$##s = s.lstrip()@##@@trim whitespace (including tabs) in `s` on the right side##$$##s = s.rstrip()@##@@trim characters ' \t\n\r' in `s`##$$##s = s.strip(' \t\n\r')@##@@trim whitespaces (including tabs) in string `s`##$$##print(re.sub('[\\s+]', '', s))@##@@In Django, filter `Task.objects` based on all entities in ['A', 'P', 'F']##$$##Task.objects.exclude(prerequisites__status__in=['A', 'P', 'F'])@##@@Change background color in Tkinter##$$##root.configure(background='black')@##@@convert dict `result` to numpy structured array##$$##numpy.array([(key, val) for key, val in result.items()], dtype)@##@@Concatenate dataframe `df_1` to dataframe `df_2` sorted by values of the column 'y'##$$##pd.concat([df_1, df_2.sort_values('y')])@##@@replace the last occurence of an expression '</div>' with '</bad>' in a string `s`##$$##re.sub('(.*)</div>', '\\1</bad>', s)@##@@get the maximum of 'salary' and 'bonus' values in a dictionary##$$##print(max(d, key=lambda x: (d[x]['salary'], d[x]['bonus'])))@##@@Filter Django objects by `author` with ids `1` and `2`##$$##Book.objects.filter(author__id=1).filter(author__id=2)@##@@split string 'fooxyzbar' based on case-insensitive matching using string 'XYZ'##$$##re.compile('XYZ', re.IGNORECASE).split('fooxyzbar')@##@@get list of sums of neighboring integers in string `example`##$$##[sum(map(int, s)) for s in example.split()]@##@@Get all the keys from dictionary `y` whose value is `1`##$$##[i for i in y if y[i] == 1]@##@@converting byte string `c` in unicode string##$$##c.decode('unicode_escape')@##@@unpivot first 2 columns into new columns 'year' and 'value' from a pandas dataframe `x`##$$##pd.melt(x, id_vars=['farm', 'fruit'], var_name='year', value_name='value')@##@@add key "item3" and value "3" to dictionary `default_data `##$$##default_data['item3'] = 3@##@@add key "item3" and value "3" to dictionary `default_data `##$$##default_data.update({'item3': 3, })@##@@add key value pairs 'item4' , 4 and 'item5' , 5 to dictionary `default_data`##$$##default_data.update({'item4': 4, 'item5': 5, })@##@@Get the first and last 3 elements of list `l`##$$##l[:3] + l[-3:]@##@@reset index to default in dataframe `df`##$$##df = df.reset_index(drop=True)@##@@For each index `x` from 0 to 3, append the element at index `x` of list `b` to the list at index `x` of list a.##$$##[a[x].append(b[x]) for x in range(3)]@##@@get canonical path of the filename `path`##$$##os.path.realpath(path)@##@@check if dictionary `L[0].f.items()` is in dictionary `a3.f.items()`##$$##set(L[0].f.items()).issubset(set(a3.f.items()))@##@@find all the indexes in a Numpy 2D array where the value is 1##$$##zip(*np.where(a == 1))@##@@None##$$##np.where(a == 1)@##@@Collapse hierarchical column index to level 0 in dataframe `df`##$$##df.columns = df.columns.get_level_values(0)@##@@create a matrix from a list `[1, 2, 3]`##$$##x = scipy.matrix([1, 2, 3]).transpose()@##@@add character '@' after word 'get' in string `text`##$$##text = re.sub('(\\bget\\b)', '\\1@', text)@##@@get a numpy array that contains the element wise minimum of three 3x1 arrays##$$##np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)@##@@add a column 'new_col' to dataframe `df` for index in range##$$##df['new_col'] = list(range(1, len(df) + 1))@##@@set environment variable 'DEBUSSY' equal to 1##$$##os.environ['DEBUSSY'] = '1'@##@@Get a environment variable `DEBUSSY`##$$##print(os.environ['DEBUSSY'])@##@@set environment variable 'DEBUSSY' to '1'##$$##os.environ['DEBUSSY'] = '1'@##@@update dictionary `b`, overwriting values where keys are identical, with contents of dictionary `d`##$$##b.update(d)@##@@get all the values in column `b` from pandas data frame `df`##$$##df['b']@##@@make a line plot with errorbars, `ebar`, from data `x, y, err` and set color of the errorbars to `y` (yellow)##$$##ebar = plt.errorbar(x, y, yerr=err, ecolor='y')@##@@find all files with extension '.c' in directory `folder`##$$##results += [each for each in os.listdir(folder) if each.endswith('.c')]@##@@add unicode string '1' to UTF-8 decoded string '\xc2\xa3'##$$##print('\xc2\xa3'.decode('utf8') + '1')@##@@lower-case the string obtained by replacing the occurrences of regex pattern '(?<=[a-z])([A-Z])' in string `s` with eplacement '-\\1'##$$##re.sub('(?<=[a-z])([A-Z])', '-\\1', s).lower()@##@@None##$$##os.system('ulimit -s unlimited; some_executable')@##@@format a string `num` using string formatting##$$##"""{0:.3g}""".format(num)@##@@append the first element of array `a` to array `a`##$$##numpy.append(a, a[0])@##@@return the column for value 38.15 in dataframe `df`##$$##df.ix[:, (df.loc[0] == 38.15)].columns@##@@merge 2 dataframes `df1` and `df2` with same values in a column 'revenue' with and index 'date'##$$##df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])@##@@load a json data `json_string` into variable `json_data`##$$##json_data = json.loads(json_string)@##@@convert radians 1 to degrees##$$##math.cos(math.radians(1))@##@@count the number of integers in list `a`##$$##sum(isinstance(x, int) for x in a)@##@@replacing  '\u200b' with '*' in a string  using regular expressions##$$##'used\u200b'.replace('\u200b', '*')@##@@run function 'SudsMove' simultaneously##$$##threading.Thread(target=SudsMove).start()@##@@sum of squares values in a list `l`##$$##sum(i * i for i in l)@##@@calculate the sum of the squares of each value in list `l`##$$##sum(map(lambda x: x * x, l))@##@@Create a dictionary `d` from list `iterable`##$$##d = dict(((key, value) for (key, value) in iterable))@##@@Create a dictionary `d` from list `iterable`##$$##d = {key: value for (key, value) in iterable}@##@@Create a dictionary `d` from list of key value pairs `iterable`##$$##d = {k: v for (k, v) in iterable}@##@@round off entries in dataframe `df` column `Alabama_exp` to two decimal places, and entries in column `Credit_exp` to three decimal places##$$##df.round({'Alabama_exp': 2, 'Credit_exp': 3})@##@@Make function `WRITEFUNCTION` output nothing in curl `p`##$$##p.setopt(pycurl.WRITEFUNCTION, lambda x: None)@##@@return a random word from a word list 'words'##$$##print(random.choice(words))@##@@Find a max value of the key `count` in a nested dictionary `d`##$$##max(d, key=lambda x: d[x]['count'])@##@@get list of string elements in string `data` delimited by commas, putting `0` in place of empty strings##$$##[(int(x) if x else 0) for x in data.split(',')]@##@@split string `s` into a list of strings based on ',' then replace empty strings with zero##$$##""",""".join(x or '0' for x in s.split(','))@##@@regular expression match nothing##$$##re.compile('$^')@##@@regular expression syntax for not to match anything##$$##re.compile('.\\A|.\\A*|.\\A+')@##@@create a regular expression object with a pattern that will match nothing##$$##re.compile('a^')@##@@drop all columns in dataframe `df` that holds a maximum value bigger than 0##$$##df.columns[df.max() > 0]@##@@check if date `yourdatetime` is equal to today's date##$$##yourdatetime.date() == datetime.today().date()@##@@print bold text 'Hello'##$$##print('\x1b[1m' + 'Hello')@##@@remove 20 symbols in front of '.' in string 'unique12345678901234567890.mkv'##$$##re.sub('.{20}(.mkv)', '\\1', 'unique12345678901234567890.mkv')@##@@Define a list with string values `['a', 'c', 'b', 'obj']`##$$##['a', 'c', 'b', 'obj']@##@@substitute multiple whitespace with single whitespace in string `mystring`##$$##""" """.join(mystring.split())@##@@print a floating point number 2.345e-67 without any truncation##$$##print('{:.100f}'.format(2.345e-67))@##@@Check if key 'key1' in `dict`##$$##('key1' in dict)@##@@Check if key 'a' in `d`##$$##('a' in d)@##@@Check if key 'c' in `d`##$$##('c' in d)@##@@Check if a given key 'key1' exists in dictionary `dict`##$$##if ('key1' in dict):
    pass@##@@Check if a given key `key` exists in dictionary `d`##$$##if (key in d):
    pass@##@@create a django query for a list of values `1, 4, 7`##$$##Blog.objects.filter(pk__in=[1, 4, 7])@##@@read a binary file 'test/test.pdf'##$$##f = open('test/test.pdf', 'rb')@##@@insert ' ' between every three digit before '.' and replace ',' with '.' in 12345678.46##$$##format(12345678.46, ',').replace(',', ' ').replace('.', ',')@##@@Join pandas data frame `frame_1` and `frame_2` with left join by `county_ID` and right join by `countyid`##$$##pd.merge(frame_1, frame_2, left_on='county_ID', right_on='countyid')@##@@calculate ratio of sparsity in a numpy array `a`##$$##np.isnan(a).sum() / np.prod(a.shape)@##@@reverse sort items in default dictionary `cityPopulation` by the third item in each key's list of values##$$##sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)@##@@Sort dictionary `u` in ascending order based on second elements of its values##$$##sorted(list(u.items()), key=lambda v: v[1])@##@@reverse sort dictionary `d` based on its values##$$##sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)@##@@sorting a defaultdict `d` by value##$$##sorted(list(d.items()), key=lambda k_v: k_v[1])@##@@open a file 'bundled-resource.jpg' in the same directory as a python script##$$##f = open(os.path.join(__location__, 'bundled-resource.jpg'))@##@@open the file 'words.txt' in 'rU' mode##$$##f = open('words.txt', 'rU')@##@@divide the values with same keys of two dictionary `d1` and `d2`##$$##{k: (float(d2[k]) / d1[k]) for k in d2}@##@@divide the value for each key `k` in dict `d2` by the value for the same key `k` in dict `d1`##$$##{k: (d2[k] / d1[k]) for k in list(d1.keys()) & d2}@##@@divide values associated with each key in dictionary `d1` from values associated with the same key in dictionary `d2`##$$##dict((k, float(d2[k]) / d1[k]) for k in d2)@##@@write dataframe `df` to csv file `filename` with dates formatted as yearmonthday  `%Y%m%d`##$$##df.to_csv(filename, date_format='%Y%m%d')@##@@remove a key 'key' from a dictionary `my_dict`##$$##my_dict.pop('key', None)@##@@replace NaN values in array `a` with zeros##$$##b = np.where(np.isnan(a), 0, a)@##@@subprocess run command 'start command -flags arguments' through the shell##$$##subprocess.call('start command -flags arguments', shell=True)@##@@run command 'command -flags arguments &' on command line tools as separate processes##$$##subprocess.call('command -flags arguments &', shell=True)@##@@replace percent-encoded code in request `f` to their single-character equivalent##$$##f = urllib.request.urlopen(url, urllib.parse.unquote(urllib.parse.urlencode(params)))@##@@remove white spaces from the end of string "    xyz     "##$$##"""    xyz     """.rstrip()@##@@Replace special characters in utf-8 encoded string `s` using the %xx escape##$$##urllib.parse.quote(s.encode('utf-8'))@##@@None##$$##urllib.parse.quote_plus('a b')@##@@Create an array containing the conversion of string '100110' into separate elements##$$##np.array(map(int, '100110'))@##@@convert a string 'mystr' to numpy array of integer values##$$##print(np.array(list(mystr), dtype=int))@##@@convert an rgb image 'messi5.jpg' into grayscale `img`##$$##img = cv2.imread('messi5.jpg', 0)@##@@sort list `lst` in descending order based on the second item of each tuple in it##$$##lst.sort(key=lambda x: x[2], reverse=True)@##@@None##$$##indices = [i for i, x in enumerate(my_list) if x == 'whatever']@##@@execute shell command 'grep -r PASSED *.log | sort -u | wc -l' with a | pipe in it##$$##subprocess.call('grep -r PASSED *.log | sort -u | wc -l', shell=True)@##@@count the number of trailing question marks in string `my_text`##$$##len(my_text) - len(my_text.rstrip('?'))@##@@remove dollar sign '$' from second to last column data in dataframe 'df' and convert the data into floats##$$##df[df.columns[1:]].replace('[\\$,]', '', regex=True).astype(float)@##@@Merge column  'word' in dataframe `df2` with column 'word' on dataframe `df1`##$$##df1.merge(df2, how='left', on='word')@##@@switch positions of each two adjacent characters in string `a`##$$##print(''.join(''.join(i) for i in zip(a2, a1)) + a[-1] if len(a) % 2 else '')@##@@make a window `root` jump to the front##$$##root.attributes('-topmost', True)@##@@make a window `root` jump to the front##$$##root.lift()@##@@Convert list of booleans `walls` into a hex string##$$##hex(int(''.join([str(int(b)) for b in walls]), 2))@##@@convert the sum of list `walls` into a hex presentation##$$##hex(sum(b << i for i, b in enumerate(reversed(walls))))@##@@print the string `Total score for`, the value of the variable `name`, the string `is` and the value of the variable `score` in one print call.##$$##print(('Total score for', name, 'is', score))@##@@print multiple arguments 'name' and 'score'.##$$##print('Total score for {} is {}'.format(name, score))@##@@print a string using multiple strings `name` and `score`##$$##print('Total score for %s is %s  ' % (name, score))@##@@print string including multiple variables `name` and `score`##$$##print(('Total score for', name, 'is', score))@##@@serve a static html page 'your_template.html' at the root of a django project##$$##url('^$', TemplateView.as_view(template_name='your_template.html'))@##@@use a list of values `[3,6]` to select rows from a pandas dataframe `df`'s column 'A'##$$##df[df['A'].isin([3, 6])]@##@@None##$$##instance.__class__.__name__@##@@execute python code `myscript.py` in a virtualenv `/path/to/my/venv` from matlab##$$##system('/path/to/my/venv/bin/python myscript.py')@##@@django return a QuerySet list containing the values of field 'eng_name' in model `Employees`##$$##Employees.objects.values_list('eng_name', flat=True)@##@@find all digits in string '6,7)' and put them to a list##$$##re.findall('\\d|\\d,\\d\\)', '6,7)')@##@@prompt string 'Press Enter to continue...' to the console##$$##input('Press Enter to continue...')@##@@print string "ABC" as hex literal##$$##"""ABC""".encode('hex')@##@@insert a new field 'geolocCountry' on an existing document  'b' using pymongo##$$##db.Doc.update({'_id': b['_id']}, {'$set': {'geolocCountry': myGeolocCountry}})@##@@Write a regex statement to match 'lol' to 'lolllll'.##$$##re.sub('l+', 'l', 'lollll')@##@@BeautifulSoup find all 'tr' elements in HTML string `soup` at the five stride starting from the fourth element##$$##rows = soup.findAll('tr')[4::5]@##@@reverse all x-axis points in pyplot##$$##plt.gca().invert_xaxis()@##@@reverse y-axis in pyplot##$$##plt.gca().invert_yaxis()@##@@stack two dataframes next to each other in pandas##$$##pd.concat([GOOG, AAPL], keys=['GOOG', 'AAPL'], axis=1)@##@@create a json response `response_data`##$$##return HttpResponse(json.dumps(response_data), content_type='application/json')@##@@decode escape sequences in string `myString`##$$##myString.decode('string_escape')@##@@calculate the md5 checksum of a file named  'filename.exe'##$$##hashlib.md5(open('filename.exe', 'rb').read()).hexdigest()@##@@Find all keys from a dictionary `d` whose values are `desired_value`##$$##[k for k, v in d.items() if v == desired_value]@##@@create a set containing all keys' names from dictionary `LoD`##$$##{k for d in LoD for k in list(d.keys())}@##@@create a set containing all keys names from list of dictionaries `LoD`##$$##set([i for s in [list(d.keys()) for d in LoD] for i in s])@##@@extract all keys from a list of dictionaries `LoD`##$$##[i for s in [list(d.keys()) for d in LoD] for i in s]@##@@unpack keys and values of a dictionary `d` into two lists##$$##keys, values = zip(*list(d.items()))@##@@convert a string `s` containing a decimal to an integer##$$##int(Decimal(s))@##@@None##$$##int(s.split('.')[0])@##@@check if array `b` contains all elements of array `a`##$$##numpy.in1d(b, a).all()@##@@numpy:  check if array 'a' contains all the numbers in array 'b'.##$$##numpy.array([(x in a) for x in b])@##@@Draw node labels `labels` on networkx graph `G ` at position `pos`##$$##networkx.draw_networkx_labels(G, pos, labels)@##@@make a row-by-row copy `y` of array `x`##$$##y = [row[:] for row in x]@##@@Create 2D numpy array from the data provided in 'somefile.csv' with each row in the file having same number of values##$$##X = numpy.loadtxt('somefile.csv', delimiter=',')@##@@get a list of items from the list `some_list` that contain string 'abc'##$$##matching = [s for s in some_list if 'abc' in s]@##@@export a pandas data frame `df` to a file `mydf.tsv` and retain the indices##$$##df.to_csv('mydf.tsv', sep='\t')@##@@None##$$##random.sample(list(range(100)), 10)@##@@split a string `s` on last delimiter##$$##s.rsplit(',', 1)@##@@Check if all elements in list `lst` are tupples of long and int##$$##all(isinstance(x, int) for x in lst)@##@@check if all elements in a list 'lst' are the same type 'int'##$$##all(isinstance(x, int) for x in lst)@##@@strip a string `line` of all carriage returns and newlines##$$##line.strip()@##@@scroll to the bottom of a web page using selenium webdriver##$$##driver.execute_script('window.scrollTo(0, Y)')@##@@scroll a to the bottom of a web page using selenium webdriver##$$##driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')@##@@convert Date object `dateobject` into a DateTime object##$$##datetime.datetime.combine(dateobject, datetime.time())@##@@check if any item from list `b` is in list `a`##$$##print(any(x in a for x in b))@##@@save a numpy array `image_array` as an image 'outfile.jpg'##$$##scipy.misc.imsave('outfile.jpg', image_array)@##@@Remove anything in parenthesis from string `item` with a regex##$$##item = re.sub(' ?\\([^)]+\\)', '', item)@##@@Remove word characters in parenthesis from string `item` with a regex##$$##item = re.sub(' ?\\(\\w+\\)', '', item)@##@@Remove all data inside parenthesis in string `item`##$$##item = re.sub(' \\(\\w+\\)', '', item)@##@@check if any elements in one list `list1` are in another list `list2`##$$##len(set(list1).intersection(list2)) > 0@##@@convert hex string `s` to decimal##$$##i = int(s, 16)@##@@convert hex string "0xff" to decimal##$$##int('0xff', 16)@##@@convert hex string "FFFF" to decimal##$$##int('FFFF', 16)@##@@convert hex string '0xdeadbeef' to decimal##$$##ast.literal_eval('0xdeadbeef')@##@@convert hex string 'deadbeef' to decimal##$$##int('deadbeef', 16)@##@@take screenshot 'screen.png' on mac os x##$$##os.system('screencapture screen.png')@##@@Set a window size to `1400, 1000` using selenium webdriver##$$##driver.set_window_size(1400, 1000)@##@@replace non-ascii chars from a unicode string u'm\xfasica'##$$##unicodedata.normalize('NFKD', 'm\xfasica').encode('ascii', 'ignore')@##@@concatenate dataframe `df1` with `df2` whilst removing duplicates##$$##pandas.concat([df1, df2]).drop_duplicates().reset_index(drop=True)@##@@Construct an array with data type float32 `a` from data in binary file 'filename'##$$##a = numpy.fromfile('filename', dtype=numpy.float32)@##@@execute a mv command `mv /home/somedir/subdir/* somedir/` in subprocess##$$##subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)@##@@None##$$##subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)@##@@print a character that has unicode value `\u25b2`##$$##print('\u25b2'.encode('utf-8'))@##@@compare contents  at filehandles `file1` and `file2` using difflib##$$##difflib.SequenceMatcher(None, file1.read(), file2.read())@##@@Create a dictionary from string `e` separated by `-` and `,`##$$##dict((k, int(v)) for k, v in (e.split(' - ') for e in s.split(',')))@##@@check if all elements in a tuple `(1, 6)` are in another `(1, 2, 3, 4, 5)`##$$##all(i in (1, 2, 3, 4, 5) for i in (1, 6))@##@@extract unique dates from time series 'Date' in dataframe `df`##$$##df['Date'].map(lambda t: t.date()).unique()@##@@right align string `mystring` with a width of 7##$$##"""{:>7s}""".format(mystring)@##@@read an excel file 'ComponentReport-DJI.xls'##$$##open('ComponentReport-DJI.xls', 'rb').read(200)@##@@sort dataframe `df` based on column 'b' in ascending and column 'c' in descending##$$##df.sort_values(['b', 'c'], ascending=[True, False], inplace=True)@##@@sort dataframe `df` based on column 'a' in ascending and column 'b' in descending##$$##df.sort_values(['a', 'b'], ascending=[True, False])@##@@sort a pandas data frame with column `a` in ascending and `b` in descending order##$$##df1.sort(['a', 'b'], ascending=[True, False], inplace=True)@##@@sort a pandas data frame by column `a` in ascending, and by column `b` in descending order##$$##df.sort(['a', 'b'], ascending=[True, False])@##@@django redirect to view 'Home.views.index'##$$##redirect('Home.views.index')@##@@remove all values within one list `[2, 3, 7]` from another list `a`##$$##[x for x in a if x not in [2, 3, 7]]@##@@remove the punctuation '!', '.', ':' from a string `asking`##$$##out = ''.join(c for c in asking if c not in ('!', '.', ':'))@##@@BeautifulSoup get value associated with attribute 'content' where attribute 'name' is equal to 'City' in tag 'meta' in HTML parsed string `soup`##$$##soup.find('meta', {'name': 'City'})['content']@##@@unquote a urlencoded unicode string '%0a'##$$##urllib.parse.unquote('%0a')@##@@decode url `url` from UTF-16 code to UTF-8 code##$$##urllib.parse.unquote(url).decode('utf8')@##@@empty a list `lst`##$$##del lst[:]@##@@empty a list `lst`##$$##del lst1[:]@##@@empty a list `lst`##$$##lst[:] = []@##@@empty a list `alist`##$$##alist[:] = []@##@@reset index of series `s`##$$##s.reset_index(0).reset_index(drop=True)@##@@convert unicode text from list `elems` with index 0 to normal text 'utf-8'##$$##elems[0].getText().encode('utf-8')@##@@create a list containing the subtraction of each item in list `L` from the item prior to it##$$##[(y - x) for x, y in zip(L, L[1:])]@##@@get value in string `line` matched by regex pattern '\\bLOG_ADDR\\s+(\\S+)'##$$##print(re.search('\\bLOG_ADDR\\s+(\\S+)', line).group(1))@##@@import all classes from module `some.package`##$$##globals().update(importlib.import_module('some.package').__dict__)@##@@convert a list of characters `['a', 'b', 'c', 'd']` into a string##$$##"""""".join(['a', 'b', 'c', 'd'])@##@@Slice `url` with '&' as delimiter  to get  "http://www.domainname.com/page?CONTENT_ITEM_ID=1234" from url "http://www.domainname.com/page?CONTENT_ITEM_ID=1234&param2&param3
"##$$##url.split('&')@##@@sort dictionary `d` by key##$$##od = collections.OrderedDict(sorted(d.items()))@##@@sort a dictionary `d` by key##$$##OrderedDict(sorted(list(d.items()), key=(lambda t: t[0])))@##@@Execute a put request to the url `url`##$$##response = requests.put(url, data=json.dumps(data), headers=headers)@##@@replace everything that is not an alphabet or a digit with '' in 's'.##$$##re.sub('[\\W_]+', '', s)@##@@create a list of aggregation of each element from list `l2` to all elements of list `l1`##$$##[(x + y) for x in l2 for y in l1]@##@@convert string `x'  to dictionary splitted by `=` using list comprehension##$$##dict([x.split('=') for x in s.split()])@##@@remove index 2 element from a list `my_list`##$$##my_list.pop(2)@##@@Delete character "M" from a string `s` using python##$$##s = s.replace('M', '')@##@@None##$$##newstr = oldstr.replace('M', '')@##@@get the sum of the products of each pair of corresponding elements in lists `a` and `b`##$$##sum(x * y for x, y in zip(a, b))@##@@sum the products of each two elements at the same index of list `a` and list `b`##$$##list(x * y for x, y in list(zip(a, b)))@##@@sum the product of each two items at the same index of list `a` and list `b`##$$##sum(i * j for i, j in zip(a, b))@##@@sum the product of elements of two lists named `a` and `b`##$$##sum(x * y for x, y in list(zip(a, b)))@##@@write the content of file `xxx.mp4` to file `f`##$$##f.write(open('xxx.mp4', 'rb').read())@##@@Add 1 to each integer value in list `my_list`##$$##new_list = [(x + 1) for x in my_list]@##@@get a list of all items in list `j` with values greater than `5`##$$##[x for x in j if x >= 5]@##@@set color marker styles `--bo` in matplotlib##$$##plt.plot(list(range(10)), '--bo')@##@@set circle markers on plot for individual points  defined in list   `[1,2,3,4,5,6,7,8,9,10]` created by range(10)##$$##plt.plot(list(range(10)), linestyle='--', marker='o', color='b')@##@@split strings in list `l` on the first occurring tab `\t` and enter only the first resulting substring in a new list##$$##[i.split('\t', 1)[0] for i in l]@##@@Split each string in list `myList` on the tab character##$$##myList = [i.split('\t')[0] for i in myList]@##@@Sum numbers in a list 'your_list'##$$##sum(your_list)@##@@attach debugger pdb to class `ForkedPdb`##$$##ForkedPdb().set_trace()@##@@Compose keys from dictionary `d1` with respective values in dictionary `d2`##$$##result = {k: d2.get(v) for k, v in list(d1.items())}@##@@add one day and three hours to the present time from datetime.now()##$$##datetime.datetime.now() + datetime.timedelta(days=1, hours=3)@##@@None##$$##[int(s[i:i + 3], 2) for i in range(0, len(s), 3)]@##@@switch keys and values in a dictionary `my_dict`##$$##dict((v, k) for k, v in my_dict.items())@##@@sort a list `L` by number after second '.'##$$##print(sorted(L, key=lambda x: int(x.split('.')[2])))@##@@Check if the value of the key "name" is "Test" in a list of dictionaries `label`##$$##any(d['name'] == 'Test' for d in label)@##@@remove all instances of [1, 1] from list `a`##$$##a[:] = [x for x in a if x != [1, 1]]@##@@remove all instances of `[1, 1]` from a list `a`##$$##[x for x in a if x != [1, 1]]@##@@convert a list 'a' to a dictionary where each even element represents the key to the dictionary, and the following odd element is the value##$$##b = {a[i]: a[i + 1] for i in range(0, len(a), 2)}@##@@check whether elements in list `a` appear only once##$$##len(set(a)) == len(a)@##@@Generate MD5 checksum of file in the path `full_path` in hashlib##$$##print(hashlib.md5(open(full_path, 'rb').read()).hexdigest())@##@@None##$$##sorted(list(data.items()), key=lambda x: x[1][0])@##@@randomly switch letters' cases in string `s`##$$##"""""".join(x.upper() if random.randint(0, 1) else x for x in s)@##@@force bash interpreter '/bin/bash' to be used instead of shell##$$##os.system('GREPDB="echo 123"; /bin/bash -c "$GREPDB"')@##@@Run a command `echo hello world` in bash instead of shell##$$##os.system('/bin/bash -c "echo hello world"')@##@@access the class variable `a_string` from a class object `test`##$$##getattr(test, a_string)@##@@Display a image file `pathToFile`##$$##Image.open('pathToFile').show()@##@@replace single quote character in string "didn't" with empty string ''##$$##"""didn't""".replace("'", '')@##@@sort list `files` based on variable `file_number`##$$##files.sort(key=file_number)@##@@remove all whitespace in a string `sentence`##$$##sentence.replace(' ', '')@##@@remove all whitespace in a string `sentence`##$$##pattern = re.compile('\\s+')
sentence = re.sub(pattern, '', sentence)@##@@remove whitespace in string `sentence` from beginning and end##$$##sentence.strip()@##@@remove all whitespaces in string `sentence`##$$##sentence = re.sub('\\s+', '', sentence, flags=re.UNICODE)@##@@remove all whitespaces in a string `sentence`##$$##sentence = ''.join(sentence.split())@##@@sum all the values in a counter variable `my_counter`##$$##sum(my_counter.values())@##@@find the euclidean distance between two 3-d arrays `A` and `B`##$$##np.sqrt(((A - B) ** 2).sum(-1))@##@@create list `levels` containing 3 empty dictionaries##$$##levels = [{}, {}, {}]@##@@find the sums of length 7 subsets of a list `daily`##$$##weekly = [sum(visitors[x:x + 7]) for x in range(0, len(daily), 7)]@##@@Delete an element `key` from a dictionary `d`##$$##del d[key]@##@@Delete an element 0 from a dictionary `a`##$$##{i: a[i] for i in a if (i != 0)}@##@@Delete an element "hello" from a dictionary `lol`##$$##lol.pop('hello')@##@@Delete an element with key `key` dictionary `r`##$$##del r[key]@##@@solve for the least squares' solution of matrices `a` and `b`##$$##np.linalg.solve(np.dot(a.T, a), np.dot(a.T, b))@##@@split dictionary/list inside a pandas column 'b' into separate columns in dataframe `df`##$$##pd.concat([df.drop('b', axis=1), pd.DataFrame(df['b'].tolist())], axis=1)@##@@loop through 0 to 10 with step 2##$$##for i in range(0, 10, 2):
    pass@##@@loop through `mylist` with step 2##$$##for i in mylist[::2]:
    pass@##@@lowercase string values with key 'content' in a list of dictionaries `messages`##$$##[{'content': x['content'].lower()} for x in messages]@##@@convert a list `my_list` into string with values separated by spaces##$$##""" """.join(my_list)@##@@replace each occurrence of the pattern '(http://\\S+|\\S*[^\\w\\s]\\S*)' within `a` with ''##$$##re.sub('(http://\\S+|\\S*[^\\w\\s]\\S*)', '', a)@##@@check if string `str` is palindrome##$$##str(n) == str(n)[::-1]@##@@upload binary file `myfile.txt` with ftplib##$$##ftp.storbinary('STOR myfile.txt', open('myfile.txt', 'rb'))@##@@remove all characters from string `stri` upto character 'I'##$$##re.sub('.*I', 'I', stri)@##@@parse a comma-separated string number '1,000,000' into int##$$##int('1,000,000'.replace(',', ''))@##@@combine  dataframe `df1` and dataframe `df2` by index number##$$##pd.merge(df1, df2, left_index=True, right_index=True, how='outer')@##@@None##$$##pandas.concat([df1, df2], axis=1)@##@@check if all boolean values in a python dictionary `dict` are true##$$##all(dict.values())@##@@use regex pattern '^12(?=.{4}$)' to remove digit 12 if followed by 4 other digits in column `c_contofficeID` of dataframe `df`##$$##df.c_contofficeID.str.replace('^12(?=.{4}$)', '')@##@@reverse a list `L`##$$##L[::(-1)]@##@@reverse a list `array`##$$##reversed(array)@##@@reverse a list `L`##$$##L.reverse()@##@@reverse a list `array`##$$##list(reversed(array))@##@@get first element of each tuple in list `A`##$$##[tup[0] for tup in A]@##@@replace character 'a' with character 'e' and character 's' with character '3' in file `contents`##$$##newcontents = contents.replace('a', 'e').replace('s', '3')@##@@serialise SqlAlchemy RowProxy object `row` to a json object##$$##json.dumps([dict(list(row.items())) for row in rs])@##@@get file '~/foo.ini'##$$##config_file = os.path.expanduser('~/foo.ini')@##@@get multiple parameters with same name from a url in pylons##$$##request.params.getall('c')@##@@Convert array `x` into a correlation matrix##$$##np.corrcoef(x)@##@@Find the greatest number in set `(1, 2, 3)`##$$##print(max(1, 2, 3))@##@@Retrieve parameter 'var_name' from a GET request.##$$##self.request.get('var_name')@##@@Add 100 to each element of column "x" in dataframe `a`##$$##a['x'].apply(lambda x, y: x + y, args=(100,))@##@@Django get first 10 records of model `User` ordered by criteria 'age' of model 'pet'##$$##User.objects.order_by('-pet__age')[:10]@##@@delay for "5" seconds##$$##time.sleep(5)@##@@make a 60 seconds time delay##$$##time.sleep(60)@##@@make a 0.1 seconds time delay##$$##sleep(0.1)@##@@make a 60 seconds time delay##$$##time.sleep(60)@##@@make a 0.1 seconds time delay##$$##time.sleep(0.1)@##@@From a list of strings `my_list`, remove the values that contains numbers.##$$##[x for x in my_list if not any(c.isdigit() for c in x)]@##@@get the middle two characters of a string 'state' in a pandas dataframe `df`##$$##df['state'].apply(lambda x: x[len(x) / 2 - 1:len(x) / 2 + 1])@##@@draw a grid line on every tick of plot `plt`##$$##plt.grid(True)@##@@sort list `lst` based on each element's number of occurrences##$$##sorted(lst, key=lambda x: (-1 * c[x], lst.index(x)))@##@@Get the value with the maximum length in each column in array `foo`##$$##[max(len(str(x)) for x in line) for line in zip(*foo)]@##@@get the count of each unique value in column `Country` of dataframe `df` and store in column `Sum of Accidents`##$$##df.Country.value_counts().reset_index(name='Sum of Accidents')@##@@calculat the difference between each row and the row previous to it in dataframe `data`##$$##data.set_index('Date').diff()@##@@append values `[3, 4]` to a set `a`##$$##a.update([3, 4])@##@@set every two-stride far element to -1 starting from second element in array `a`##$$##a[1::2] = -1@##@@Get rank of rows from highest to lowest of dataframe `df`, grouped by value in column `group`, according to value in column `value`##$$##df.groupby('group')['value'].rank(ascending=False)@##@@convert js date object 'Tue, 22 Nov 2011 06:00:00 GMT' to python datetime##$$##datetime.strptime('Tue, 22 Nov 2011 06:00:00 GMT', '%a, %d %b %Y %H:%M:%S %Z')@##@@Convert a binary value '1633837924' to string##$$##struct.pack('<I', 1633837924)@##@@append string `foo` to list `list`##$$##list.append('foo')@##@@insert string `foo` at position `0` of list `list`##$$##list.insert(0, 'foo')@##@@convert keys in dictionary `thedict` into case insensitive##$$##theset = set(k.lower() for k in thedict)@##@@pad 'dog' up to a length of 5 characters with 'x'##$$##"""{s:{c}^{n}}""".format(s='dog', n=5, c='x')@##@@check if type of variable `s` is a string##$$##isinstance(s, str)@##@@check if type of a variable `s` is string##$$##isinstance(s, str)@##@@Convert list of dictionaries `L` into a flat dictionary##$$##dict(pair for d in L for pair in list(d.items()))@##@@merge a list of dictionaries in list `L` into a single dict##$$##{k: v for d in L for k, v in list(d.items())}@##@@sort a pandas data frame according to column `Peak` in ascending and `Weeks` in descending order##$$##df.sort_values(['Peak', 'Weeks'], ascending=[True, False], inplace=True)@##@@sort a pandas data frame by column `Peak` in ascending and `Weeks` in descending order##$$##df.sort(['Peak', 'Weeks'], ascending=[True, False], inplace=True)@##@@run the code contained in string "print('Hello')"##$$##eval("print('Hello')")@##@@creating a list of dictionaries [{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]##$$##[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]@##@@None##$$##[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]@##@@get all possible combination of items from 2-dimensional list `a`##$$##list(itertools.product(*a))@##@@Get sum of values of columns  'Y1961', 'Y1962', 'Y1963' after group by on columns "Country" and "Item_code" in dataframe `df`.##$$##df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()@##@@create list `done` containing permutations of each element in list `[a, b, c, d]` with variable `x` as tuples##$$##done = [(el, x) for el in [a, b, c, d]]@##@@remove Nan values from array `x`##$$##x = x[numpy.logical_not(numpy.isnan(x))]@##@@remove first directory from path '/First/Second/Third/Fourth/Fifth'##$$##os.path.join(*x.split(os.path.sep)[2:])@##@@Replace `;` with `:` in a string `line`##$$##line = line.replace(';', ':')@##@@call bash command 'tar c my_dir | md5sum' with pipe##$$##subprocess.call('tar c my_dir | md5sum', shell=True)@##@@Convert a hex string `437c2123 ` according to ascii value.##$$##"""437c2123""".decode('hex')@##@@Get a list of all fields in class `User` that are marked `required`##$$##[k for k, v in User._fields.items() if v.required]@##@@remove column by index `[:, 0:2]` in dataframe `df`##$$##df = df.ix[:, 0:2]@##@@change a string of integers `x` separated by spaces to a list of int##$$##x = map(int, x.split())@##@@convert a string of integers `x` separated by spaces to a list of integers##$$##x = [int(i) for i in x.split()]@##@@find element by css selector "input[onclick*='1 Bedroom Deluxe']"##$$##driver.find_element_by_css_selector("input[onclick*='1 Bedroom Deluxe']")@##@@None##$$##re.sub('[^a-zA-Z0-9-_*.]', '', my_string)@##@@display a pdf  file that has been downloaded as `my_pdf.pdf`##$$##webbrowser.open('file:///my_pdf.pdf')@##@@replace backslashes in string `result` with empty string ''##$$##result = result.replace('\\', '')@##@@remove backslashes from string `result`##$$##result.replace('\\', '')@##@@replace value '-' in any column of pandas dataframe to "NaN"##$$##df.replace('-', 'NaN')@##@@convert datetime object to date object in python##$$##datetime.datetime.now().date()@##@@None##$$##datetime.datetime.now().date()@##@@get all sub-elements of an element `a` in an elementtree##$$##[elem.tag for elem in a.iter()]@##@@get all sub-elements of an element tree `a` excluding the root element##$$##[elem.tag for elem in a.iter() if elem is not a]@##@@None##$$##"""2.7.0_bf4fda703454""".split('_')@##@@move dictionaries in list `lst` to the end of the list if value of key 'language' in each dictionary is not equal to 'en'##$$##sorted(lst, key=lambda x: x['language'] != 'en')@##@@check if all values of a dictionary `your_dict` are zero `0`##$$##all(value == 0 for value in list(your_dict.values()))@##@@produce a pivot table as dataframe using column 'Y' in datafram `df` to form the axes of the resulting dataframe##$$##df.pivot_table('Y', rows='X', cols='X2')@##@@call `doSomething()` in a try-except without handling the exception##$$##try:
    doSomething()
except:
    pass@##@@call `doSomething()` in a try-except without handling the exception##$$##try:
    doSomething()
except Exception:
    pass@##@@get a sum of 4d array `M`##$$##M.sum(axis=0).sum(axis=0)@##@@Convert a datetime object `dt` to microtime##$$##time.mktime(dt.timetuple()) + dt.microsecond / 1000000.0@##@@select all rows in dataframe `df` where the values of column 'columnX' is bigger than or equal to `x` and smaller than or equal to `y`##$$##df[(x <= df['columnX']) & (df['columnX'] <= y)]@##@@sort a list of lists `L` by index 2 of the inner list##$$##sorted(L, key=itemgetter(2))@##@@sort a list of lists `l` by index 2 of the inner list##$$##l.sort(key=(lambda x: x[2]))@##@@sort list `l` by index 2 of the item##$$##sorted(l, key=(lambda x: x[2]))@##@@sort a list of lists `list_to_sort` by indices 2,0,1 of the inner list##$$##sorted_list = sorted(list_to_sort, key=itemgetter(2, 0, 1))@##@@find rows of 2d array in 3d numpy array 'arr' if the row has value '[[0, 3], [3, 0]]'##$$##np.argwhere(np.all(arr == [[0, 3], [3, 0]], axis=(1, 2)))@##@@From multiIndexed dataframe `data` select columns `a` and `c` within each higher order column `one` and `two`##$$##data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]@##@@select only specific columns 'a' and 'c' from a dataframe 'data' with multiindex columns##$$##data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]@##@@match a sharp, followed by letters (including accent characters) in string `str1` using a regex##$$##hashtags = re.findall('#(\\w+)', str1, re.UNICODE)@##@@Rename file from `src` to `dst`##$$##os.rename(src, dst)@##@@Get all texts and tags from a tag `strong` from etree tag `some_tag` using lxml##$$##print(etree.tostring(some_tag.find('strong')))@##@@Serialize dictionary `data` and its keys to a JSON formatted string##$$##json.dumps({str(k): v for k, v in data.items()})@##@@parse UTF-8 encoded HTML response `response` to BeautifulSoup object##$$##soup = BeautifulSoup(response.read().decode('utf-8'))@##@@delete file `filename`##$$##os.remove(filename)@##@@get the next value greatest to `2` from a list of numbers `num_list`##$$##min([x for x in num_list if x > 2])@##@@Replace each value in column 'prod_type' of dataframe `df` with string 'responsive'##$$##df['prod_type'] = 'responsive'@##@@sort list `lst` with positives coming before negatives with values sorted respectively##$$##sorted(lst, key=lambda x: (x < 0, x))@##@@get the date 6 months from today##$$##six_months = (date.today() + relativedelta(months=(+ 6)))@##@@get the date 1 month from today##$$##(date(2010, 12, 31) + relativedelta(months=(+ 1)))@##@@get the date 2 months from today##$$##(date(2010, 12, 31) + relativedelta(months=(+ 2)))@##@@calculate the date six months from the current date##$$##print((datetime.date.today() + datetime.timedelta(((6 * 365) / 12))).isoformat())@##@@get a list of keys of dictionary `things` sorted by the value of nested dictionary key 'weight'##$$##sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)@##@@get all the values from a numpy array `a` excluding index 3##$$##a[np.arange(len(a)) != 3]@##@@delete all elements from a list `x` if a function `fn` taking value as parameter returns `0`##$$##[x for x in lst if fn(x) != 0]@##@@set dataframe `df` index using column 'month'##$$##df.set_index('month')@##@@read lines from a csv file `./urls-eu.csv` into a list of lists `arr`##$$##arr = [line.split(',') for line in open('./urls-eu.csv')]@##@@list comprehension that produces integers between 11 and 19##$$##[i for i in range(100) if i > 10 if i < 20]@##@@Get only digits from a string `strs`##$$##"""""".join([c for c in strs if c.isdigit()])@##@@split a string `yas` based on tab '\t'##$$##re.split('\\t+', yas.rstrip('\t'))@##@@scalar multiply matrix `a` by `b`##$$##(a.T * b).T@##@@remove trailing newline in string "test string\n"##$$##'test string\n'.rstrip()@##@@remove trailing newline in string 'test string \n\n'##$$##'test string \n\n'.rstrip('\n')@##@@remove newline in string `s`##$$##s.strip()@##@@remove newline in string `s` on the right side##$$##s.rstrip()@##@@remove newline in string `s` on the left side##$$##s.lstrip()@##@@remove newline in string 'Mac EOL\r'##$$##'Mac EOL\r'.rstrip('\r\n')@##@@remove newline in string 'Windows EOL\r\n' on the right side##$$##'Windows EOL\r\n'.rstrip('\r\n')@##@@remove newline in string 'Unix EOL\n' on the right side##$$##'Unix EOL\n'.rstrip('\r\n')@##@@remove newline in string "Hello\n\n\n" on the right side##$$##'Hello\n\n\n'.rstrip('\n')@##@@split string `text` into chunks of 16 characters each##$$##re.findall('.{,16}\\b', text)@##@@Get a list comprehension in list of lists `X`##$$##[[X[i][j] for j in range(len(X[i]))] for i in range(len(X))]@##@@convert unicode string '\xd0\xbc\xd0\xb0\xd1\x80\xd0\xba\xd0\xb0' to byte string##$$##'\xd0\xbc\xd0\xb0\xd1\x80\xd0\xba\xd0\xb0'.encode('latin-1')@##@@split dataframe `df` where the value of column `a` is equal to 'B'##$$##df.groupby((df.a == 'B').shift(1).fillna(0).cumsum())@##@@save json output from a url ‘http://search.twitter.com/search.json?q=hi’ to file ‘hi.json’ in Python 2##$$##urllib.request.urlretrieve('http://search.twitter.com/search.json?q=hi', 'hi.json')@##@@Find indices of elements equal to zero from numpy array `x`##$$##numpy.where((x == 0))[0]@##@@flush output of python print##$$##sys.stdout.flush()@##@@convert `i` to string##$$##str(i)@##@@convert `a` to string##$$##a.__str__()@##@@convert `a` to string##$$##str(a)@##@@sort list of lists `L` by the second item in each list##$$##L.sort(key=operator.itemgetter(1))@##@@Print variable `count` and variable `conv` with space string '    ' in between##$$##print(str(count) + '    ' + str(conv))@##@@change NaN values in dataframe `df` using preceding values in the frame##$$##df.fillna(method='ffill', inplace=True)@##@@change the state of the Tkinter `Text` widget to read only i.e. `disabled`##$$##text.config(state=DISABLED)@##@@python sum of ascii values of all characters in a string `string`##$$##sum(map(ord, string))@##@@apply itertools.product to elements of a list of lists `arrays`##$$##list(itertools.product(*arrays))@##@@print number `value` as thousands separators##$$##'{:,}'.format(value)@##@@print number 1255000 as thousands separators##$$##locale.setlocale(locale.LC_ALL, 'en_US')
locale.format('%d', 1255000, grouping=True)@##@@get rows of dataframe `df` where column `Col1` has values `['men', 'rocks', 'mountains']`##$$##df[df.Col1.isin(['men', 'rocks', 'mountains'])]@##@@get the value at index 1 for each tuple in the list of tuples `L`##$$##[x[1] for x in L]@##@@split unicode string "раз два три" into words##$$##'\u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438'.split()@##@@sort query set by number of characters in a field `length` in django model `MyModel`##$$##MyModel.objects.extra(select={'length': 'Length(name)'}).order_by('length')@##@@get a dictionary in list `dicts` which key 'ratio' is closer to a global value 1.77672955975##$$##min(dicts, key=lambda x: (abs(1.77672955975 - x['ratio']), -x['pixels']))@##@@get the non-masked values of array `m`##$$##m[~m.mask]@##@@Find all words containing letters between A and Z in string `formula`##$$##re.findall('\\b[A-Z]', formula)@##@@create a list `matrix` containing 5 lists, each of 5 items  all set to 0##$$##matrix = [([0] * 5) for i in range(5)]@##@@creating a numpy array of 3d coordinates from three 1d arrays `x_p`, `y_p` and `z_p`##$$##np.vstack(np.meshgrid(x_p, y_p, z_p)).reshape(3, -1).T@##@@find the minimum value in a numpy array `arr` excluding 0##$$##arr[arr != 0].min()@##@@get the text of multiple elements found by xpath "//*[@type='submit']/@value"##$$##browser.find_elements_by_xpath("//*[@type='submit']/@value").text@##@@find all the values in attribute `value` for the tags whose `type` attribute is `submit` in selenium##$$##browser.find_elements_by_xpath("//*[@type='submit']").get_attribute('value')@##@@parse a YAML file "example.yaml"##$$##with open('example.yaml', 'r') as stream:
    try:
        print((yaml.load(stream)))
    except yaml.YAMLError as exc:
        print(exc)@##@@parse a YAML file "example.yaml"##$$##with open('example.yaml') as stream:
    try:
        print((yaml.load(stream)))
    except yaml.YAMLError as exc:
        print(exc)@##@@Sort the values of the dataframe `df` and align the columns accordingly based on the obtained indices after np.argsort.##$$##pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))@##@@Getting today's date in YYYY-MM-DD##$$##datetime.datetime.today().strftime('%Y-%m-%d')@##@@urlencode a querystring 'string_of_characters_like_these:$#@=?%^Q^$' in python 2##$$##urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')@##@@sort a dictionary `d` by length of its values and print as string##$$##print(' '.join(sorted(d, key=lambda k: len(d[k]), reverse=True)))@##@@convert tuple elements in list `[(1,2),(3,4),(5,6),]` into lists##$$##map(list, zip(*[(1, 2), (3, 4), (5, 6)]))@##@@None##$$##map(list, zip(*[(1, 2), (3, 4), (5, 6)]))@##@@None##$$##zip(*[(1, 2), (3, 4), (5, 6)])@##@@create a list of tuples which contains number 9 and the number before it, for each occurrence of 9 in the list 'myList'##$$##[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]@##@@navigate to webpage given by url `http://www.python.org` using Selenium##$$##driver.get('http://www.google.com.br')@##@@reverse a UTF-8 string 'a'##$$##b = a.decode('utf8')[::-1].encode('utf8')@##@@extract date from a string 'monkey 2010-07-32 love banana'##$$##dparser.parse('monkey 2010-07-32 love banana', fuzzy=True)@##@@extract date from a string 'monkey 20/01/1980 love banana'##$$##dparser.parse('monkey 20/01/1980 love banana', fuzzy=True)@##@@extract date from a string `monkey 10/01/1980 love banana`##$$##dparser.parse('monkey 10/01/1980 love banana', fuzzy=True)@##@@Convert a list `['A:1', 'B:2', 'C:3', 'D:4']` to dictionary##$$##dict(map(lambda s: s.split(':'), ['A:1', 'B:2', 'C:3', 'D:4']))@##@@check if string `the_string` contains any upper or lower-case ASCII letters##$$##re.search('[a-zA-Z]', the_string)@##@@convert a pandas `df1` groupby object to dataframe##$$##DataFrame({'count': df1.groupby(['Name', 'City']).size()}).reset_index()@##@@remove all non-numeric characters from string `sdkjh987978asd098as0980a98sd `##$$##re.sub('[^0-9]', '', 'sdkjh987978asd098as0980a98sd')@##@@get items from list `a` that don't appear in list `b`##$$##[y for y in a if y not in b]@##@@extract the first four rows of the column `ID` from a pandas dataframe `df`##$$##df.groupby('ID').head(4)@##@@Unzip a list of tuples `l` into a list of lists##$$##zip(*l)@##@@combine two lists `[1, 2, 3, 4]` and `['a', 'b', 'c', 'd']` into a dictionary##$$##dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))@##@@combine two lists `[1, 2, 3, 4]` and `['a', 'b', 'c', 'd']` into a dictionary##$$##dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))@##@@retrieve the path from a Flask request##$$##request.url@##@@replace carriage return in string `somestring` with empty string ''##$$##somestring.replace('\\r', '')@##@@serialize dictionary `d` as a JSON formatted string with each key formatted to pattern '%d,%d'##$$##simplejson.dumps(dict([('%d,%d' % k, v) for k, v in list(d.items())]))@##@@parse string "Jun 1 2005  1:33PM" into datetime by format "%b %d %Y %I:%M%p"##$$##datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')@##@@parse string "Aug 28 1999 12:00AM" into datetime##$$##parser.parse('Aug 28 1999 12:00AM')@##@@Get absolute folder path and filename for file `existGDBPath `##$$##os.path.split(os.path.abspath(existGDBPath))@##@@extract folder path from file path##$$##os.path.dirname(os.path.abspath(existGDBPath))@##@@Execute a post request to url `http://httpbin.org/post` with json data `{'test': 'cheers'}`##$$##requests.post('http://httpbin.org/post', json={'test': 'cheers'})@##@@remove dictionary from list `a` if the value associated with its key 'link' is in list `b`##$$##a = [x for x in a if x['link'] not in b]@##@@get a request parameter `a` in jinja2##$$##{{request.args.get('a')}}@##@@create a list of integers between 2 values `11` and `17`##$$##list(range(11, 17))@##@@Change data type of data in column 'grade' of dataframe `data_df` into float and then to int##$$##data_df['grade'] = data_df['grade'].astype(float).astype(int)@##@@Find the list in a list of lists `alkaline_earth_values` with the max value of the second element.##$$##max(alkaline_earth_values, key=lambda x: x[1])@##@@remove leading and trailing zeros in the string 'your_Strip'##$$##your_string.strip('0')@##@@generate a list of all unique pairs of integers in `range(9)`##$$##list(permutations(list(range(9)), 2))@##@@create a regular expression that matches the pattern '^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)' over multiple lines of text##$$##re.compile('^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)', re.MULTILINE)@##@@regular expression "^(.+)\\n((?:\\n.+)+)" matching a multiline block of text##$$##re.compile('^(.+)\\n((?:\\n.+)+)', re.MULTILINE)@##@@Run 'test2.py' file with python location 'path/to/python' and arguments 'neededArgumetGoHere' as a subprocess##$$##call(['path/to/python', 'test2.py', 'neededArgumetGoHere'])@##@@sort a multidimensional list `a` by second and third column##$$##a.sort(key=operator.itemgetter(2, 3))@##@@Add a tuple with value `another_choice` to a tuple `my_choices`##$$##final_choices = ((another_choice,) + my_choices)@##@@Add a tuple with value `another_choice` to a tuple `my_choices`##$$##final_choices = ((another_choice,) + my_choices)@##@@find the current directory##$$##os.getcwd()@##@@find the current directory##$$##os.path.realpath(__file__)@##@@get the directory name of `path`##$$##os.path.dirname(path)@##@@get the canonical path of file `path`##$$##os.path.realpath(path)@##@@Find name of current directory##$$##dir_path = os.path.dirname(os.path.realpath(__file__))@##@@Find current directory##$$##cwd = os.getcwd()@##@@Find the full path of current directory##$$##full_path = os.path.realpath(__file__)@##@@sort array `arr` in ascending order by values of the 3rd column##$$##arr[arr[:, (2)].argsort()]@##@@sort rows of numpy matrix `arr` in ascending order according to all column values##$$##numpy.sort(arr, axis=0)@##@@split string 'a b.c' on space " " and dot character "."##$$##re.split('[ .]', 'a b.c')@##@@copy the content of file 'file.txt' to file 'file2.txt'##$$##shutil.copy('file.txt', 'file2.txt')@##@@generate random upper-case ascii string of 12 characters length##$$##print(''.join(choice(ascii_uppercase) for i in range(12)))@##@@merge the elements in a list `lst` sequentially##$$##[''.join(seq) for seq in zip(lst, lst[1:])]@##@@rename column 'gdp' in dataframe `data` to 'log(gdp)'##$$##data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)@##@@convert a beautiful soup html `soup` to text##$$##print(soup.get_text())@##@@Sort list `li` in descending order based on the second element of each list inside list`li`##$$##sorted(li, key=operator.itemgetter(1), reverse=True)@##@@replace value 0 with 'Female' and value 1 with 'Male' in column 'sex' of dataframe `data`##$$##data['sex'].replace([0, 1], ['Female', 'Male'], inplace=True)@##@@split string 'Words, words, words.' on punctuation##$$##re.split('\\W+', 'Words, words, words.')@##@@Extract first two substrings in string `phrase` that end in `.`, `?` or `!`##$$##re.match('(.*?[.?!](?:\\s+.*?[.?!]){0,1})', phrase).group(1)@##@@split string `s` into strings of repeating elements##$$##print([a for a, b in re.findall('((\\w)\\2*)', s)])@##@@Create new string with unique characters from `s` seperated by ' '##$$##print(' '.join(OrderedDict.fromkeys(s)))@##@@create a set from string `s` to remove duplicate characters##$$##print(' '.join(set(s)))@##@@list folders in zip file 'file' that ends with '/'##$$##[x for x in file.namelist() if x.endswith('/')]@##@@find the count of a word 'Hello' in a string `input_string`##$$##input_string.count('Hello')@##@@reduce the first element of list of strings `data` to a string, separated by '.'##$$##print('.'.join([item[0] for item in data]))@##@@Move the cursor of file pointer `fh1` at the end of the file.##$$##fh1.seek(2)@##@@convert a flat list into a list of tuples of every two items in the list, in order##$$##print(zip(my_list[0::2], my_list[1::2]))@##@@group a list of ints into a list of tuples of each 2 elements##$$##my_new_list = zip(my_list[0::2], my_list[1::2])@##@@set the default encoding to 'utf-8'##$$##sys.setdefaultencoding('utf8')@##@@Formate current date and time to a string using pattern '%Y-%m-%d %H:%M:%S'##$$##datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')@##@@retrieve arabic texts from string `my_string`##$$##print(re.findall('[\\u0600-\\u06FF]+', my_string))@##@@group dataframe `df` based on minute interval##$$##df.groupby(df.index.map(lambda t: t.minute))@##@@access value associated with key 'American' of key 'Apple' from dictionary `dict`##$$##dict['Apple']['American']@##@@remove all null values from columns 'three', 'four' and 'five' of dataframe `df2`##$$##df2.dropna(subset=['three', 'four', 'five'], how='all')@##@@insert a list `k` at the front of list `a`##$$##a.insert(0, k)@##@@insert elements of list `k` into list `a` at position `n`##$$##a = a[:n] + k + a[n:]@##@@calculate the mean of the nonzero values' indices of dataframe `df`##$$##np.flatnonzero(x).mean()@##@@get date from dataframe `df` column 'dates' to column 'just_date'##$$##df['just_date'] = df['dates'].dt.date@##@@remove elements in list `b` from list `a`##$$##[x for x in a if x not in b]@##@@join elements of each tuple in list `a` into one string##$$##[''.join(x) for x in a]@##@@join items of each tuple in list of tuples `a` into a list of strings##$$##list(map(''.join, a))@##@@match blank lines in `s` with regular expressions##$$##re.split('\n\\s*\n', s)@##@@merge a list of integers `[1, 2, 3, 4, 5]` into a single integer##$$##from functools import reduce
reduce(lambda x, y: 10 * x + y, [1, 2, 3, 4, 5])@##@@Convert float 24322.34 to comma-separated string##$$##"""{0:,.2f}""".format(24322.34)@##@@pass dictionary items `data` as keyword arguments in function `my_function`##$$##my_function(**data)@##@@get line count of file 'myfile.txt'##$$##sum((1 for line in open('myfile.txt')))@##@@get line count of file `filename`##$$##def bufcount(filename):
    f = open(filename)
    lines = 0
    buf_size = (1024 * 1024)
    read_f = f.read
    buf = read_f(buf_size)
    while buf:
        lines += buf.count('\n')
        buf = read_f(buf_size)
    return lines@##@@round 1123.456789 to be an integer##$$##print(round(1123.456789, -1))@##@@sort list `X` based on values from another list `Y`##$$##[x for y, x in sorted(zip(Y, X))]@##@@sorting list 'X' based on values from another list 'Y'##$$##[x for y, x in sorted(zip(Y, X))]@##@@get equivalent week number from a date `2010/6/16` using  isocalendar##$$##datetime.date(2010, 6, 16).isocalendar()[1]@##@@select multiple ranges of columns 1-10, 15, 17, and 50-100 in pandas dataframe `df`##$$##df.iloc[:, (np.r_[1:10, (15), (17), 50:100])]@##@@apply two different aggregating functions `mean` and `sum` to the same column `dummy` in pandas data frame `df`##$$##df.groupby('dummy').agg({'returns': [np.mean, np.sum]})@##@@convert string `s` to lowercase##$$##s.lower()@##@@convert utf-8 string `s` to lowercase##$$##s.decode('utf-8').lower()@##@@None##$$##ftp.retrbinary('RETR %s' % filename, file.write)@##@@handle the `urlfetch_errors ` exception for imaplib request to url `url`##$$##urlfetch.fetch(url, deadline=10 * 60)@##@@output first 100 characters in a string `my_string`##$$##print(my_string[0:100])@##@@make matplotlib plot legend put marker in legend only once##$$##legend(numpoints=1)@##@@get set intersection between dictionaries `d1` and `d2`##$$##dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())@##@@convert csv file 'test.csv' into two-dimensional matrix##$$##numpy.loadtxt(open('test.csv', 'rb'), delimiter=',', skiprows=1)@##@@filter the objects in django model 'Sample' between date range `2011-01-01` and `2011-01-31`##$$##Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])@##@@filter objects month wise in django model `Sample` for year `2011`##$$##Sample.objects.filter(date__year='2011', date__month='01')@##@@create a dictionary `{'spam': 5, 'ham': 6}` into another dictionary `d` field 'dict3'##$$##d['dict3'] = {'spam': 5, 'ham': 6}@##@@apply `numpy.linalg.norm` to each row of a matrix `a`##$$##numpy.apply_along_axis(numpy.linalg.norm, 1, a)@##@@merge dictionaries form array `dicts` in a single expression##$$##dict((k, v) for d in dicts for k, v in list(d.items()))@##@@Convert escaped utf string to utf string in `your string`##$$##print('your string'.decode('string_escape'))@##@@counting the number of true booleans in a python list `[True, True, False, False, False, True]`##$$##sum([True, True, False, False, False, True])@##@@set the size of figure `fig` in inches to width height of `w`, `h`##$$##fig.set_size_inches(w, h, forward=True)@##@@format string with dict `{'5': 'you'}` with integer keys##$$##'hello there %(5)s' % {'5': 'you'}@##@@Convert a string of numbers `example_string` separated by `,` into a list of integers##$$##map(int, example_string.split(','))@##@@Convert a string of numbers 'example_string' separated by comma into a list of numbers##$$##[int(s) for s in example_string.split(',')]@##@@Flatten list `x`##$$##x = [i[0] for i in x]@##@@convert list `x` into a flat list##$$##y = map(operator.itemgetter(0), x)@##@@get a list `y` of the first element of every tuple in list `x`##$$##y = [i[0] for i in x]@##@@extract all the values of a specific key named 'values' from a list of dictionaries##$$##results = [item['value'] for item in test_data]@##@@get current datetime in ISO format##$$##datetime.datetime.now().isoformat()@##@@get UTC datetime in ISO format##$$##datetime.datetime.utcnow().isoformat()@##@@Merge all columns in dataframe `df` into one column##$$##df.apply(' '.join, axis=0)@##@@pandas subtract a row from dataframe `df2` from dataframe `df`##$$##pd.DataFrame(df.values - df2.values, columns=df.columns)@##@@read file 'myfile.txt' using universal newline mode 'U'##$$##print(open('myfile.txt', 'U').read())@##@@print line `line` from text file with 'utf-16-le' format##$$##print(line.decode('utf-16-le').split())@##@@open a text file `data.txt` in io module with encoding `utf-16-le`##$$##file = io.open('data.txt', 'r', encoding='utf-16-le')@##@@Join data of dataframe `df1` with data in dataframe `df2` based on similar values of column 'user_id' in both dataframes##$$##s1 = pd.merge(df1, df2, how='inner', on=['user_id'])@##@@check if string `foo` is UTF-8 encoded##$$##foo.decode('utf8').encode('utf8')@##@@get the dimensions of numpy array `a`##$$##a.shape@##@@get the dimensions of numpy array `a`##$$##N.shape(a)@##@@get the dimensions of array `a`##$$##N.shape(a)@##@@get the dimensions of numpy array `a`##$$##a.shape@##@@get the indices of tuples in list of tuples `L` where the first value is 53##$$##[i for i, v in enumerate(L) if v[0] == 53]@##@@convert string of bytes `y\xcc\xa6\xbb` into an int##$$##struct.unpack('<L', 'y\xcc\xa6\xbb')[0]@##@@get the first row, second column; second row, first column, and first row third column values of numpy array `arr`##$$##arr[[0, 1, 1], [1, 0, 2]]@##@@create a list with permutations of string 'abcd'##$$##list(powerset('abcd'))@##@@Convert string to boolean from defined set of strings##$$##s in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']@##@@replace special characters in url 'http://spam.com/go/' using the '%xx' escape##$$##urllib.parse.quote('http://spam.com/go/')@##@@Save plot `plt` as svg file 'test.svg'##$$##plt.savefig('test.svg')@##@@count the number of elements in array `myArray`##$$##len(myArray)@##@@insert directory './path/to/your/modules/' to current directory##$$##sys.path.insert(0, './path/to/your/modules/')@##@@None##$$##ax.xaxis.set_ticks_position('top')@##@@Insert records in bulk from "table1" of "master" DB to "table1" of  sqlite3 `cursor` object##$$##cursor.execute('INSERT OR REPLACE INTO master.table1 SELECT * FROM table1')@##@@Match regex '[a-zA-Z][\\w-]*\\Z' on string 'A\n'##$$##re.match('[a-zA-Z][\\w-]*\\Z', 'A\n')@##@@match regex '[a-zA-Z][\\w-]*$' on string '!A_B'##$$##re.match('[a-zA-Z][\\w-]*$', '!A_B')@##@@Convert hex string "deadbeef" to integer##$$##int('deadbeef', 16)@##@@Convert hex string "a" to integer##$$##int('a', 16)@##@@Convert hex string "0xa" to integer##$$##int('0xa', 16)@##@@Convert hex string `s` to integer##$$##int(s, 16)@##@@Convert hex string `hexString` to int##$$##int(hexString, 16)@##@@print variable `value ` without spaces##$$##print('Value is "' + str(value) + '"')@##@@Print a string `value` with string formatting##$$##print('Value is "{}"'.format(value))@##@@Jinja join elements of array `tags` with space string ' '##$$##{{tags | join(' ')}}@##@@get a list of locally installed Python modules##$$##help('modules')@##@@Get only first element in each of the innermost of the multidimensional list `listD`##$$##[[[x[0]] for x in listD[i]] for i in range(len(listD))]@##@@Sort a string `s` in lexicographic order##$$##sorted(s, key=str.upper)@##@@sort string `s` in lexicographic order##$$##sorted(sorted(s), key=str.upper)@##@@get a sorted list of the characters of string `s` in lexicographic order, with lowercase letters first##$$##sorted(s, key=str.lower)@##@@find all the rows in Dataframe 'df2' that are also present in Dataframe 'df1', for the columns 'A', 'B', 'C' and 'D'.##$$##pd.merge(df1, df2, on=['A', 'B', 'C', 'D'], how='inner')@##@@Reverse key-value pairs in a dictionary `map`##$$##dict((v, k) for k, v in map.items())@##@@decode unicode string `s` into a readable unicode literal##$$##s.decode('unicode_escape')@##@@convert list of strings `str_list` into list of integers##$$##[int(i) for i in str_list]@##@@convert a list with string `['1', '2', '3']` into list with integers##$$##map(int, ['1', '2', '3'])@##@@convert list with str into list with int##$$##list(map(int, ['1', '2', '3']))@##@@find all anchor tags in html `soup` whose url begins with `http://www.iwashere.com`##$$##soup.find_all('a', href=re.compile('http://www\\.iwashere\\.com/'))@##@@find all anchors with a hyperlink that matches the pattern '^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'##$$##soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))@##@@execute a jar file 'Blender.jar' using subprocess##$$##subprocess.call(['java', '-jar', 'Blender.jar'])@##@@insert row into mysql database with column 'column1' set to the value `value`##$$##cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', (value,))@##@@remove a substring ".com" from the end of string `url`##$$##if url.endswith('.com'):
    url = url[:(-4)]@##@@remove a substring ".com" from the end of string `url`##$$##url = re.sub('\\.com$', '', url)@##@@remove a substring ".com" from the end of string `url`##$$##print(url.replace('.com', ''))@##@@remove a substring `suffix` from the end of string `text`##$$##if (not text.endswith(suffix)):
    return text
return text[:(len(text) - len(suffix))]@##@@print each first value from a list of tuples `mytuple` with string formatting##$$##print(', ,'.join([str(i[0]) for i in mytuple]))@##@@clamping floating number `my_value` to be between `min_value` and `max_value`##$$##max(min(my_value, max_value), min_value)@##@@split a unicode string `text` into a list of words and punctuation characters with a regex##$$##re.findall('\\w+|[^\\w\\s]', text, re.UNICODE)@##@@execute raw sql queue '<sql here>' in database `db` in sqlalchemy-flask app##$$##result = db.engine.execute('<sql here>')@##@@quit program##$$##sys.exit(0)@##@@get digits in string `my_string`##$$##"""""".join(c for c in my_string if c.isdigit())@##@@split string `str1` on one or more spaces with a regular expression##$$##re.split(' +', str1)@##@@None##$$##re.findall('\\S+', str1)@##@@Evaluate a nested dictionary `myobject.id.number` to get `number` if `myobject` is present with getattr##$$##getattr(getattr(myobject, 'id', None), 'number', None)@##@@convert generator object to a dictionary##$$##{i: (i * 2) for i in range(10)}@##@@convert generator object to a dictionary##$$##dict((i, i * 2) for i in range(10))@##@@Matplotlib clear the current axes.##$$##plt.cla()@##@@split string `s` into float values and write sum to `total`##$$##total = sum(float(item) for item in s.split(','))@##@@Convert ascii value 'P' to binary##$$##bin(ord('P'))@##@@print a string after a specific substring ', ' in string `my_string `##$$##print(my_string.split(', ', 1)[1])@##@@get value of key `post code` associated with first index of key `places` of dictionary `data`##$$##print(data['places'][0]['post code'])@##@@remove colon character surrounded by vowels letters in string `word`##$$##word = re.sub('([aeiou]):(([aeiou][^aeiou]*){3})$', '\\1\\2', word)@##@@extract data field 'bar' from json object##$$##json.loads('{"foo": 42, "bar": "baz"}')['bar']@##@@Convert JSON array `array` to Python object##$$##data = json.loads(array)@##@@Convert JSON array `array` to Python object##$$##data = json.loads(array)@##@@pars a string 'http://example.org/#comments' to extract hashtags into an array##$$##re.findall('#(\\w+)', 'http://example.org/#comments')@##@@do a boolean check if a string `lestring` contains any of the items in list `lelist`##$$##any(e in lestring for e in lelist)@##@@None##$$##df.plot(x='col_name_1', y='col_name_2', style='o')@##@@Parsing HTML string `html` using BeautifulSoup##$$##parsed_html = BeautifulSoup(html)
print(parsed_html.body.find('div', attrs={'class': 'container', }).text)@##@@Parsing webpage 'http://www.google.com/' using BeautifulSoup##$$##page = urllib.request.urlopen('http://www.google.com/')
soup = BeautifulSoup(page)@##@@change figure size to 3 by 4 in matplotlib##$$##plt.figure(figsize=(3, 4))@##@@Strip punctuation from string `s`##$$##s.translate(None, string.punctuation)@##@@django urlsafe base64 decode string `uenc` with decryption##$$##base64.urlsafe_b64decode(uenc.encode('ascii'))@##@@get the number of all keys in the nested dictionary `dict_list`##$$##len(dict_test) + sum(len(v) for v in dict_test.values())@##@@return the conversion of decimal `d` to hex without the '0x' prefix##$$##hex(d).split('x')[1]@##@@create a list containing digits of number 123 as its elements##$$##list(str(123))@##@@converting integer `num` to list##$$##[int(x) for x in str(num)]@##@@select a first form with no name in mechanize##$$##br.select_form(nr=0)@##@@Open file 'sample.json' in read mode with encoding of 'utf-8-sig'##$$##json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))@##@@load json file 'sample.json' with utf-8 bom header##$$##json.loads(open('sample.json').read().decode('utf-8-sig'))@##@@setup a smtp mail server to `smtp.gmail.com` with port `587`##$$##server = smtplib.SMTP('smtp.gmail.com', 587)@##@@revers correlating bits of integer `n`##$$##int('{:08b}'.format(n)[::-1], 2)@##@@add column `d` to index of dataframe `df`##$$##df.set_index(['d'], append=True)@##@@Iterating over a dictionary `d` using for loops##$$##for (key, value) in d.items():
    pass@##@@Iterating over a dictionary `d` using for loops##$$##for (key, value) in list(d.items()):
    pass@##@@Iterating key and items over dictionary `d`##$$##for (letter, number) in list(d.items()):
    pass@##@@Iterating key and items over dictionary `d`##$$##for (k, v) in list(d.items()):
    pass@##@@get keys and items of dictionary `d`##$$##list(d.items())@##@@get keys and items of dictionary `d` as a list##$$##list(d.items())@##@@Iterating key and items over dictionary `d`##$$##for (k, v) in list(d.items()):
    pass@##@@Iterating key and items over dictionary `d`##$$##for (letter, number) in list(d.items()):
    pass@##@@Iterating key and items over dictionary `d`##$$##for (letter, number) in list(d.items()):
    pass@##@@query all data from table `Task` where the value of column `time_spent` is bigger than 3 hours##$$##session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()@##@@compile Visual Studio project `project.sln` from the command line through python##$$##os.system('msbuild project.sln /p:Configuration=Debug')@##@@get max key in dictionary `MyCount`##$$##max(list(MyCount.keys()), key=int)@##@@execute command 'source .bashrc; shopt -s expand_aliases; nuke -x scriptPath' from python script##$$##os.system('source .bashrc; shopt -s expand_aliases; nuke -x scriptPath')@##@@get a name of function `my_function` as a string##$$##my_function.__name__@##@@None##$$##my_function.__name__@##@@check if all values in the columns of a numpy matrix `a` are same##$$##np.all(a == a[(0), :], axis=0)@##@@sort list `a` in ascending order based on the addition of the second and third elements of each tuple in it##$$##sorted(a, key=lambda x: (sum(x[1:3]), x[0]))@##@@sort a list of tuples `a` by the sum of second and third element of each tuple##$$##sorted(a, key=lambda x: (sum(x[1:3]), x[0]), reverse=True)@##@@sorting a list of tuples `lst` by the sum of the second elements onwards, and third element of the tuple##$$##sorted(lst, key=lambda x: (sum(x[1:]), x[0]))@##@@sort the list of tuples `lst` by the sum of every value except the first and by the first value in reverse order##$$##sorted(lst, key=lambda x: (sum(x[1:]), x[0]), reverse=True)@##@@add header 'WWWAuthenticate' in a flask app with value 'Basic realm="test"'##$$##response.headers['WWW-Authenticate'] = 'Basic realm="test"'@##@@clear session key 'mykey'##$$##del request.session['mykey']@##@@convert date string '24052010' to date object in format '%d%m%Y'##$$##datetime.datetime.strptime('24052010', '%d%m%Y').date()@##@@Replace non-ASCII characters in string `text` with a single space##$$##re.sub('[^\\x00-\\x7F]+', ' ', text)@##@@None##$$##numpy.array([[1, 2], [3, 4]])@##@@Get a list `myList` from 1 to 10##$$##myList = [i for i in range(10)]@##@@use regex pattern '((.+?)\\2+)' to split string '44442(2)2(2)44'##$$##[m[0] for m in re.compile('((.+?)\\2+)').findall('44442(2)2(2)44')]@##@@use regular expression '((\\d)(?:[()]*\\2*[()]*)*)' to split string `s`##$$##[i[0] for i in re.findall('((\\d)(?:[()]*\\2*[()]*)*)', s)]@##@@remove the space between subplots in matplotlib.pyplot##$$##fig.subplots_adjust(wspace=0, hspace=0)@##@@Reverse list `x`##$$##x[::-1]@##@@None##$$##json.dumps({'apple': 'cat', 'banana': 'dog', 'pear': 'fish'})@##@@write a list of strings `row` to csv object `csvwriter`##$$##csvwriter.writerow(row)@##@@Jinja2 formate date `item.date` accorto pattern 'Y M d'##$$##{{(item.date | date): 'Y M d'}}@##@@Split a string `text` with comma, question mark or exclamation by non-consuming regex using look-behind##$$##re.split('(?<=[\\.\\?!]) ', text)@##@@create a regular expression object with the pattern '\xe2\x80\x93'##$$##re.compile('\xe2\x80\x93')@##@@declare an array `variable`##$$##variable = []@##@@declare an array with element 'i'##$$##intarray = array('i')@##@@given list `to_reverse`, reverse the all sublists and the list itself##$$##[sublist[::-1] for sublist in to_reverse[::-1]]@##@@None##$$##re.sub('[^0-9a-zA-Z]+', '*', 'h^&ell`.,|o w]{+orld')@##@@unescape special characters without splitting data in array of strings `['I ', u'<', '3s U ', u'&', ' you luvz me']`##$$##"""""".join(['I ', '<', '3s U ', '&', ' you luvz me'])@##@@disable logging while running unit tests in python django##$$##logging.disable(logging.CRITICAL)@##@@adding url `url` to mysql row##$$##cursor.execute('INSERT INTO index(url) VALUES(%s)', (url,))@##@@convert column of date objects 'DateObj' in pandas dataframe `df` to strings in new column 'DateStr'##$$##df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')@##@@split string `s` by '@' and get the first element##$$##s.split('@')[0]@##@@drop rows of dataframe `df` whose index is smaller than the value of `start_remove` or bigger than the value of`end_remove`##$$##df.query('index < @start_remove or index > @end_remove')@##@@Drop the rows in pandas timeseries `df` from the row containing index `start_remove` to the row containing index `end_remove`##$$##df.loc[(df.index < start_remove) | (df.index > end_remove)]@##@@Get the number of NaN values in each column of dataframe `df`##$$##df.isnull().sum()@##@@reset index of dataframe `df`so that existing index values are transferred into `df`as columns##$$##df.reset_index(inplace=True)@##@@generate a list containing values associated with the key 'value' of each dictionary inside list `list_of_dicts`##$$##[x['value'] for x in list_of_dicts]@##@@None##$$##[d['value'] for d in l]@##@@None##$$##[d['value'] for d in l if 'value' in d]@##@@convert numpy array into python list structure##$$##np.array([[1, 2, 3], [4, 5, 6]]).tolist()@##@@converting string '(1,2,3,4)' to a tuple##$$##ast.literal_eval('(1,2,3,4)')@##@@keep a list `dataList` of lists sorted as it is created by second element##$$##dataList.sort(key=lambda x: x[1])@##@@remove duplicated items from list of lists `testdata`##$$##list(map(list, set(map(lambda i: tuple(i), testdata))))@##@@uniqueness for list of lists `testdata`##$$##[list(i) for i in set(tuple(i) for i in testdata)]@##@@in django, check if a user is in a group 'Member'##$$##return user.groups.filter(name='Member').exists()@##@@check if a user `user` is in a group from list of groups `['group1', 'group2']`##$$##return user.groups.filter(name__in=['group1', 'group2']).exists()@##@@Change log level dynamically to 'DEBUG' without restarting the application##$$##logging.getLogger().setLevel(logging.DEBUG)@##@@Concat each values in a tuple `(34.2424, -64.2344, 76.3534, 45.2344)` to get a string##$$##"""""".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))@##@@swap each pair of characters in string `s`##$$##"""""".join([s[x:x + 2][::-1] for x in range(0, len(s), 2)])@##@@save current figure to file 'graph.png' with resolution of 1000 dpi##$$##plt.savefig('graph.png', dpi=1000)@##@@delete items from list `my_list` if the item exist in list `to_dell`##$$##my_list = [[x for x in sublist if x not in to_del] for sublist in my_list]@##@@find all the elements that consists value '1' in a list of tuples 'a'##$$##[item for item in a if 1 in item]@##@@find all elements in a list of tuples `a` where the first element of each tuple equals 1##$$##[item for item in a if item[0] == 1]@##@@Get the index value in list `p_list` using enumerate in list comprehension##$$##{p.id: {'id': p.id, 'position': ind} for ind, p in enumerate(p_list)}@##@@None##$$##[dict(y) for y in set(tuple(x.items()) for x in d)]@##@@load a file `file.py` into the python console##$$##exec(compile(open('file.py').read(), 'file.py', 'exec'))@##@@SQLAlchemy count the number of rows in table `Congress`##$$##rows = session.query(Congress).count()@##@@None##$$##subprocess.call(['test.sh', str(domid)])@##@@read excel file `file_name` using pandas##$$##dfs = pd.read_excel(file_name, sheetname=None)@##@@unpack the binary data represented by the hexadecimal string '4081637ef7d0424a' to a float##$$##struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))@##@@Get index of numpy array `a` with another numpy array `b`##$$##a[tuple(b)]@##@@find all possible sequences of elements in a list `[2, 3, 4]`##$$##map(list, permutations([2, 3, 4]))@##@@sort a list `unsorted_list` based on another sorted list `presorted_list`##$$##sorted(unsorted_list, key=presorted_list.index)@##@@None##$$##datetime.datetime.now() - datetime.timedelta(days=1)@##@@create a dataframe `d` filled with zeros with indices from 0 to length of `data` and column names from `feature_list`##$$##d = pd.DataFrame(0, index=np.arange(len(data)), columns=feature_list)@##@@find the index of sub string 'World' in `x`##$$##x.find('World')@##@@find the index of sub string 'Aloha' in `x`##$$##x.find('Aloha')@##@@find the index of sub string 'cc' in string 'sdfasdf'##$$##'sdfasdf'.index('cc')@##@@find the index of sub string 'df' in string 'sdfasdf'##$$##'sdfasdf'.index('df')@##@@find the index of sub string 'a' in string `str`##$$##str.find('a')@##@@find the index of sub string 'g' in string `str`##$$##str.find('g')@##@@find the index of sub string 's' in string `str` starting from index 11##$$##str.find('s', 11)@##@@find the index of sub string 's' in string `str` starting from index 15##$$##str.find('s', 15)@##@@find the index of sub string 's' in string `str` starting from index 16##$$##str.find('s', 16)@##@@find the index of sub string 's' in string `str` starting from index 11 and ending at index 14##$$##str.find('s', 11, 14)@##@@sort list of date strings 'd'##$$##sorted(d, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))@##@@Get all the sentences from a string `text` using regex##$$##re.split('\\.\\s', text)@##@@None##$$##re.split('\\.\\s', re.sub('\\.\\s*$', '', text))@##@@get all characters in string 'foobar' up to the fourth index##$$##"""foobar"""[:4]@##@@cut a string by delimiter '&'##$$##s.rfind('&')@##@@cut a string using delimiter '&'##$$##s[:s.rfind('&')]@##@@find a tag `option` whose `value` attribute is `state` in selenium##$$##driver.find_element_by_xpath("//option[@value='" + state + "']").click()@##@@append line "appended text" to file "test.txt"##$$##with open('test.txt', 'a') as myfile:
    myfile.write('appended text')@##@@append line "cool beans..." to file "foo"##$$##with open('foo', 'a') as f:
    f.write('cool beans...')@##@@append to file 'test1' content 'koko'##$$##with open('test1', 'ab') as f:
    pass@##@@append to file 'test' content 'koko'##$$##open('test', 'a+b').write('koko')@##@@split string 'x+13.5*10x-4e1' into tokens##$$##print([i for i in re.split('([\\d.]+|\\W+)', 'x+13.5*10x-4e1') if i])@##@@Find all Chinese characters in string `ipath`##$$##re.findall('[\u4e00-\u9fff]+', ipath)@##@@split string `s` by letter 's'##$$##s.split('s')@##@@run shell command 'rm -r some.file' in the background##$$##subprocess.Popen(['rm', '-r', 'some.file'])@##@@convert a list of dictionaries `listofdict into a dictionary of dictionaries##$$##dict((d['name'], d) for d in listofdict)@##@@print current date and time in a regular format##$$##datetime.datetime.now().strftime('%Y-%m-%d %H:%M')@##@@print current date and time in a regular format##$$##time.strftime('%Y-%m-%d %H:%M')@##@@find consecutive consonants in a word `CONCENTRATION` using regex##$$##re.findall('[bcdfghjklmnpqrstvwxyz]+', 'CONCERTATION', re.IGNORECASE)@##@@get a list of indices of non zero elements in a list `a`##$$##[i for i, e in enumerate(a) if e != 0]@##@@get multiple integer values from a string 'string1'##$$##map(int, re.findall('\\d+', string1))@##@@get the path of Python executable under windows##$$##os.path.dirname(sys.executable)@##@@move an x-axis label to the top of a plot `ax` in matplotlib##$$##ax.xaxis.set_label_position('top')@##@@move x-axis to the top of a plot `ax`##$$##ax.xaxis.tick_top()@##@@Move x-axis of the pyplot object `ax` to the top of a plot in matplotlib##$$##ax.xaxis.set_ticks_position('top')@##@@parse string '2015/01/01 12:12am' to DateTime object using format '%Y/%m/%d %I:%M%p'##$$##datetime.strptime('2015/01/01 12:12am', '%Y/%m/%d %I:%M%p')@##@@Open image 'picture.jpg'##$$##img = Image.open('picture.jpg')
img.show()@##@@Open image "picture.jpg"##$$##img = Image.open('picture.jpg')
Img.show@##@@terminate the script using status value 0##$$##sys.exit(0)@##@@abort the execution of the script using message 'aa! errors!'##$$##sys.exit('aa! errors!')@##@@abort the execution of a python script##$$##sys.exit()@##@@find maximum with lookahead = 4 in a list `arr`##$$##[max(abs(x) for x in arr[i:i + 4]) for i in range(0, len(arr), 4)]@##@@set the current working directory to 'c:\\Users\\uname\\desktop\\python'##$$##os.chdir('c:\\Users\\uname\\desktop\\python')@##@@set the current working directory to path `path`##$$##os.chdir(path)@##@@get a list `no_integers` of all the items in list `mylist` that are not of type `int`##$$##no_integers = [x for x in mylist if not isinstance(x, int)]@##@@match contents of an element to 'Example' in xpath (lxml)##$$##tree.xpath(".//a[text()='Example']")[0].tag@##@@concatenate key/value pairs in dictionary `a` with string ', ' into a single string##$$##""", """.join([(str(k) + ' ' + str(v)) for k, v in list(a.items())])@##@@Strip all non-ASCII characters from a unicode string, `\xa3\u20ac\xa3\u20ac`##$$##print(set(re.sub('[\x00-\x7f]', '', '\xa3\u20ac\xa3\u20ac')))@##@@Get all non-ascii characters in a unicode string `\xa3100 is worth more than \u20ac100`##$$##print(re.sub('[\x00-\x7f]', '', '\xa3100 is worth more than \u20ac100'))@##@@build a dict of key:value pairs from a string representation of a dict, `{'muffin' : 'lolz', 'foo' : 'kitty'}`##$$##ast.literal_eval("{'muffin' : 'lolz', 'foo' : 'kitty'}")@##@@Print string `t` with proper unicode representations##$$##print(t.decode('unicode_escape'))@##@@Normalize string `str` from 'cp1252' code to 'utf-8' code##$$##print(str.encode('cp1252').decode('utf-8').encode('cp1252').decode('utf-8'))@##@@merge lists `list_a` and `list_b` into a list of tuples##$$##zip(list_a, list_b)@##@@merge lists `a` and `a` into a list of tuples##$$##list(zip(a, b))@##@@convert pandas DataFrame `df` to a dictionary using `id` field as the key##$$##df.set_index('id').to_dict()@##@@convert pandas dataframe `df` with fields 'id', 'value' to dictionary##$$##df.set_index('id')['value'].to_dict()@##@@None##$$##sorted(list(mydict.items()), key=lambda a: map(int, a[0].split('.')))@##@@remove parentheses and text within it in string `filename`##$$##re.sub('\\([^)]*\\)', '', filename)@##@@Check if string 'a b' only contains letters and spaces##$$##"""a b""".replace(' ', '').isalpha()@##@@sum each element `x` in list `first` with element `y` at the same index in list `second`.##$$##[(x + y) for x, y in zip(first, second)]@##@@sort a python dictionary `a_dict` by element `1` of the value##$$##sorted(list(a_dict.items()), key=lambda item: item[1][1])@##@@None##$$##re.compile('[^a-zA-Z0-9-]+')@##@@get index of the biggest 2 values of a list `a`##$$##sorted(list(range(len(a))), key=lambda i: a[i])[-2:]@##@@get indexes of the largest `2` values from a list `a` using itemgetter##$$##zip(*sorted(enumerate(a), key=operator.itemgetter(1)))[0][-2:]@##@@get the indexes of the largest `2` values from a list of integers `a`##$$##sorted(list(range(len(a))), key=lambda i: a[i], reverse=True)[:2]@##@@get index of key 'c' in dictionary `x`##$$##list(x.keys()).index('c')@##@@Print +1 using format '{0:+d}'##$$##print('{0:+d}'.format(score))@##@@remove adjacent duplicate elements from a list `[1, 2, 2, 3, 2, 2, 4]`##$$##[k for k, g in itertools.groupby([1, 2, 2, 3, 2, 2, 4])]@##@@split string "0,1,2" based on delimiter ','##$$##"""0,1,2""".split(',')@##@@convert the string '0,1,2' to a list of integers##$$##[int(x) for x in '0,1,2'.split(',')]@##@@convert list of key-value tuples `[('A', 1), ('B', 2), ('C', 3)]` into dictionary##$$##dict([('A', 1), ('B', 2), ('C', 3)])@##@@save numpy array `x` into text file 'test.txt'##$$##np.savetxt('test.txt', x)@##@@store the output of command 'ls' in variable `direct_output`##$$##direct_output = subprocess.check_output('ls', shell=True)@##@@get all column name of dataframe `df` except for column 'T1_V6'##$$##df[df.columns - ['T1_V6']]@##@@get count of values in numpy array `a` that are between values `25` and `100`##$$##((25 < a) & (a < 100)).sum()@##@@Get day name from a datetime object##$$##date.today().strftime('%A')@##@@None##$$##re.search('\\bis\\b', your_string)@##@@Jinja parse datetime object `car.date_of_manufacture` to use format pattern `datetime`##$$##{{car.date_of_manufacture | datetime}}@##@@Get the date object `date_of_manufacture` of object `car` in string  format '%Y-%m-%d'##$$##{{car.date_of_manufacture.strftime('%Y-%m-%d')}}@##@@make a flat list from list of lists `sublist`##$$##[item for sublist in l for item in sublist]@##@@make a flat list from list of lists `list2d`##$$##list(itertools.chain(*list2d))@##@@make a flat list from list of lists `list2d`##$$##list(itertools.chain.from_iterable(list2d))@##@@convert ascii value 'a' to int##$$##ord('a')@##@@replace white spaces in string '  a\n b\n c\nd  e' with empty string ''##$$##re.sub('(?m)^[^\\S\\n]+', '', '  a\n b\n c\nd  e')@##@@remove white spaces from all the lines using a regular expression in string 'a\n b\n c'##$$##re.sub('(?m)^\\s+', '', 'a\n b\n c')@##@@destruct elements of list `[1, 2, 3]` to variables `a`, `b` and `c`##$$##a, b, c = [1, 2, 3]@##@@split list `mylist` into a list of lists whose elements have the same first five characters##$$##[list(v) for k, v in itertools.groupby(mylist, key=lambda x: x[:5])]@##@@remove all instances of parenthesesis containing text beginning with `as ` from string `line`##$$##line = re.sub('\\(+as .*?\\) ', '', line)@##@@skip the newline while printing `line`##$$##print(line.rstrip('\n'))@##@@get index values of pandas dataframe `df` as list##$$##df.index.values.tolist()@##@@check if list `a` is empty##$$##if (not a):
    pass@##@@check if list `seq` is empty##$$##if (not seq):
    pass@##@@check if list `li` is empty##$$##if (len(li) == 0):
    pass@##@@create a list containing the indices of elements greater than 4 in list `a`##$$##[i for i, v in enumerate(a) if v > 4]@##@@reverse list `yourdata`##$$##sorted(yourdata, reverse=True)@##@@sort list of nested dictionaries `yourdata` in reverse based on values associated with each dictionary's key 'subkey'##$$##sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)@##@@sort list of nested dictionaries `yourdata` in reverse order of 'key' and 'subkey'##$$##yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)@##@@remove decimal points in pandas data frame using round##$$##df.round()@##@@Get data from matplotlib plot##$$##gca().get_lines()[n].get_xydata()@##@@get the maximum 2 values per row in array `A`##$$##A[:, -2:]@##@@Get value for  "username" parameter in GET request  in Django##$$##request.GET.get('username', '')@##@@pretty-print ordered dictionary `o`##$$##pprint(dict(list(o.items())))@##@@Confirm urls in Django properly##$$##url('^$', include('sms.urls')),@##@@Configure url in django properly##$$##url('^', include('sms.urls')),@##@@get the tuple in list `a_list` that has the largest item in the second index##$$##max_item = max(a_list, key=operator.itemgetter(1))@##@@find tuple in list of tuples `a_list` with the largest second element##$$##max(a_list, key=operator.itemgetter(1))@##@@resample series `s` into 3 months bins and sum each bin##$$##s.resample('3M', how='sum')@##@@extract elements at indices (1, 2, 5) from a list `a`##$$##[a[i] for i in (1, 2, 5)]@##@@filter lines from a text file 'textfile' which contain a word 'apple'##$$##[line for line in open('textfile') if 'apple' in line]@##@@convert a date string `s` to a datetime object##$$##datetime.datetime.strptime(s, '%Y-%m-%dT%H:%M:%SZ')@##@@reading tab-delimited csv file `filename` with pandas on mac##$$##pandas.read_csv(filename, sep='\t', lineterminator='\r')@##@@replace only first occurence of string `TEST` from a string `longlongTESTstringTEST`##$$##'longlongTESTstringTEST'.replace('TEST', '?', 1)@##@@zip file `pdffile` using its basename as directory name##$$##archive.write(pdffile, os.path.basename(pdffile))@##@@create a dictionary of pairs from a list of tuples `myListOfTuples`##$$##dict(x[1:] for x in reversed(myListOfTuples))@##@@subtract elements of list `List1` from elements of list `List2`##$$##[(x1 - x2) for x1, x2 in zip(List1, List2)]@##@@check if string `string` starts with a number##$$##string[0].isdigit()@##@@Check if string `strg` starts with any of the elements in list ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')##$$##strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))@##@@print script's directory##$$##print(os.path.dirname(os.path.realpath(__file__)))@##@@split string `text` by the occurrences of regex pattern '(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)'##$$##re.split('(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)', text)@##@@Make a scatter plot using unpacked values of list `li`##$$##plt.scatter(*zip(*li))@##@@rearrange tuple of tuples `t`##$$##tuple(zip(*t))@##@@Get average for every three columns in `df` dataframe##$$##df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()@##@@convert a list `L` of ascii values to a string##$$##"""""".join(chr(i) for i in L)@##@@count the number of pairs in dictionary `d` whose value equal to `chosen_value`##$$##sum(x == chosen_value for x in list(d.values()))@##@@count the number of values in `d` dictionary that are predicate to function `some_condition`##$$##sum(1 for x in list(d.values()) if some_condition(x))@##@@convert double 0.00582811585976 to float##$$##struct.unpack('f', struct.pack('f', 0.00582811585976))@##@@convert datetime.date `dt` to utc timestamp##$$##timestamp = (dt - datetime(1970, 1, 1)).total_seconds()@##@@sort column `m` in panda dataframe `df`##$$##df.sort('m')@##@@Sort a data `a` in descending order based on the `modified` attribute of elements using lambda function##$$##a = sorted(a, key=lambda x: x.modified, reverse=True)@##@@print the truth value of `a`##$$##print(bool(a))@##@@rename `last` row index label in dataframe `df` to `a`##$$##df = df.rename(index={last: 'a'})@##@@Fit Kmeans function to a one-dimensional array `x` by reshaping it to be a multidimensional array of single values##$$##km.fit(x.reshape(-1, 1))@##@@Sort a list of strings 'words' such that items starting with 's' come first.##$$##sorted(words, key=lambda x: 'a' + x if x.startswith('s') else 'b' + x)@##@@open the login site 'http://somesite.com/adminpanel/index.php' in the browser##$$##webbrowser.open('http://somesite.com/adminpanel/index.php')@##@@fetch all elements in a dictionary `parent_dict`, falling between two keys 2 and 4##$$##dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)@##@@fetch all elements in a dictionary 'parent_dict' where the key is between the range of 2 to 4##$$##dict((k, v) for k, v in parent_dict.items() if k > 2 and k < 4)@##@@sort two lists `list1` and `list2` together using lambda function##$$##[list(x) for x in zip(*sorted(zip(list1, list2), key=lambda pair: pair[0]))]@##@@get the number of values in list `j` that is greater than 5##$$##sum(((i > 5) for i in j))@##@@get the number of values in list `j` that is greater than 5##$$##len([1 for i in j if (i > 5)])@##@@get the number of values in list `j` that is greater than `i`##$$##j = np.array(j)
sum((j > i))@##@@zip list `a`, `b`, `c` into a list of tuples##$$##[(x + tuple(y)) for x, y in zip(zip(a, b), c)]@##@@changing permission of file `path` to `stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH`##$$##os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)@##@@argparse associate zero or more arguments with flag 'file'##$$##parser.add_argument('file', nargs='*')@##@@get a list of booleans `z` that shows wether the corresponding items in list `x` and `y` are equal##$$##z = [(i == j) for i, j in zip(x, y)]@##@@create a list which indicates whether each element in `x` and `y` is identical##$$##[(x[i] == y[i]) for i in range(len(x))]@##@@None##$$##[int(s) for s in re.findall('\\b\\d+\\b', "he33llo 42 I'm a 32 string 30")]@##@@create an empty data frame `df2` with index from another data frame `df1`##$$##df2 = pd.DataFrame(index=df1.index)@##@@unpack first and second bytes of byte string `pS` into integer##$$##struct.unpack('h', pS[0:2])@##@@print list `t` into a table-like shape##$$##print('\n'.join('  '.join(map(str, row)) for row in t))@##@@None##$$##df.sort_values(by='Date')@##@@check if a checkbox is checked in selenium python webdriver##$$##driver.find_element_by_name('<check_box_name>').is_selected()@##@@determine if checkbox with id '<check_box_id>' is checked in selenium python webdriver##$$##driver.find_element_by_id('<check_box_id>').is_selected()@##@@replace `0` with `2` in the list `[0, 1, 0, 3]`##$$##[(a if a else 2) for a in [0, 1, 0, 3]]@##@@Produce a string that is suitable as Unicode literal from string 'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'##$$##'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'.encode().decode('unicode-escape')@##@@Parse a unicode string `M\\N{AMPERSAND}M\\N{APOSTROPHE}s`##$$##'M\\N{AMPERSAND}M\\N{APOSTROPHE}s'.decode('unicode-escape')@##@@convert Unicode codepoint to utf8 hex##$$##chr(int('fd9b', 16)).encode('utf-8')@##@@use upper case letters to print hex value `value`##$$##print('0x%X' % value)@##@@get a list `cleaned` that contains all non-empty elements in list `your_list`##$$##cleaned = [x for x in your_list if x]@##@@create a slice object using string `string_slice`##$$##slice(*[(int(i.strip()) if i else None) for i in string_slice.split(':')])@##@@Find all the tags `a` and `div` from Beautiful Soup object `soup`##$$##soup.find_all(['a', 'div'])@##@@get the name of function `func` as a string##$$##print(func.__name__)@##@@convert dictionary `adict` into string##$$##"""""".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))@##@@convert dictionary `adict` into string##$$##"""""".join('{}{}'.format(key, val) for key, val in list(adict.items()))@##@@copy list `old_list` as `new_list`##$$##new_list = old_list[:]@##@@copy list `old_list` as `new_list`##$$##new_list = list(old_list)@##@@copy list `old_list` as `new_list`##$$##new_list = copy.copy(old_list)@##@@deep copy list `old_list` as `new_list`##$$##new_list = copy.deepcopy(old_list)@##@@make a copy of list `old_list`##$$##[i for i in old_list]@##@@remove frame of legend in plot `plt`##$$##plt.legend(frameon=False)@##@@Print a emoji from a string `\\ud83d\\ude4f` having surrogate pairs##$$##"""\\ud83d\\ude4f""".encode('utf-16', 'surrogatepass').decode('utf-16')@##@@calling a function named 'myfunction' in the module##$$##globals()['myfunction']()@##@@Check the status code of url "http://www.stackoverflow.com"##$$##urllib.request.urlopen('http://www.stackoverflow.com').getcode()@##@@Check the status code of url "www.python.org"##$$##conn = httplib.HTTPConnection('www.python.org')
conn.request('HEAD', '/')
r1 = conn.getresponse()
print(r1.status, r1.reason)@##@@Check the status code of url `url`##$$##r = requests.head(url)
return (r.status_code == 200)@##@@Checking if website "http://www.stackoverflow.com" is up##$$##print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())@##@@Selenium `driver` click a hyperlink with the pattern "a[href^='javascript']"##$$##driver.find_element_by_css_selector("a[href^='javascript']").click()@##@@store data frame `df` to file `file_name` using pandas, python##$$##df.to_pickle(file_name)@##@@calculate the mean of columns with same name in dataframe `df`##$$##df.groupby(by=df.columns, axis=1).mean()@##@@sort list `bar` by each element's attribute `attrb1` and attribute `attrb2` in reverse order##$$##bar.sort(key=lambda x: (x.attrb1, x.attrb2), reverse=True)@##@@get alpha value `alpha` of a png image `img`##$$##alpha = img.split()[-1]@##@@None##$$##[len(x) for x in s.split()]@##@@BeautifulSoup find tag 'div' with styling 'width=300px;' in HTML string `soup`##$$##soup.findAll('div', style='width=300px;')@##@@Execute SQL statement `sql` with values of dictionary `myDict` as parameters##$$##cursor.execute(sql, list(myDict.values()))@##@@Convert CSV file `Result.csv` to Pandas dataframe using separator ' '##$$##df.to_csv('Result.csv', index=False, sep=' ')@##@@update the `globals()` dictionary with the contents of the `vars(args)` dictionary##$$##globals().update(vars(args))@##@@find all substrings in `mystring` beginning and ending with square brackets##$$##re.findall('\\[(.*?)\\]', mystring)@##@@Format all floating variables `var1`, `var2`, `var3`, `var1` to print to two decimal places.##$$##print('%.2f kg = %.2f lb = %.2f gal = %.2f l' % (var1, var2, var3, var4))@##@@Remove all items from a dictionary `d` where the values are less than `1`##$$##d = dict((k, v) for k, v in d.items() if v > 0)@##@@Filter dictionary `d` to have items with value greater than 0##$$##d = {k: v for k, v in list(d.items()) if v > 0}@##@@convert a string of date strings `date_stngs ` to datetime objects and put them in a dataframe##$$##pd.to_datetime(pd.Series(date_stngs))@##@@get  value at index `[2, 0]` in dataframe `df`##$$##df.iloc[2, 0]@##@@change the font size on plot `matplotlib` to 22##$$##matplotlib.rcParams.update({'font.size': 22})@##@@converting dictionary `d` into a dataframe `pd` with keys as data for column 'Date' and the corresponding values as data for column 'DateValue'##$$##pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])@##@@create a dataframe containing the multiplication of element-wise in dataframe `df` and dataframe `df2` using index name and column labels of dataframe `df`##$$##pd.DataFrame(df.values * df2.values, columns=df.columns, index=df.index)@##@@extract floating number from string 'Current Level: 13.4 db.'##$$##re.findall('\\d+\\.\\d+', 'Current Level: 13.4 db.')@##@@extract floating point numbers from a string 'Current Level: -13.2 db or 14.2 or 3'##$$##re.findall('[-+]?\\d*\\.\\d+|\\d+', 'Current Level: -13.2 db or 14.2 or 3')@##@@pair each element in list `it` 3 times into a tuple##$$##zip(it, it, it)@##@@lowercase a python dataframe string in column 'x' if it has missing values in dataframe `df`##$$##df['x'].str.lower()@##@@append dict `{'f': var6, 'g': var7, 'h': var8}` to value of key `e` in dict `jsobj['a']['b']`##$$##jsobj['a']['b']['e'].append({'f': var6, 'g': var7, 'h': var8})@##@@Concat a list of strings `lst` using string formatting##$$##"""""".join(lst)@##@@sum values greater than 0 in dictionary `d`##$$##sum(v for v in list(d.values()) if v > 0)@##@@run flask application `app` in debug mode.##$$##app.run(debug=True)@##@@drop rows whose index value in list `[1, 3]` in dataframe `df`##$$##df.drop(df.index[[1, 3]], inplace=True)@##@@replace nan values in a pandas data frame with the average of columns##$$##df.apply(lambda x: x.fillna(x.mean()), axis=0)@##@@extract attribute `my_attr` from each object in list `my_list`##$$##[o.my_attr for o in my_list]@##@@python get time stamp on file `file` in '%m/%d/%Y' format##$$##time.strftime('%m/%d/%Y', time.gmtime(os.path.getmtime(file)))@##@@check if dictionary `subset` is a subset of dictionary `superset`##$$##all(item in list(superset.items()) for item in list(subset.items()))@##@@Convert integer elements in list `wordids` to strings##$$##[str(wi) for wi in wordids]@##@@Reset the indexes of a pandas data frame##$$##df2 = df.reset_index()@##@@format datetime in `dt` as string in format `'%m/%d/%Y`##$$##dt.strftime('%m/%d/%Y')@##@@format floating point number  `TotalAmount` to be rounded off to two decimal places and have a comma thousands' seperator##$$##print('Total cost is: ${:,.2f}'.format(TotalAmount))@##@@sum the values in each row of every two adjacent columns in dataframe `df`##$$##df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')@##@@create list `randomList` with 10 random floating point numbers between 0.0 and 1.0##$$##randomList = [random.random() for _ in range(10)]@##@@find href value that has string 'follow?page' inside it##$$##print(soup.find('a', href=re.compile('.*follow\\?page.*')))@##@@immediately see output of print statement that doesn't end in a newline##$$##sys.stdout.flush()@##@@get a random key `country` and value `capital` form a dictionary `d`##$$##country, capital = random.choice(list(d.items()))@##@@split string `Word to Split` into a list of characters##$$##list('Word to Split')@##@@Create a list containing words that contain vowel letter followed by the same vowel in file 'file.text'##$$##[w for w in open('file.txt') if not re.search('[aeiou]{2}', w)]@##@@Validate IP address using Regex##$$##pat = re.compile('^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$')@##@@execute file 'filename.py'##$$##exec(compile(open('filename.py').read(), 'filename.py', 'exec'))@##@@SQLAlchemy count the number of rows with distinct values in column `name` of table `Tag`##$$##session.query(Tag).distinct(Tag.name).group_by(Tag.name).count()@##@@remove null columns in a dataframe `df`##$$##df = df.dropna(axis=1, how='all')@##@@check if all lists in list `L` have three elements of integer 1##$$##all(x.count(1) == 3 for x in L)@##@@Get a list comparing two lists of tuples `l1` and `l2` if any first value in `l1` matches with first value in `l2`##$$##[x[0] for x in l1 if any(x[0] == y[0] for y in l2)]@##@@clear the textbox `text` in tkinter##$$##tex.delete('1.0', END)@##@@Convert long int `myNumber` into date and time represented in the the string format '%Y-%m-%d %H:%M:%S'##$$##datetime.datetime.fromtimestamp(myNumber).strftime('%Y-%m-%d %H:%M:%S')@##@@Spawn a process to run python script `myscript.py` in C++##$$##system('python myscript.py')@##@@sort a list `your_list` of class objects by their values for the attribute `anniversary_score`##$$##your_list.sort(key=operator.attrgetter('anniversary_score'))@##@@sort list `your_list` by the `anniversary_score` attribute of each object##$$##your_list.sort(key=lambda x: x.anniversary_score)@##@@convert a tensor with list of constants `[1, 2, 3]` into a numpy array in tensorflow##$$##print(type(tf.Session().run(tf.constant([1, 2, 3]))))@##@@convert list `a` from being consecutive sequences of tuples into a single sequence of elements##$$##list(itertools.chain(*a))@##@@Set value for key `a` in dict `count` to `0` if key `a` does not exist or if value is `none`##$$##count.setdefault('a', 0)@##@@Do group by on `cluster` column in `df` and get its mean##$$##df.groupby(['cluster']).mean()@##@@get number in list `myList` closest in value to number `myNumber`##$$##min(myList, key=lambda x: abs(x - myNumber))@##@@check if any of the items in  `search` appear in `string`##$$##any(x in string for x in search)@##@@search for occurrences of regex pattern `pattern` in string `url`##$$##print(pattern.search(url).group(1))@##@@factorize all string values in dataframe `s` into floats##$$##(s.factorize()[0] + 1).astype('float')@##@@Get a list `C` by subtracting values in one list `B` from corresponding values in another list `A`##$$##C = [(a - b) for a, b in zip(A, B)]@##@@derive the week start for the given week number and year ‘2011, 4, 0’##$$##datetime.datetime.strptime('2011, 4, 0', '%Y, %U, %w')@##@@convert a list of strings `['1', '-1', '1']` to a list of numbers##$$##map(int, ['1', '-1', '1'])@##@@create datetime object from "16sep2012"##$$##datetime.datetime.strptime('16Sep2012', '%d%b%Y')@##@@update fields in Django model `Book` with arguments in dictionary `d` where primary key is equal to `pk`##$$##Book.objects.filter(pk=pk).update(**d)@##@@update the fields in django model `Book` using dictionary `d`##$$##Book.objects.create(**d)@##@@print a digit `your_number` with exactly 2 digits after decimal##$$##print('{0:.2f}'.format(your_number))@##@@generate a 12-digit random number##$$##random.randint(100000000000, 999999999999)@##@@generate a random 12-digit number##$$##int(''.join(str(random.randint(0, 9)) for _ in range(12)))@##@@generate a random 12-digit number##$$##"""""".join(str(random.randint(0, 9)) for _ in range(12))@##@@generate a 12-digit random number##$$##'%0.12d' % random.randint(0, 999999999999)@##@@remove specific elements in a numpy array `a`##$$##numpy.delete(a, index)@##@@sort list `trial_list` based on values of dictionary `trail_dict`##$$##sorted(trial_list, key=lambda x: trial_dict[x])@##@@read a single character from stdin##$$##sys.stdin.read(1)@##@@get a list of characters in string `x` matching regex pattern `pattern`##$$##print(re.findall(pattern, x))@##@@get the context of a search by keyword 'My keywords' in beautifulsoup `soup`##$$##k = soup.find(text=re.compile('My keywords')).parent.text@##@@convert rows in pandas data frame `df` into list##$$##df.apply(lambda x: x.tolist(), axis=1)@##@@convert a 1d `A` array to a 2d array `B`##$$##B = np.reshape(A, (-1, 2))@##@@run app `app` on host '192.168.0.58' and port 9000 in Flask##$$##app.run(host='192.168.0.58', port=9000, debug=False)@##@@encode unicode string '\xc5\xc4\xd6' to utf-8 code##$$##print('\xc5\xc4\xd6'.encode('UTF8'))@##@@get the first element of each tuple from a list of tuples `G`##$$##[x[0] for x in G]@##@@regular expression matching all but 'aa' and 'bb' for string `string`##$$##re.findall('-(?!aa-|bb-)([^-]+)', string)@##@@regular expression matching all but 'aa' and 'bb'##$$##re.findall('-(?!aa|bb)([^-]+)', string)@##@@remove false entries from a dictionary `hand`##$$##{k: v for k, v in list(hand.items()) if v}@##@@Get a dictionary from a dictionary `hand` where the values are present##$$##dict((k, v) for k, v in hand.items() if v)@##@@sort list `L` based on the value of variable 'resultType' for each object in list `L`##$$##sorted(L, key=operator.itemgetter('resultType'))@##@@sort a list of objects `s` by a member variable 'resultType'##$$##s.sort(key=operator.attrgetter('resultType'))@##@@sort a list of objects 'somelist' where the object has member number variable `resultType`##$$##somelist.sort(key=lambda x: x.resultType)@##@@join multiple dataframes `d1`, `d2`, and `d3` on column 'name'##$$##df1.merge(df2, on='name').merge(df3, on='name')@##@@generate random Decimal##$$##decimal.Decimal(random.randrange(10000)) / 100@##@@list all files of a directory `mypath`##$$##onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]@##@@list all files of a directory `mypath`##$$##f = []
for (dirpath, dirnames, filenames) in walk(mypath):
    f.extend(filenames)
    break@##@@list all ".txt" files of a directory "/home/adam/"##$$##print(glob.glob('/home/adam/*.txt'))@##@@list all files of a directory "somedirectory"##$$##os.listdir('somedirectory')@##@@execute sql query 'INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)' with all parameters in list `tup`##$$##cur.executemany('INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)', tup)@##@@get keys with same value in dictionary `d`##$$##print([key for key in d if d[key] == 1])@##@@get keys with same value in dictionary `d`##$$##print([key for key, value in d.items() if value == 1])@##@@Get keys from a dictionary 'd' where the value is '1'.##$$##print([key for key, value in list(d.items()) if value == 1])@##@@create list of 'size' empty strings##$$##strs = ['' for x in range(size)]@##@@generate pdf file `output_filename` from markdown file `input_filename`##$$##with open(input_filename, 'r') as f:
    html_text = markdown(f.read(), output_format='html4')
pdfkit.from_string(html_text, output_filename)@##@@remove duplicate dict in list `l`##$$##[dict(t) for t in set([tuple(d.items()) for d in l])]@##@@Set time zone `Europe/Istanbul` in Django##$$##TIME_ZONE = 'Europe/Istanbul'@##@@append `date` to list value of `key` in dictionary `dates_dict`, or create key `key` with value `date` in a list if it does not exist##$$##dates_dict.setdefault(key, []).append(date)@##@@Group the values from django model `Article` with group by value `pub_date` and annotate by `title`##$$##Article.objects.values('pub_date').annotate(article_count=Count('title'))@##@@clear Tkinter Canvas `canvas`##$$##canvas.delete('all')@##@@Initialize a pandas series object `s` with columns `['A', 'B', 'A1R', 'B2', 'AABB4']`##$$##s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])@##@@None##$$##datetime.datetime.strptime('2007-03-04T21:08:12', '%Y-%m-%dT%H:%M:%S')@##@@sort list `a` using the first dimension of the element as the key to list `b`##$$##a.sort(key=lambda x: b.index(x[0]))@##@@None##$$##a.sort(key=lambda x_y: b.index(x_y[0]))@##@@Save plot `plt` as png file 'filename.png'##$$##plt.savefig('filename.png')@##@@Save matplotlib graph to image file `filename.png` at a resolution of `300 dpi`##$$##plt.savefig('filename.png', dpi=300)@##@@get output from process `p1`##$$##p1.communicate()[0]@##@@None##$$##output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]@##@@searche in HTML string for elements that have text 'Python'##$$##soup.body.findAll(text='Python')@##@@BeautifulSoup find string 'Python Jobs' in HTML body `body`##$$##soup.body.findAll(text='Python Jobs')@##@@Sort items in dictionary `d`  using the first part of the key after splitting the key##$$##sorted(list(d.items()), key=lambda name_num: (name_num[0].rsplit(None, 1)[0], name_num[1]))@##@@create a set that is the exclusive or of [1, 2, 3] and [3, 4, 5]##$$##set([1, 2, 3]) ^ set([3, 4, 5])@##@@Get a list values of a dictionary item `pass_id` from post requests in django##$$##request.POST.getlist('pass_id')@##@@Filter duplicate entries w.r.t. value in 'id' from a list of dictionaries 'L'##$$##list(dict((x['id'], x) for x in L).values())@##@@Get pandas GroupBy object with sum over the rows with same column names within  dataframe `df`##$$##df.groupby(df.columns, axis=1).sum()@##@@convert the zip of range `(1, 5)` and range `(7, 11)` into a dictionary##$$##dict(zip(list(range(1, 5)), list(range(7, 11))))@##@@Get all indexes of boolean numpy array where boolean value `mask` is True##$$##numpy.where(mask)@##@@case insensitive comparison of strings `string1` and `string2`##$$##if (string1.lower() == string2.lower()):
    print('The strings are the same (case insensitive)')
else:
    print('The strings are not the same (case insensitive)')@##@@case insensitive string comparison between `string1` and `string2`##$$##if (string1.lower() == string2.lower()):
    pass@##@@case insensitive string comparison between `string1` and `string2`##$$##(string1.lower() == string2.lower())@##@@case insensitive string comparison between `first` and `second`##$$##(first.lower() == second.lower())@##@@case insensitive comparison between strings `first` and `second`##$$##(first.upper() == second.upper())@##@@Taking the results of a bash command "awk '{print $10, $11}' test.txt > test2.txt"##$$##os.system("awk '{print $10, $11}' test.txt > test2.txt")@##@@remove multiple values from a list `my_list` at the same time with index starting at `2` and ending just before `6`.##$$##del my_list[2:6]@##@@convert a string `s` to its base-10 representation##$$##int(s.encode('hex'), 16)@##@@match regex pattern 'TAA(?:[ATGC]{3})+?TAA' on string `seq`##$$##re.findall('TAA(?:[ATGC]{3})+?TAA', seq)@##@@sort a set `s` by numerical value##$$##sorted(s, key=float)@##@@convert an int 65 to hex string##$$##hex(65)@##@@append a pandas series `b` to the series `a` and get a continuous index##$$##a.append(b).reset_index(drop=True)@##@@simple way to append a pandas series `a` and `b` with same index##$$##pd.concat([a, b], ignore_index=True)@##@@Get a list of tuples with multiple iterators using list comprehension##$$##[(i, j) for i in range(1, 3) for j in range(1, 5)]@##@@reverse sort items in dictionary `mydict` by value##$$##sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)@##@@select the last business day of the month for each month in 2014 in pandas##$$##pd.date_range('1/1/2014', periods=12, freq='BM')@##@@disable the certificate check in https requests for url `https://kennethreitz.com`##$$##requests.get('https://kennethreitz.com', verify=False)@##@@return dataframe `df` with last row dropped##$$##df.ix[:-1]@##@@check if "blah" is in string `somestring`##$$##if ('blah' not in somestring):
    pass@##@@check if string `needle` is in `haystack`##$$##if (needle in haystack):
    pass@##@@check if string "substring" is in string##$$##string.find('substring')@##@@check if string `s` contains "is"##$$##if (s.find('is') == (-1)):
    print("No 'is' here!")
else:
    print("Found 'is' in the string.")@##@@extract first and last row of a dataframe `df`##$$##pd.concat([df.head(1), df.tail(1)])@##@@filter a Django model `MyModel` to have charfield length of max `255`##$$##MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])@##@@Filter queryset for all objects in Django model `MyModel` where texts length are greater than `254`##$$##MyModel.objects.filter(text__regex='^.{254}.*')@##@@count the number of rows with missing values in a pandas dataframe `df`##$$##sum(df.apply(lambda x: sum(x.isnull().values), axis=1) > 0)@##@@None##$$##sorted(enumerate(a), key=lambda x: x[1])@##@@set the font 'Purisa' of size 12 for a canvas' text item `k`##$$##canvas.create_text(x, y, font=('Purisa', 12), text=k)@##@@create a list containing all values associated with key 'baz' in dictionaries of list `foos` using list comprehension##$$##[y['baz'] for x in foos for y in x['bar']]@##@@read pandas data frame csv `comma.csv` with extra commas in column specifying string delimiter `'`##$$##df = pd.read_csv('comma.csv', quotechar="'")@##@@replace string 'in.' with ' in. ' in dataframe `df` column 'a'##$$##df['a'] = df['a'].str.replace('in.', ' in. ')@##@@Get all indexes of a list `a` where each value is greater than `2`##$$##[i for i in range(len(a)) if a[i] > 2]@##@@check if a local variable `myVar` exists##$$##('myVar' in locals())@##@@check if a global variable `myVar` exists##$$##('myVar' in globals())@##@@check if object `obj` has attribute 'attr_name'##$$##hasattr(obj, 'attr_name')@##@@check if a local variable 'myVar' exists##$$##if ('myVar' in locals()):
    pass@##@@check if a global variable 'myVar' exists##$$##if ('myVar' in globals()):
    pass@##@@lambda function that adds two operands##$$##lambda x, y: x + y@##@@count the number of items in a generator/iterator `it`##$$##sum(1 for i in it)@##@@get tuples of the corresponding elements from lists `lst` and `lst2`##$$##[(x, lst2[i]) for i, x in enumerate(lst)]@##@@create tuples containing elements that are at the same index of list `lst` and list `lst2`##$$##[(i, j) for i, j in zip(lst, lst2)]@##@@get tuples from lists `lst` and `lst2` using list comprehension in python 2##$$##[(lst[i], lst2[i]) for i in range(len(lst))]@##@@convert hex triplet string `rgbstr` to rgb tuple##$$##struct.unpack('BBB', rgbstr.decode('hex'))@##@@Check if 3 is not in a list [2, 3, 4]##$$##(3 not in [2, 3, 4])@##@@Check if tuple (2, 3) is not in a list [(2, 3), (5, 6), (9, 1)]##$$##((2, 3) not in [(2, 3), (5, 6), (9, 1)])@##@@Check if tuple (2, 3) is not in a list [(2, 7), (7, 3), "hi"]##$$##((2, 3) not in [(2, 7), (7, 3), 'hi'])@##@@Check if 3 is not in the list [4,5,6]##$$##(3 not in [4, 5, 6])@##@@create a list by appending components from list `a` and reversed list `b` interchangeably##$$##[value for pair in zip(a, b[::-1]) for value in pair]@##@@delete the last column of numpy array `a` and assign resulting array to `b`##$$##b = np.delete(a, -1, 1)@##@@commit all the changes after executing a query.##$$##dbb.commit()@##@@join two dataframes based on values in selected columns##$$##pd.merge(a, b, on=['A', 'B'], how='outer')@##@@set text color as `red` and background color as `#A3C1DA` in qpushbutton##$$##setStyleSheet('QPushButton {background-color: #A3C1DA; color: red;}')@##@@find the mean of elements in list `l`##$$##sum(l) / float(len(l))@##@@Find all the items from a dictionary `D` if the key contains the string `Light`##$$##[(k, v) for k, v in D.items() if 'Light' in k]@##@@Get a md5 hash from string `thecakeisalie`##$$##k = hashlib.md5('thecakeisalie').hexdigest()@##@@None##$$##os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))@##@@sort datetime objects `birthdays` by `month` and `day`##$$##birthdays.sort(key=lambda d: (d.month, d.day))@##@@extract table data from table `rows` using beautifulsoup##$$##[[td.findNext(text=True) for td in tr.findAll('td')] for tr in rows]@##@@strip the string `.txt` from anywhere in the string `Boat.txt.txt`##$$##"""Boat.txt.txt""".replace('.txt', '')@##@@get a list of the row names from index of a pandas data frame##$$##list(df.index)@##@@get the row names from index in a pandas data frame##$$##df.index@##@@create a list of all unique characters in string 'aaabcabccd'##$$##"""""".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))@##@@get list of all unique characters in a string 'aaabcabccd'##$$##list(set('aaabcabccd'))@##@@None##$$##"""""".join(set('aaabcabccd'))@##@@find rows with non zero values in a subset of columns where `df.dtypes` is not equal to `object` in pandas dataframe##$$##df.loc[(df.loc[:, (df.dtypes != object)] != 0).any(1)]@##@@None##$$##br.form.add_file(open(filename), 'text/plain', filename)@##@@check if  dictionary `d` contains all keys in list `['somekey', 'someotherkey', 'somekeyggg']`##$$##all(word in d for word in ['somekey', 'someotherkey', 'somekeyggg'])@##@@hide output of subprocess `['espeak', text]`##$$##subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)@##@@replace nans by preceding values in pandas dataframe `df`##$$##df.fillna(method='ffill', inplace=True)@##@@create 4 numbers in range between 1 and 3##$$##print(np.linspace(1, 3, num=4, endpoint=False))@##@@Create numpy array of `5` numbers starting from `1` with interval of `3`##$$##print(np.linspace(1, 3, num=5))@##@@create a symlink directory `D:\\testdirLink` for directory `D:\\testdir` with unicode support using ctypes library##$$##kdll.CreateSymbolicLinkW('D:\\testdirLink', 'D:\\testdir', 1)@##@@get a list `slice` of array slices of the first two rows and columns from array `arr`##$$##slice = [arr[i][0:2] for i in range(0, 2)]@##@@upload uploaded file from path '/upload' to Google cloud storage 'my_bucket' bucket##$$##upload_url = blobstore.create_upload_url('/upload', gs_bucket_name='my_bucket')@##@@change directory to the directory of a python script##$$##os.chdir(os.path.dirname(__file__))@##@@call a function with argument list `args`##$$##func(*args)@##@@split column 'AB' in dataframe `df` into two columns by first whitespace ' '##$$##df['AB'].str.split(' ', 1, expand=True)@##@@pandas dataframe, how do i split a column 'AB' into two 'A' and 'B' on delimiter ' '##$$##df['A'], df['B'] = df['AB'].str.split(' ', 1).str@##@@sort list `xs` based on the length of its elements##$$##print(sorted(xs, key=len))@##@@sort list `xs` in ascending order of length of elements##$$##xs.sort(lambda x, y: cmp(len(x), len(y)))@##@@sort list of strings `xs` by the length of string##$$##xs.sort(key=lambda s: len(s))@##@@plot point marker '.' on series `ts`##$$##ts.plot(marker='.')@##@@get all combination of n binary values##$$##lst = list(itertools.product([0, 1], repeat=n))@##@@get all combination of n binary values##$$##lst = map(list, itertools.product([0, 1], repeat=n))@##@@get all combination of 3 binary values##$$##bin = [0, 1]
[(x, y, z) for x in bin for y in bin for z in bin]@##@@get all combination of 3 binary values##$$##lst = list(itertools.product([0, 1], repeat=3))@##@@append string 'str' at the beginning of each value in column 'col' of dataframe `df`##$$##df['col'] = 'str' + df['col'].astype(str)@##@@get a dict of variable names `['some', 'list', 'of', 'vars']` as a string and their values##$$##dict((name, eval(name)) for name in ['some', 'list', 'of', 'vars'])@##@@add a colorbar to plot `plt` using image `im` on axes `ax`##$$##plt.colorbar(im, ax=ax)@##@@convert nested list 'Cards' into a flat list##$$##[a for c in Cards for b in c for a in b]@##@@create a list containing keys of dictionary `d` and sort it alphabetically##$$##sorted(d, key=d.get)@##@@print the number of occurences of not `none` in a list `lst` in Python 2##$$##print(len([x for x in lst if x is not None]))@##@@lookup dictionary key `key1` in Django template `json`##$$##{{json.key1}}@##@@remove duplicates from list `myset`##$$##mynewlist = list(myset)@##@@get unique values from the list `['a', 'b', 'c', 'd']`##$$##set(['a', 'b', 'c', 'd'])@##@@set size of `figure` to landscape A4 i.e. `11.69, 8.27` inches##$$##figure(figsize=(11.69, 8.27))@##@@get every thing after last `/`##$$##url.rsplit('/', 1)@##@@get everything after last slash in a url stored in variable 'url'##$$##url.rsplit('/', 1)[-1]@##@@open file '5_1.txt' in directory `direct`##$$##x_file = open(os.path.join(direct, '5_1.txt'), 'r')@##@@create a list with the characters of a string `5+6`##$$##list('5+6')@##@@concatenate a list of numpy arrays `input_list` together into a flattened list of values##$$##np.concatenate(input_list).ravel().tolist()@##@@convert dictionary `dict` into a flat list##$$##print([y for x in list(dict.items()) for y in x])@##@@Convert a dictionary `dict` into a list with key and values as list items.##$$##[y for x in list(dict.items()) for y in x]@##@@get a random record from model 'MyModel' using django's orm##$$##MyModel.objects.order_by('?').first()@##@@change current working directory to directory 'chapter3'##$$##os.chdir('chapter3')@##@@change current working directory##$$##os.chdir('C:\\Users\\username\\Desktop\\headfirstpython\\chapter3')@##@@change current working directory##$$##os.chdir('.\\chapter3')@##@@create a flat dictionary by summing values associated with similar keys in each dictionary of list `dictlist`##$$##dict((key, sum(d[key] for d in dictList)) for key in dictList[0])@##@@sort pandas data frame `df` using values from columns `c1` and `c2` in ascending order##$$##df.sort(['c1', 'c2'], ascending=[True, True])@##@@Converting string lists `s` to float list##$$##floats = [float(x) for x in s.split()]@##@@Converting string lists `s` to float list##$$##floats = map(float, s.split())@##@@set labels `[1, 2, 3, 4, 5]` on axis X in plot `plt`##$$##plt.xticks([1, 2, 3, 4, 5])@##@@read line by line from stdin##$$##for line in fileinput.input():
    pass@##@@read line by line from stdin##$$##for line in sys.stdin:
    pass@##@@check if string `one` exists in the values of dictionary `d`##$$##'one' in list(d.values())@##@@Check if value 'one' is among the values of dictionary `d`##$$##'one' in iter(d.values())@##@@call parent class `Instructor` of child class constructor##$$##super(Instructor, self).__init__(name, year)@##@@create a dictionary using two lists`x` and `y`##$$##dict(zip(x, y))@##@@sort a list of dictionaries `a` by dictionary values in descending order##$$##sorted(a, key=lambda i: list(i.values())[0], reverse=True)@##@@sorting a list of dictionary `a` by values in descending order##$$##sorted(a, key=dict.values, reverse=True)@##@@Use multiple groupby and agg operations `sum`, `count`, `std` for pandas data frame `df`##$$##df.groupby(level=0).agg(['sum', 'count', 'std'])@##@@for a dictionary `a`, set default value for key `somekey` as list and append value `bob`  in that key##$$##a.setdefault('somekey', []).append('bob')@##@@sum values in list of dictionaries `example_list` with key 'gold'##$$##sum(item['gold'] for item in example_list)@##@@get a sum of all values from key `gold` in a list of dictionary `example_list`##$$##sum([item['gold'] for item in example_list])@##@@Get all the values in key `gold` summed from a list of dictionary `myLIst`##$$##sum(item['gold'] for item in myLIst)@##@@writing string 'text to write\n' to file `f`##$$##f.write('text to write\n')@##@@Write a string `My String` to a file `file` including new line character##$$##file.write('My String\n')@##@@find consecutive segments from a column 'A' in a pandas data frame 'df'##$$##df.reset_index().groupby('A')['index'].apply(np.array)@##@@get a relative path of file 'my_file' into variable `fn`##$$##fn = os.path.join(os.path.dirname(__file__), 'my_file')@##@@retrieve an element from a set `s` without removing it##$$##e = next(iter(s))@##@@execute a command in the command prompt to list directory contents of the c drive `c:\\'##$$##os.system('dir c:\\')@##@@Make a auto scrolled window to the end of the list in gtk##$$##self.treeview.connect('size-allocate', self.treeview_changed)@##@@check if 3 is inside list `[1, 2, 3]`##$$##3 in [1, 2, 3]@##@@Represent DateTime object '10/05/2012' with format '%d/%m/%Y' into format '%Y-%m-%d'##$$##datetime.datetime.strptime('10/05/2012', '%d/%m/%Y').strftime('%Y-%m-%d')@##@@convert a string literal `s` with values `\\` to raw string literal##$$##s = s.replace('\\', '\\\\')@##@@get output of script `proc`##$$##print(proc.communicate()[0])@##@@create a pandas data frame from list of nested dictionaries `my_list`##$$##pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T@##@@delete all columns in  DataFrame `df` that do not hold a non-zero value in its records##$$##df.loc[:, ((df != 0).any(axis=0))]@##@@sort a multidimensional array `a` by column with index 1##$$##sorted(a, key=lambda x: x[1])@##@@split string `s` to list conversion by ','##$$##[x.strip() for x in s.split(',')]@##@@Get a list of items in the list `container` with attribute equal to `value`##$$##items = [item for item in container if item.attribute == value]@##@@create a file 'filename' with each tuple in the list `mylist` written to a line##$$##open('filename', 'w').write('\n'.join('%s %s' % x for x in mylist))@##@@Get multiple matched strings using regex pattern `(?:review: )?(http://url.com/(\\d+))\\s?`##$$##pattern = re.compile('(?:review: )?(http://url.com/(\\d+))\\s?', re.IGNORECASE)@##@@read a text file 'very_Important.txt' into a string variable `str`##$$##str = open('very_Important.txt', 'r').read()@##@@Return values for column `C` after group by on column `A` and `B` in dataframe `df`##$$##df.groupby(['A', 'B'])['C'].unique()@##@@read file `fname` line by line into a list `content`##$$##with open(fname) as f:
    content = f.readlines()@##@@read file 'filename' line by line into a list `lines`##$$##with open('filename') as f:
    lines = f.readlines()@##@@read file 'filename' line by line into a list `lines`##$$##lines = [line.rstrip('\n') for line in open('filename')]@##@@read file "file.txt" line by line into a list `array`##$$##with open('file.txt', 'r') as ins:
    array = []
    for line in ins:
        array.append(line)@##@@convert the dataframe column 'col' from string types to datetime types##$$##df['col'] = pd.to_datetime(df['col'])@##@@get a list of the keys in each dictionary in a dictionary of dictionaries `foo`##$$##[k for d in list(foo.values()) for k in d]@##@@get user input using message 'Enter name here: ' and insert it to the first placeholder in string 'Hello, {0}, how do you do?'##$$##print('Hello, {0}, how do you do?'.format(input('Enter name here: ')))@##@@create pandas data frame `df` from txt file `filename.txt` with column `Region Name` and separator `;`##$$##df = pd.read_csv('filename.txt', sep=';', names=['Region Name'])@##@@None##$$##df['a'] = df['a'].apply(lambda x: x + 1)@##@@get the platform OS name##$$##platform.system()@##@@sort list `a` in ascending order based on its elements' float values##$$##a = sorted(a, key=lambda x: float(x))@##@@finding words in string `s` after keyword 'name'##$$##re.search('name (.*)', s)@##@@Find all records from collection `collection` without extracting mongo id `_id`##$$##db.collection.find({}, {'_id': False})@##@@Get all the second values from a list of lists `A`##$$##[row[1] for row in A]@##@@extract first column from a multi-dimensional array `a`##$$##[row[0] for row in a]@##@@sort list `['10', '3', '2']` in ascending order based on the integer value of its elements##$$##sorted(['10', '3', '2'], key=int)@##@@check if file `filename` is descendant of directory '/the/dir/'##$$##os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'@##@@check if any element of list `substring_list` are in string `string`##$$##any(substring in string for substring in substring_list)@##@@construct pandas dataframe from a list of tuples##$$##df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])@##@@find and replace 2nd occurrence of word 'cat' by 'Bull' in a sentence 's'##$$##re.sub('^((?:(?!cat).)*cat(?:(?!cat).)*)cat', '\\1Bull', s)@##@@find and replace 2nd occurrence of word 'cat' by 'Bull' in a sentence 's'##$$##re.sub('^((.*?cat.*?){1})cat', '\\1Bull', s)@##@@sort list of strings in list `the_list` by integer suffix##$$##sorted(the_list, key=lambda k: int(k.split('_')[1]))@##@@sort list of strings `the_list` by integer suffix before "_"##$$##sorted(the_list, key=lambda x: int(x.split('_')[1]))@##@@make a list of lists in which each list `g` are the elements from list `test` which have the same characters up to the first `_` character##$$##[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]@##@@None##$$##[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]@##@@Load the url `http://www.google.com` in selenium webdriver `driver`##$$##driver.get('http://www.google.com')@##@@using python's datetime module, get the year that utc-11 is currently in##$$##(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year@##@@Get the difference between two lists `[1, 2, 2, 2, 3]` and `[1, 2]` that may have duplicate values##$$##Counter([1, 2, 2, 2, 3]) - Counter([1, 2])@##@@remove tags from a string `mystring`##$$##re.sub('<[^>]*>', '', mystring)@##@@encode string `data` as `hex`##$$##data.encode('hex')@##@@filter `Users` by field `userprofile` with level greater than or equal to `0`##$$##User.objects.filter(userprofile__level__gte=0)@##@@BeautifulSoup find a tag whose id ends with string 'para'##$$##soup.findAll(id=re.compile('para$'))@##@@select `div` tags whose `id`s begin with `value_xxx_c_1_f_8_a_`##$$##soup.select('div[id^="value_xxx_c_1_f_8_a_"]')@##@@delete an item `thing` in a list `some_list` if it exists##$$##cleaned_list = [x for x in some_list if x is not thing]@##@@print "Please enter something: " to console, and read user input to `var`##$$##var = input('Please enter something: ')@##@@append 4 to list `foo`##$$##foo.append(4)@##@@append a list [8, 7] to list `foo`##$$##foo.append([8, 7])@##@@insert 77 to index 2 of list `x`##$$##x.insert(2, 77)@##@@remove white space padding around a saved image `test.png` in matplotlib##$$##plt.savefig('test.png', bbox_inches='tight')@##@@concatenate lists `listone` and `listtwo`##$$##(listone + listtwo)@##@@iterate items in lists `listone` and `listtwo`##$$##for item in itertools.chain(listone, listtwo):
    pass@##@@create dataframe `males` containing data of dataframe `df` where column `Gender` is equal to 'Male' and column `Year` is equal to 2014##$$##males = df[(df[Gender] == 'Male') & (df[Year] == 2014)]@##@@print backslash##$$##print('\\')@##@@replace '-' in pandas dataframe `df` with `np.nan`##$$##df.replace('-', np.nan)@##@@delete column 'column_name' from dataframe `df`##$$##df = df.drop('column_name', 1)@##@@delete 1st, 2nd and 4th columns from dataframe `df`##$$##df.drop(df.columns[[0, 1, 3]], axis=1)@##@@delete a column `column_name` without having to reassign from pandas data frame `df`##$$##df.drop('column_name', axis=1, inplace=True)@##@@disable abbreviation in argparse##$$##parser = argparse.ArgumentParser(allow_abbrev=False)@##@@extract dictionary values by key 'Feature3' from data frame `df`##$$##feature3 = [d.get('Feature3') for d in df.dic]@##@@get data of column 'A' and column 'B' in dataframe `df` where column 'A' is equal to 'foo'##$$##df.loc[gb.groups['foo'], ('A', 'B')]@##@@print '[1, 2, 3]'##$$##print('[%s, %s, %s]' % (1, 2, 3))@##@@Display `1 2 3` as a list of string##$$##print('[{0}, {1}, {2}]'.format(1, 2, 3))@##@@get values from a dictionary `my_dict` whose key contains the string `Date`##$$##[v for k, v in list(my_dict.items()) if 'Date' in k]@##@@None##$$##"""{0.month}/{0.day}/{0.year}""".format(my_date)@##@@drop a single subcolumn 'a' in column 'col1' from a dataframe `df`##$$##df.drop(('col1', 'a'), axis=1)@##@@dropping all columns named 'a' from a multiindex 'df', across all level.##$$##df.drop('a', level=1, axis=1)@##@@build dictionary with keys of dictionary `_container` as keys and values of returned value of function `_value` with correlating key as parameter##$$##{_key: _value(_key) for _key in _container}@##@@click on the text button 'section-select-all' using selenium python##$$##browser.find_element_by_class_name('section-select-all').click()@##@@combine two dictionaries `d ` and `d1`, concatenate string values with identical `keys`##$$##dict((k, d.get(k, '') + d1.get(k, '')) for k in keys)@##@@generate unique equal hash for equal dictionaries `a` and `b`##$$##hash(pformat(a)) == hash(pformat(b))@##@@convert nested list of lists `[['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]` into a list of tuples##$$##list(map(tuple, [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]))@##@@sum the column `positions` along the  other columns `stock`, `same1`, `same2` in a pandas data frame `df`##$$##df.groupby(['stock', 'same1', 'same2'], as_index=False)['positions'].sum()@##@@None##$$##df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()@##@@change string `s` to upper case##$$##s.upper()@##@@split a string `s` by ';' and convert to a dictionary##$$##dict(item.split('=') for item in s.split(';'))@##@@Add header `('Cookie', 'cookiename=cookie value')` to mechanize browser `br`##$$##br.addheaders = [('Cookie', 'cookiename=cookie value')]@##@@set data in column 'value' of dataframe `df` equal to first element of each list##$$##df['value'] = df['value'].str[0]@##@@get element at index 0 of each list in column 'value' of dataframe `df`##$$##df['value'] = df['value'].str.get(0)@##@@remove square bracket '[]' from pandas dataframe `df` column 'value'##$$##df['value'] = df['value'].str.strip('[]')@##@@Get a string with string formatting from dictionary `d`##$$##""", """.join(['{}_{}'.format(k, v) for k, v in d.items()])@##@@Sum of sums of each list, in a list of lists named 'lists'.##$$##sum(sum(x) for x in lists)@##@@Check whether a numpy array `a` contains a given row `[1, 2]`##$$##any(np.equal(a, [1, 2]).all(1))@##@@check if all elements in list `mylist` are the same##$$##len(set(mylist)) == 1@##@@split a string `s` at line breaks `\r\n`##$$##[map(int, x.split('\t')) for x in s.rstrip().split('\r\n')]@##@@sort a dictionary `a` by values that are list type##$$##t = sorted(list(a.items()), key=lambda x: x[1])@##@@Search for string 'blabla' in txt file 'example.txt'##$$##if ('blabla' in open('example.txt').read()):
    pass@##@@Search for string 'blabla' in txt file 'example.txt'##$$##f = open('example.txt')
s = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)
if (s.find('blabla') != (-1)):
    pass@##@@Search for string `blabla` in txt file 'example.txt'##$$##datafile = file('example.txt')
found = False
for line in datafile:
    if (blabla in line):
        return True
return False@##@@insert string `string1` after each character of `string2`##$$##string2.replace('', string1)[len(string1):-len(string1)]@##@@getting every possible combination of two elements in a list##$$##list(itertools.combinations([1, 2, 3, 4, 5, 6], 2))@##@@get a utf-8 string literal representation of byte string `x`##$$##"""x = {}""".format(x.decode('utf8')).encode('utf8')@##@@check if `x` is an integer##$$##isinstance(x, int)@##@@check if `x` is an integer##$$##(type(x) == int)@##@@play the wav file 'sound.wav'##$$##winsound.PlaySound('sound.wav', winsound.SND_FILENAME)@##@@create a list containing the `n` next values of generator `it`##$$##[next(it) for _ in range(n)]@##@@get list of n next values of a generator `it`##$$##list(itertools.islice(it, 0, n, 1))@##@@compare two lists in python `a` and `b` and return matches##$$##set(a).intersection(b)@##@@None##$$##[i for i, j in zip(a, b) if i == j]@##@@convert list `data` into a string of its elements##$$##print(''.join(map(str, data)))@##@@match regex pattern '\\$[0-9]+[^\\$]*$' on string '$1 off delicious $5 ham.'##$$##re.match('\\$[0-9]+[^\\$]*$', '$1 off delicious $5 ham.')@##@@import a nested module `c.py` within `b` within `a` with importlib##$$##importlib.import_module('.c', 'a.b')@##@@import a module 'a.b.c' with importlib.import_module in python 2##$$##importlib.import_module('a.b.c')@##@@Convert array `a` to numpy array##$$##a = np.array(a)@##@@Find all `div` tags whose classes has the value `comment-` in a beautiful soup object `soup`##$$##soup.find_all('div', class_=re.compile('comment-'))@##@@a sequence of empty lists of length `n`##$$##[[] for _ in range(n)]@##@@create dictionary from list of variables 'foo' and 'bar' already defined##$$##dict((k, globals()[k]) for k in ('foo', 'bar'))@##@@get two random records from model 'MyModel' in Django##$$##MyModel.objects.order_by('?')[:2]@##@@Print a dictionary `{'user': {'name': 'Markus'}}` with string formatting##$$##"""Hello {user[name]}""".format(**{'user': {'name': 'Markus'}})@##@@create a dictionary `list_dict` containing each tuple in list `tuple_list` as values and the tuple's first element as the corresponding key##$$##list_dict = {t[0]: t for t in tuple_list}@##@@Generate a random integer between 0 and 9##$$##randint(0, 9)@##@@Generate a random integer between `a` and `b`##$$##random.randint(a, b)@##@@Generate random integers between 0 and 9##$$##print((random.randint(0, 9)))@##@@reverse a string `a` by 2 characters at a time##$$##"""""".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))@##@@transform time series `df` into a pivot table aggregated by column 'Close' using column `df.index.date` as index and values of column `df.index.time` as columns##$$##pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')@##@@check if the third element of all the lists in a list "items" is equal to zero.##$$##any(item[2] == 0 for item in items)@##@@Find all the lists from a lists of list 'items' if third element in all sub-lists is '0'##$$##[x for x in items if x[2] == 0]@##@@sort dictionary of dictionaries `dic` according to the key 'Fisher'##$$##sorted(list(dic.items()), key=lambda x: x[1]['Fisher'], reverse=True)@##@@plot a data logarithmically in y axis##$$##plt.yscale('log', nonposy='clip')@##@@None##$$##map(int, re.findall('\\d+', s))@##@@list the contents of a directory '/home/username/www/'##$$##os.listdir('/home/username/www/')@##@@list all the contents of the directory 'path'.##$$##os.listdir('path')@##@@merge a pandas data frame `distancesDF` and column `dates` in pandas data frame `datesDF` into single##$$##pd.concat([distancesDF, datesDF.dates], axis=1)@##@@get value of first index of each element in list `a`##$$##[x[0] for x in a]@##@@python how to get every first element in 2 dimensional list `a`##$$##[i[0] for i in a]@##@@remove line breaks from string `textblock` using regex##$$##re.sub('(?<=[a-z])\\r?\\n', ' ', textblock)@##@@Open gzip-compressed file encoded as utf-8 'file.gz' in text mode##$$##gzip.open('file.gz', 'rt', encoding='utf-8')@##@@test if either of strings `a` or `b` are members of the set of strings, `['b', 'a', 'foo', 'bar']`##$$##set(['a', 'b']).issubset(['b', 'a', 'foo', 'bar'])@##@@Check if all the values in a list `['a', 'b']` are present in another list `['b', 'a', 'foo', 'bar']`##$$##all(x in ['b', 'a', 'foo', 'bar'] for x in ['a', 'b'])@##@@Remove characters "!@#$" from a string `line`##$$##line.translate(None, '!@#$')@##@@Remove characters "!@#$" from a string `line`##$$##line = re.sub('[!@#$]', '', line)@##@@Remove string "1" from string `string`##$$##string.replace('1', '')@##@@Remove character `char` from a string `a`##$$##a = a.replace(char, '')@##@@Remove characters in `b` from a string `a`##$$##a = a.replace(char, '')@##@@Remove characters in '!@#$' from a string `line`##$$##line = line.translate(string.maketrans('', ''), '!@#$')@##@@binarize the values in columns of list `order` in a pandas data frame##$$##pd.concat([df, pd.get_dummies(df, '', '').astype(int)], axis=1)[order]@##@@store integer 3, 4, 1 and 2 in a list##$$##[3, 4, 1, 2]@##@@define global variable `something` with value `bob`##$$##globals()['something'] = 'bob'@##@@insert spaces before capital letters in string `text`##$$##re.sub('([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', '\\1 ', text)@##@@print unicode string `ex\xe1mple` in uppercase##$$##print('ex\xe1mple'.upper())@##@@get last element of string splitted by '\\' from list of strings `list_dirs`##$$##[l.split('\\')[-1] for l in list_dirs]@##@@combine two sequences into a dictionary##$$##dict(zip(keys, values))@##@@customize the time format in python logging##$$##formatter = logging.Formatter('%(asctime)s;%(levelname)s;%(message)s')@##@@Replace comma with dot in a string `original_string` using regex##$$##new_string = re.sub('"(\\d+),(\\d+)"', '\\1.\\2', original_string)@##@@call a function `otherfunc` inside a bash script `test.sh` using subprocess##$$##subprocess.call('test.sh otherfunc')@##@@None##$$##subprocess.Popen(['bash', '-c', '. foo.sh; go'])@##@@remove multiple spaces in a string `foo`##$$##""" """.join(foo.split())@##@@convert decimal 8 to a list of its binary values##$$##list('{0:0b}'.format(8))@##@@convert decimal integer 8 to a list of its binary values as elements##$$##[int(x) for x in list('{0:0b}'.format(8))]@##@@convert decimal `8` to binary list##$$##[int(x) for x in bin(8)[2:]]@##@@get key-value pairs in dictionary `my_dictionary` for all keys in list `my_list` in the order they appear in `my_list`##$$##dict(zip(my_list, map(my_dictionary.get, my_list)))@##@@cartesian product of `x` and `y` array points into single array of 2d points##$$##numpy.dstack(numpy.meshgrid(x, y)).reshape(-1, 2)@##@@selenium wait for driver `driver` 60 seconds before throwing a NoSuchElementExceptions exception##$$##driver.implicitly_wait(60)@##@@selenium webdriver switch to frame 'frameName'##$$##driver.switch_to_frame('frameName')@##@@format current date to pattern '{%Y-%m-%d %H:%M:%S}'##$$##time.strftime('{%Y-%m-%d %H:%M:%S}')@##@@sort list `['14:10:01', '03:12:08']`##$$##sorted(['14:10:01', '03:12:08'])@##@@find all occurrences of regex pattern '(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)' in string `x`##$$##re.findall('(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)', x)@##@@remove duplicate rows from dataframe `df1` and calculate their frequency##$$##df1.groupby(['key', 'year']).size().reset_index()@##@@sort dictionary `dictionary` in ascending order by its values##$$##sorted(list(dictionary.items()), key=operator.itemgetter(1))@##@@Iterate over dictionary `d` in ascending order of values##$$##sorted(iter(d.items()), key=lambda x: x[1])@##@@iterate over a python dictionary, ordered by values##$$##sorted(list(dictionary.items()), key=lambda x: x[1])@##@@split 1d array `a` into 2d array at the last element##$$##np.split(a, [-1])@##@@convert dataframe `df` into a pivot table using column 'order' as index and values of column 'sample' as columns##$$##df.pivot(index='order', columns='sample')@##@@select all rows from pandas DataFrame 'df' where the value in column 'A' is greater than 1 or less than -1 in column 'B'.##$$##df[(df['A'] > 1) | (df['B'] < -1)]@##@@Get the zip output as list from the lists `[1, 2, 3]`, `[4, 5, 6]`, `[7, 8, 9]`##$$##[list(a) for a in zip([1, 2, 3], [4, 5, 6], [7, 8, 9])]@##@@select rows of dataframe `df` whose value for column `A` is `foo`##$$##print(df.loc[df['A'] == 'foo'])@##@@select rows whose column value in column `column_name` does not equal `some_value` in pandas data frame##$$##df.loc[df['column_name'] != some_value]@##@@select rows from a dataframe `df` whose value for column `column_name` is not in `some_values`##$$##df.loc[~df['column_name'].isin(some_values)]@##@@select all rows whose values in a column `column_name` equals a scalar `some_value` in pandas data frame object `df`##$$##df.loc[df['column_name'] == some_value]@##@@Select rows whose value of the "B" column is "one" or "three" in the DataFrame `df`##$$##print(df.loc[df['B'].isin(['one', 'three'])])@##@@repeat every character for 7 times in string 'map'##$$##"""""".join(map(lambda x: x * 7, 'map'))@##@@delete an empty directory##$$##os.rmdir()@##@@recursively delete all contents in directory `path`##$$##shutil.rmtree(path, ignore_errors=False, onerror=None)@##@@recursively remove folder `name`##$$##os.removedirs(name)@##@@Add row `['8/19/2014', 'Jun', 'Fly', '98765']` to dataframe `df`##$$##df.loc[len(df)] = ['8/19/2014', 'Jun', 'Fly', '98765']@##@@list all files in a current directory##$$##glob.glob('*')@##@@List all the files that doesn't contain the name `hello`##$$##glob.glob('[!hello]*.txt')@##@@List all the files that matches the pattern `hello*.txt`##$$##glob.glob('hello*.txt')@##@@evaluate the expression '20<30'##$$##eval('20<30')@##@@Copy list `old_list` and name it `new_list`##$$##new_list = [x[:] for x in old_list]@##@@convert scientific notation of variable `a` to decimal##$$##"""{:.50f}""".format(float(a[0] / a[1]))@##@@convert dataframe `df` to integer-type sparse object##$$##df.to_sparse(0)@##@@display attribute `attr` for each object `obj` in list `my_list_of_objs`##$$##print([obj.attr for obj in my_list_of_objs])@##@@count the number of True values associated with key 'success' in dictionary `d`##$$##sum(1 if d['success'] else 0 for d in s)@##@@get the sum of values associated with the key ‘success’ for a list of dictionaries `s`##$$##sum(d['success'] for d in s)@##@@get complete path of a module named `os`##$$##imp.find_module('os')[1]@##@@get logical xor of `a` and `b`##$$##(bool(a) != bool(b))@##@@get logical xor of `a` and `b`##$$##((a and (not b)) or ((not a) and b))@##@@get logical xor of `a` and `b`##$$##(bool(a) ^ bool(b))@##@@get logical xor of `a` and `b`##$$##xor(bool(a), bool(b))@##@@get the logical xor of two variables `str1` and `str2`##$$##return (bool(str1) ^ bool(str2))@##@@Sort list `my_list` in alphabetical order based on the values associated with key 'name' of each dictionary in the list##$$##my_list.sort(key=operator.itemgetter('name'))@##@@split a string `a , b; cdf`  using both commas and semicolons as delimeters##$$##re.split('\\s*,\\s*|\\s*;\\s*', 'a , b; cdf')@##@@Split a string `string` by multiple separators `,` and `;`##$$##[t.strip() for s in string.split(',') for t in s.split(';')]@##@@make a function `f` that calculates the sum of two integer variables `x` and `y`##$$##f = lambda x, y: x + y@##@@Create list `instancelist` containing 29 objects of type MyClass##$$##instancelist = [MyClass() for i in range(29)]@##@@Make a dictionary from list `f` which is in the format of four sets of  "val, key, val"##$$##{f[i + 1]: [f[i], f[i + 2]] for i in range(0, len(f), 3)}@##@@convert bytes string `s`  to an unsigned integer##$$##struct.unpack('>q', s)[0]@##@@concatenate a series `students` onto a dataframe `marks` with pandas##$$##pd.concat([students, pd.DataFrame(marks)], axis=1)@##@@Sort list `alist` in ascending order based on each of its elements' attribute `foo`##$$##alist.sort(key=lambda x: x.foo)@##@@BeautifulSoup select 'div' elements with an id attribute value ending with sub-string '_answer' in HTML parsed string `soup`##$$##soup.select('div[id$=_answer]')@##@@sympy solve matrix of linear equations `(([1, 1, 1, 1], [1, 1, 2, 3]))` with variables `(x, y, z)`##$$##linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))@##@@best way to extract subset of key-value pairs with keys matching 'l', 'm', or 'n' from python dictionary object##$$##{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}@##@@extract subset of key-value pairs with keys as `('l', 'm', 'n')` from dictionary object `bigdict`##$$##dict((k, bigdict[k]) for k in ('l', 'm', 'n'))@##@@Get items from a dictionary `bigdict` where the keys are present in `('l', 'm', 'n')`##$$##{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}@##@@Extract subset of key value pair for keys 'l', 'm', 'n' from `bigdict` in python 3##$$##{k: bigdict[k] for k in ('l', 'm', 'n')}@##@@Selenium get the entire `driver` page text##$$##driver.page_source@##@@extracting column `1` and `9` from array `data`##$$##data[:, ([1, 9])]@##@@remove all square brackets from string 'abcd[e]yth[ac]ytwec'##$$##re.sub('\\[.*?\\]', '', 'abcd[e]yth[ac]ytwec')@##@@None##$$##root.geometry('500x500')@##@@find all substrings in string `mystring` composed only of letters `a` and `b` where each `a` is directly preceded and succeeded by `b`##$$##re.findall('\\b(?:b+a)+b+\\b', mystring)@##@@convert list `lst` of tuples of floats to list `str_list` of tuples of strings of floats in scientific notation with eight decimal point precision##$$##str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]@##@@convert list of sublists `lst` of floats to a list of sublists `str_list` of strings of integers in scientific notation with 8 decimal points##$$##str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]@##@@Create a tuple `t` containing first element of each tuple in tuple `s`##$$##t = tuple(x[0] for x in s)@##@@obtain the current day of the week in a 3 letter format from a datetime object##$$##datetime.datetime.now().strftime('%a')@##@@get the ASCII value of a character 'a' as an int##$$##ord('a')@##@@get the ASCII value of a character u'あ' as an int##$$##ord('\u3042')@##@@get the ASCII value of a character as an int##$$##ord()@##@@decode JSON string `u` to a dictionary##$$##json.load(u)@##@@Delete mulitple columns `columnheading1`, `columnheading2` in pandas data frame `yourdf`##$$##yourdf.drop(['columnheading1', 'columnheading2'], axis=1, inplace=True)@##@@get a list of of elements resulting from splitting user input by commas and stripping white space from each resulting string `s`##$$##[s.strip() for s in input().split(',')]@##@@create a list containing the digits values from binary string `x` as elements##$$##[int(d) for d in str(bin(x))[2:]]@##@@get the max string length in list `i`##$$##max(len(word) for word in i)@##@@get the maximum string length in nested list `i`##$$##len(max(i, key=len))@##@@execute os command `my_cmd`##$$##os.system(my_cmd)@##@@sort list `mylist` alphabetically##$$##mylist.sort(key=lambda x: x.lower())@##@@sort list `mylist` in alphabetical order##$$##mylist.sort(key=str.lower)@##@@sort a list of strings 'mylist'.##$$##mylist.sort()@##@@sort a list of strings `list`##$$##list.sort()@##@@Set multi index on columns 'Company' and 'date' of data frame `df` in pandas.##$$##df.set_index(['Company', 'date'], inplace=True)@##@@get the attribute `x` from object `your_obj`##$$##getattr(your_obj, x)@##@@remove first word in string `s`##$$##s.split(' ', 1)[1]@##@@save xlsxwriter file in 'app/smth1/smth2/Expenses01.xlsx' path and assign to variable `workbook`##$$##workbook = xlsxwriter.Workbook('app/smth1/smth2/Expenses01.xlsx')@##@@save xlsxwriter file to 'C:/Users/Steven/Documents/demo.xlsx' path##$$##workbook = xlsxwriter.Workbook('C:/Users/Steven/Documents/demo.xlsx')@##@@change legend size to 'x-small' in upper-left location##$$##pyplot.legend(loc=2, fontsize='x-small')@##@@change legend font size with matplotlib.pyplot to 6##$$##plot.legend(loc=2, prop={'size': 6})@##@@split list `l` into `n` sized lists##$$##[l[i:i + n] for i in range(0, len(l), n)]@##@@split a list `l` into evenly sized chunks `n`##$$##[l[i:i + n] for i in range(0, len(l), n)]@##@@check if character '-' exists in a dataframe `df` cell 'a'##$$##df['a'].str.contains('-')@##@@remove all non -word, -whitespace, or -apostrophe characters from string `doesn't this mean it -technically- works?`##$$##re.sub("[^\\w' ]", '', "doesn't this mean it -technically- works?")@##@@find all digits between two characters `\xab` and `\xbb`in a string `text`##$$##print(re.findall('\\d+', '\n'.join(re.findall('\xab([\\s\\S]*?)\xbb', text))))@##@@plot data of column 'index' versus column 'A' of dataframe `monthly_mean` after resetting its index##$$##monthly_mean.reset_index().plot(x='index', y='A')@##@@get the output of a subprocess command `echo "foo"` in command line##$$##subprocess.check_output('echo "foo"', shell=True)@##@@Encode each value to 'UTF8' in the list `EmployeeList`##$$##[x.encode('UTF8') for x in EmployeeList]@##@@combine two columns `foo` and `bar` in a pandas data frame##$$##pandas.concat([df['foo'].dropna(), df['bar'].dropna()]).reindex_like(df)@##@@generate a list of consecutive integers from 0 to 8##$$##list(range(9))@##@@convert list `myintegers` into a unicode string##$$##"""""".join(chr(i) for i in myintegers)@##@@inherit from class `Executive`##$$##super(Executive, self).__init__(*args)@##@@Remove the string value `item` from a list of strings `my_sequence`##$$##[item for item in my_sequence if item != 'item']@##@@randomly select an item from list `foo`##$$##random.choice(foo)@##@@check if all of the following items in list `['a', 'b']` are in a list `['a', 'b', 'c']`##$$##set(['a', 'b']).issubset(['a', 'b', 'c'])@##@@Check if all the items in a list `['a', 'b']` exists in another list `l`##$$##set(['a', 'b']).issubset(set(l))@##@@set the stdin of the process 'grep f' to be b'one\ntwo\nthree\nfour\nfive\nsix\n'##$$##p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)
grep_stdout = p.communicate(input='one\ntwo\nthree\nfour\nfive\nsix\n')[0]@##@@set the stdin of the process 'grep f' to be 'one\ntwo\nthree\nfour\nfive\nsix\n'##$$##p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)
p.stdin.write('one\ntwo\nthree\nfour\nfive\nsix\n')
p.communicate()[0]
p.stdin.close()@##@@to convert a list of tuples `list_of_tuples` into list of lists##$$##[list(t) for t in zip(*list_of_tuples)]@##@@group a list `list_of_tuples` of tuples by values##$$##zip(*list_of_tuples)@##@@merge pandas dataframe `x` with columns 'a' and 'b' and dataframe `y` with column 'y'##$$##pd.merge(y, x, on='k')[['a', 'b', 'y']]@##@@Split string with comma (,) and remove whitespace from a string 'my_string'##$$##[item.strip() for item in my_string.split(',')]@##@@Get all object attributes of object `obj`##$$##print((obj.__dict__))@##@@Get all object attributes of an object##$$##dir()@##@@Get all object attributes of an object##$$##dir()@##@@pygobject center window `window`##$$##window.set_position(Gtk.WindowPosition.CENTER)@##@@change the size of the sci notation to '30' above the y axis in matplotlib `plt`##$$##plt.rc('font', **{'size': '30'})@##@@check if datafram `df` has any NaN vlaues##$$##df.isnull().values.any()@##@@unpack the arguments out of list `params` to function `some_func`##$$##some_func(*params)@##@@decode encodeuricomponent in GAE##$$##urllib.parse.unquote(h.path.encode('utf-8')).decode('utf-8')@##@@get proportion of rows in dataframe `trace_df` whose values for column `ratio` are greater than 0##$$##(trace_df['ratio'] > 0).mean()@##@@convert a set of tuples `queryresult` to a string `emaillist`##$$##emaillist = '\n'.join(item[0] for item in queryresult)@##@@convert a set of tuples `queryresult` to a list of strings##$$##[item[0] for item in queryresult]@##@@convert a list of tuples `queryresult` to a string from the first indexes.##$$##emaillist = '\n'.join([item[0] for item in queryresult])@##@@get the widget which has currently the focus in tkinter instance `window2`##$$##print(('focus object class:', window2.focus_get().__class__))@##@@Initialize a list `a` with `10000` items and each item's value `0`##$$##a = [0] * 10000@##@@Keep only unique words in list of words `words` and join into string##$$##print(' '.join(sorted(set(words), key=words.index)))@##@@generate 6 random numbers between 1 and 50##$$##random.sample(range(1, 50), 6)@##@@generate six unique random numbers in the range of 1 to 49.##$$##random.sample(range(1, 50), 6)@##@@lowercase keys and values in dictionary `{'My Key': 'My Value'}`##$$##{k.lower(): v.lower() for k, v in list({'My Key': 'My Value'}.items())}@##@@lowercase all keys and values in dictionary `{'My Key': 'My Value'}`##$$##dict((k.lower(), v) for k, v in {'My Key': 'My Value'}.items())@##@@Convert each key,value pair in a dictionary `{'My Key': 'My Value'}` to lowercase##$$##dict((k.lower(), v.lower()) for k, v in {'My Key': 'My Value'}.items())@##@@sorting the lists in list of lists `data`##$$##[sorted(item) for item in data]@##@@SQLite get a list of column names from cursor object `cursor`##$$##names = list(map(lambda x: x[0], cursor.description))@##@@get the absolute path of a running python script##$$##os.path.abspath(__file__)@##@@sort 2d array `matrix` by row with index 1##$$##sorted(matrix, key=itemgetter(1))@##@@Get all indexes of a letter `e` from a string `word`##$$##[index for index, letter in enumerate(word) if letter == 'e']@##@@decode utf-8 code `x` into a raw unicode literal##$$##print(str(x).decode('raw_unicode_escape'))@##@@split string 'abcdefg' into a list of characters##$$##re.findall('\\w', 'abcdefg')@##@@check whether a file `fname` exists##$$##os.path.isfile(fname)@##@@check whether file "/path/to/file" exists##$$##my_file = Path('/path/to/file')
if my_file.is_file():
    pass@##@@check whether file `file_path` exists##$$##os.path.exists(file_path)@##@@check whether a file "/etc/password.txt" exists##$$##print(os.path.isfile('/etc/password.txt'))@##@@check whether a file "/etc" exists##$$##print(os.path.isfile('/etc'))@##@@check whether a path "/does/not/exist" exists##$$##print(os.path.exists('/does/not/exist'))@##@@check whether a file "/does/not/exist" exists##$$##print(os.path.isfile('/does/not/exist'))@##@@check whether a path "/etc" exists##$$##print(os.path.exists('/etc'))@##@@check whether a path "/etc/password.txt" exists##$$##print(os.path.exists('/etc/password.txt'))@##@@split string "a;bcd,ef g" on delimiters ';' and ','##$$##"""a;bcd,ef g""".replace(';', ' ').replace(',', ' ').split()@##@@get a list each value `i` in the implicit tuple `range(3)`##$$##list(i for i in range(3))@##@@add field names as headers in csv constructor `writer`##$$##writer.writeheader()@##@@flatten a tuple `l`##$$##[(a, b, c) for a, (b, c) in l]@##@@convert 3652458 to string represent a 32bit hex number##$$##"""0x{0:08X}""".format(3652458)@##@@convert a python dictionary `d` to a list of tuples##$$##[(v, k) for k, v in list(d.items())]@##@@convert dictionary of pairs `d` to a list of tuples##$$##[(v, k) for k, v in d.items()]@##@@convert python 2 dictionary `a` to a list of tuples where the value is the first tuple element and the key is the second tuple element##$$##[(v, k) for k, v in a.items()]@##@@convert a python dictionary 'a' to a list of tuples##$$##[(k, v) for k, v in a.items()]@##@@convert a list of hex byte strings `['BB', 'A7', 'F6', '9E']` to a list of hex integers##$$##[int(x, 16) for x in ['BB', 'A7', 'F6', '9E']]@##@@convert the elements of list `L` from hex byte strings to hex integers##$$##[int(x, 16) for x in L]@##@@assign values to two variables, `var1` and `var2` from user input response to `'Enter two numbers here: ` split on whitespace##$$##var1, var2 = input('Enter two numbers here: ').split()@##@@Filter a json from a key-value pair as `{'fixed_key_1': 'foo2'}` in Django##$$##Test.objects.filter(actions__contains=[{'fixed_key_1': 'foo2'}])@##@@create a list containing a four elements long tuples of permutations of binary values##$$##itertools.product(list(range(2)), repeat=4)@##@@get yesterday's date as a string in `YYYY-MM-DD` format using timedelta##$$##(datetime.now() - timedelta(1)).strftime('%Y-%m-%d')@##@@Get the dot product of matrix `[1,0,0,1,0,0]` and matrix `[[0,1],[1,1],[1,0],[1,0],[1,1],[0,1]]`##$$##np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])@##@@convert date strings in pandas dataframe column`df['date']` to pandas timestamps using the format '%d%b%Y'##$$##df['date'] = pd.to_datetime(df['date'], format='%d%b%Y')@##@@Importing file `file` from folder '/path/to/application/app/folder'##$$##sys.path.insert(0, '/path/to/application/app/folder')
import file@##@@do a `left` merge of dataframes `x` and `y` on the column `state` and sort by `index`##$$##x.reset_index().merge(y, how='left', on='state', sort=False).sort('index')@##@@Create a default empty json object if no json is available in request parameter `mydata`##$$##json.loads(request.POST.get('mydata', '{}'))@##@@get a list of tuples of every three consecutive items in list `[1, 2, 3, 4, 5, 6, 7, 8, 9]`##$$##list(zip(*((iter([1, 2, 3, 4, 5, 6, 7, 8, 9]),) * 3)))@##@@slice list `[1, 2, 3, 4, 5, 6, 7]` into lists of two elements each##$$##list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))@##@@None##$$##[input[i:i + n] for i in range(0, len(input), n)]@##@@Sort list `keys` based on its elements' dot-seperated numbers##$$##keys.sort(key=lambda x: map(int, x.split('.')))@##@@Sort a list of integers `keys` where each value is in string format##$$##keys.sort(key=lambda x: [int(y) for y in x.split('.')])@##@@convert a 3d array `img` of dimensions 4x2x3 to a 2d array   of dimensions 3x8##$$##img.transpose(2, 0, 1).reshape(3, -1)@##@@replacing 'ABC' and 'AB' values in column 'BrandName' of dataframe `df` with 'A'##$$##df['BrandName'].replace(['ABC', 'AB'], 'A')@##@@replace values `['ABC', 'AB']` in a column 'BrandName' of  pandas dataframe `df` with another value 'A'##$$##df['BrandName'] = df['BrandName'].replace(['ABC', 'AB'], 'A')@##@@Subtract the mean of each row in dataframe `df` from the corresponding row's elements##$$##df.sub(df.mean(axis=1), axis=0)@##@@remove all non-alphabet chars from string `s`##$$##"""""".join([i for i in s if i.isalpha()])@##@@split a string `s` into integers##$$##l = (int(x) for x in s.split())@##@@split a string `42 0` by white spaces.##$$##"""42 0""".split()@##@@None##$$##map(int, '42 0'.split())@##@@get indexes of all true boolean values from a list `bool_list`##$$##[i for i, elem in enumerate(bool_list, 1) if elem]@##@@group dataframe `data` entries by year value of the date in column 'date'##$$##data.groupby(data['date'].map(lambda x: x.year))@##@@Get the indices in array `b` of each element appearing in array `a`##$$##np.in1d(b, a).nonzero()[0]@##@@display current time in readable format##$$##time.strftime('%l:%M%p %z on %b %d, %Y')@##@@rotate x-axis text labels of plot `ax` 45 degrees##$$##ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)@##@@append array of strings `['x', 'x', 'x']` into one string##$$##"""""".join(['x', 'x', 'x'])@##@@retrieve all items in an numpy array 'x' except the item of the index 1##$$##x[(np.arange(x.shape[0]) != 1), :, :]@##@@pull a value with key 'name' from a json object `item`##$$##print(item['name'])@##@@read a file from redirected stdin and save to variable `result`##$$##result = sys.stdin.read()@##@@Get all the texts without tags from beautiful soup object `soup`##$$##"""""".join(soup.findAll(text=True))@##@@extract all rows from dataframe `data` where the value of column 'Value' is True##$$##data[data['Value'] == True]@##@@removing duplicate characters from a string variable "foo"##$$##"""""".join(set(foo))@##@@sort objects in model `Profile` based on Theirs `reputation` attribute##$$##sorted(Profile.objects.all(), key=lambda p: p.reputation)@##@@flatten a dataframe df to a list##$$##df.values.flatten()@##@@sort list `users` using values associated with key 'id' according to elements in list `order`##$$##users.sort(key=lambda x: order.index(x['id']))@##@@sort a python list of dictionaries `users` by a given list `order` of ids 'id' with the desired order##$$##users.sort(key=lambda x: order.index(x['id']))@##@@request URI '<MY_URI>' and pass authorization token 'TOK:<MY_TOKEN>' to the header##$$##r = requests.get('<MY_URI>', headers={'Authorization': 'TOK:<MY_TOKEN>'})@##@@un-escape a backslash-escaped string in `Hello,\\nworld!`##$$##print('"Hello,\\nworld!"'.decode('string_escape'))@##@@match regex pattern 'a*?bc*?' on string 'aabcc' with DOTALL enabled##$$##re.findall('a*?bc*?', 'aabcc', re.DOTALL)@##@@get second array column length of array `a`##$$##a.shape[1]@##@@use operations like max/min within a row to a dataframe 'd' in pandas##$$##d.apply(lambda row: min([row['A'], row['B']]) - row['C'], axis=1)@##@@count number of occurrences of a substring 'ab' in a string "abcdabcva"##$$##"""abcdabcva""".count('ab')@##@@get a list of values with key 'key' from a list of dictionaries `l`##$$##[d['key'] for d in l if 'key' in d]@##@@get a list of values for key 'key' from a list of dictionaries `l`##$$##[d['key'] for d in l]@##@@get a list of values for key "key" from a list of dictionaries in `l`##$$##[d['key'] for d in l]@##@@order a list of lists `l1` by the first value##$$##l1.sort(key=lambda x: int(x[0]))@##@@order a list of lists `[[1, 'mike'], [1, 'bob']]` by the first value of individual list##$$##sorted([[1, 'mike'], [1, 'bob']])@##@@replace a string `Abc` in case sensitive way using maketrans##$$##"""Abc""".translate(maketrans('abcABC', 'defDEF'))@##@@dictionary `d` to string, custom format##$$##"""<br/>""".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])@##@@None##$$##self.writer.writerow([str(s).encode('utf-8') for s in row])@##@@clear terminal screen on windows##$$##os.system('cls')@##@@clear the terminal screen in Linux##$$##os.system('clear')@##@@execute external commands/script `your_own_script` with csh instead of bash##$$##os.system('tcsh your_own_script')@##@@execute command 'echo $0' in Z shell##$$##os.system("zsh -c 'echo $0'")@##@@update a list `l1` dictionaries with a key `count` and value from list `l2`##$$##[dict(d, count=n) for d, n in zip(l1, l2)]@##@@create a list with the sum of respective elements of the tuples of list `l`##$$##[sum(x) for x in zip(*l)]@##@@sum each value in a list `l` of tuples##$$##map(sum, zip(*l))@##@@count the number of non-nan elements in a numpy ndarray matrix `data`##$$##np.count_nonzero(~np.isnan(data))@##@@Convert each list in list `main_list` into a tuple##$$##map(list, zip(*main_list))@##@@django get the value of key 'title' from POST request `request` if exists, else return empty string ''##$$##request.POST.get('title', '')@##@@check if string `test.mp3` ends with one of the strings from a tuple `('.mp3', '.avi')`##$$##"""test.mp3""".endswith(('.mp3', '.avi'))@##@@split a string 's' by space while ignoring spaces within square braces and quotes.##$$##re.findall('\\[[^\\]]*\\]|"[^"]*"|\\S+', s)@##@@get biggest 3 values from each column of the pandas dataframe `data`##$$##data.apply(lambda x: sorted(x, 3))@##@@permanently set the current directory to the 'C:/Users/Name/Desktop'##$$##os.chdir('C:/Users/Name/Desktop')@##@@get all characters between two `$` characters in string `string`##$$##re.findall('\\$([^$]*)\\$', string)@##@@getting the string between 2 '$' characters in '$sin (x)$ is an function of x'##$$##re.findall('\\$(.*?)\\$', '$sin (x)$ is an function of x')@##@@Format a date object `str_data` into iso fomrat##$$##datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()@##@@get element at index 0 of first row and element at index 1 of second row in array `A`##$$##A[[0, 1], [0, 1]]@##@@subset numpy array `a` by column and row, returning the values from the first row, first column and the second row, second column and the third row, first column.##$$##a[np.arange(3), (0, 1, 0)]@##@@Get a list of all keys from dictionary `dictA` where the number of occurrences of value `duck` in that key is more than `1`##$$##[k for k, v in dictA.items() if v.count('duck') > 1]@##@@Create sub matrix of a list of lists `[[2, 3, 4], [2, 3, 4], [2, 3, 4]]` (without numpy)##$$##[[2, 3, 4], [2, 3, 4], [2, 3, 4]]@##@@get an element at index `[1,1]`in a numpy array `arr`##$$##print(arr[1, 1])@##@@Set colorbar range from `0` to `15` for pyplot object `quadmesh` in matplotlib##$$##quadmesh.set_clim(vmin=0, vmax=15)@##@@read csv file 'my_file.csv' into numpy array##$$##my_data = genfromtxt('my_file.csv', delimiter=',')@##@@read csv file 'myfile.csv' into array##$$##df = pd.read_csv('myfile.csv', sep=',', header=None)@##@@read csv file 'myfile.csv' into array##$$##np.genfromtxt('myfile.csv', delimiter=',')@##@@read csv file 'myfile.csv' into array##$$##np.genfromtxt('myfile.csv', delimiter=',', dtype=None)@##@@read the first line of a string `my_string`##$$##my_string.splitlines()[0]@##@@None##$$##my_string.split('\n', 1)[0]@##@@generate a list from a pandas dataframe `df` with the column name and column values##$$##df.values.tolist()@##@@Replace repeated instances of a character '*' with a single instance in a string 'text'##$$##re.sub('\\*\\*+', '*', text)@##@@replace repeated instances of "*" with a single instance of "*"##$$##re.sub('\\*+', '*', text)@##@@multiply values of dictionary `dict` with their respective values in dictionary `dict2`##$$##dict((k, v * dict2[k]) for k, v in list(dict1.items()) if k in dict2)@##@@Get a random string of length `length`##$$##return ''.join(random.choice(string.lowercase) for i in range(length))@##@@Get total number of values in a nested dictionary `food_colors`##$$##sum(len(x) for x in list(food_colors.values()))@##@@count all elements in a nested dictionary `food_colors`##$$##sum(len(v) for v in food_colors.values())@##@@apply logical operator 'AND' to all elements in list `a_list`##$$##all(a_list)@##@@removing vowel characters 'aeiouAEIOU' from string `text`##$$##"""""".join(c for c in text if c not in 'aeiouAEIOU')@##@@Divide elements in list `a` from elements at the same index in list `b`##$$##[(x / y) for x, y in zip(a, b)]@##@@match regex 'abc(de)fg(123)' on string 'abcdefg123 and again abcdefg123'##$$##re.findall('abc(de)fg(123)', 'abcdefg123 and again abcdefg123')@##@@apply function `log2` to the grouped values by 'type' in dataframe `df`##$$##df.groupby('type').apply(lambda x: np.mean(np.log2(x['v'])))@##@@get geys of dictionary `my_dict` that contain any values from list `lst`##$$##[key for key, value in list(my_dict.items()) if set(value).intersection(lst)]@##@@get list of keys in dictionary `my_dict` whose values contain values from list `lst`##$$##[key for item in lst for key, value in list(my_dict.items()) if item in value]@##@@Sum elements of tuple `b` to their respective elements of each tuple in list `a`##$$##c = [[(i + j) for i, j in zip(e, b)] for e in a]@##@@get the common prefix from comparing two absolute paths '/usr/var' and '/usr/var2/log'##$$##os.path.commonprefix(['/usr/var', '/usr/var2/log'])@##@@get relative path of path '/usr/var' regarding path '/usr/var/log/'##$$##print(os.path.relpath('/usr/var/log/', '/usr/var'))@##@@filter dataframe `grouped` where the length of each group `x` is bigger than 1##$$##grouped.filter(lambda x: len(x) > 1)@##@@sort dictionary of lists `myDict` by the third item in each list##$$##sorted(list(myDict.items()), key=lambda e: e[1][2])@##@@Format string `hello {name}, how are you {name}, welcome {name}` to be interspersed by `name` three times, specifying the value as `john` only once##$$##"""hello {name}, how are you {name}, welcome {name}""".format(name='john')@##@@reorder indexed rows `['Z', 'C', 'A']` based on a list in pandas data frame `df`##$$##df.reindex(['Z', 'C', 'A'])@##@@check if any values in a list `input_list` is a list##$$##any(isinstance(el, list) for el in input_list)@##@@get the size of list `items`##$$##len(items)@##@@get the size of a list `[1,2,3]`##$$##len([1, 2, 3])@##@@get the size of object `items`##$$##items.__len__()@##@@function to get the size of object##$$##len()@##@@get the size of list `s`##$$##len(s)@##@@sort each row in a pandas dataframe `df` in descending order##$$##df.sort(axis=1, ascending=False)@##@@None##$$##df.sort(df.columns, axis=1, ascending=False)@##@@get count of rows in each series grouped by column 'col5' and column 'col2' of dataframe `df`##$$##df.groupby(['col5', 'col2']).size().groupby(level=1).max()@##@@check if string 'x' is  in list `['x', 'd', 'a', 's', 'd', 's']`##$$##'x' in ['x', 'd', 'a', 's', 'd', 's']@##@@Delete an item with key "key" from `mydict`##$$##mydict.pop('key', None)@##@@Delete an item with key `key` from `mydict`##$$##del mydict[key]@##@@Delete an item with key `key` from `mydict`##$$##try:
    del mydict[key]
except KeyError:
    pass
try:
    del mydict[key]
except KeyError:
    pass@##@@specify multiple positional arguments with argparse##$$##parser.add_argument('input', nargs='+')@##@@Plot using the color code `#112233` in matplotlib pyplot##$$##pyplot.plot(x, y, color='#112233')@##@@strip html from strings##$$##re.sub('<[^<]+?>', '', text)@##@@align values in array `b` to the order of corresponding values in array `a`##$$##a[np.in1d(a, b)]@##@@split string "jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false," on the first occurrence of delimiter '='##$$##"""jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,""".split('=', 1)@##@@print numbers in list `list` with precision of 3 decimal places##$$##print('[%s]' % ', '.join('%.3f' % val for val in list))@##@@format print output of list of floats `l` to print only up to 3 decimal points##$$##print('[' + ', '.join('%5.3f' % v for v in l) + ']')@##@@print a list of floating numbers `l` using string formatting##$$##print([('%5.3f' % val) for val in l])@##@@Change the current directory one level up##$$##os.chdir('..')@##@@print a unicode string `text`##$$##print(text.encode('windows-1252'))@##@@convert string representation `s2` of binary string rep of integer to floating point number##$$##struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]@##@@convert a binary '-0b1110' to a float number##$$##float(int('-0b1110', 0))@##@@convert a binary `b8` to a float number##$$##struct.unpack('d', b8)[0]@##@@plot a bar graph from the column 'color' in the DataFrame 'df'##$$##df.colour.value_counts().plot(kind='bar')@##@@plot categorical data in series `df` with kind `bar` using pandas and matplotlib##$$##df.groupby('colour').size().plot(kind='bar')@##@@strip and split each line `line` on white spaces##$$##line.strip().split(' ')@##@@apply functions `mean` and `std` to each column in dataframe `df`##$$##df.groupby(lambda idx: 0).agg(['mean', 'std'])@##@@sort dictionary `tag_weight` in reverse order by values cast to integers##$$##sorted(list(tag_weight.items()), key=lambda x: int(x[1]), reverse=True)@##@@find the largest integer less than `x`##$$##int(math.ceil(x)) - 1@##@@check if the string `myString` is empty##$$##if (not myString):
    pass@##@@check if string `some_string` is empty##$$##if (not some_string):
    pass@##@@check if string `my_string` is empty##$$##if (not my_string):
    pass@##@@check if string `my_string` is empty##$$##if some_string:
    pass@##@@iterate over a dictionary `d` in sorted order##$$##it = iter(sorted(d.items()))@##@@iterate over a dictionary `d` in sorted order##$$##for (key, value) in sorted(d.items()):
    pass@##@@iterate over a dictionary `dict` in sorted order##$$##return sorted(dict.items())@##@@iterate over a dictionary `dict` in sorted order##$$##return iter(sorted(dict.items()))@##@@iterate over a dictionary `foo` in sorted order##$$##for (k, v) in sorted(foo.items()):
    pass@##@@iterate over a dictionary `foo` sorted by the key##$$##for k in sorted(foo.keys()):
    pass@##@@assign the index of the last occurence of `x` in list `s` to the variable `last`##$$##last = len(s) - s[::-1].index(x) - 1@##@@concatenating values in `list1` to a string##$$##str1 = ''.join(list1)@##@@concatenating values in list `L` to a string, separate by space##$$##' '.join((str(x) for x in L))@##@@concatenating values in `list1` to a string##$$##str1 = ''.join((str(e) for e in list1))@##@@concatenating values in list `L` to a string##$$##makeitastring = ''.join(map(str, L))@##@@remove None value from list `L`##$$##[x for x in L if x is not None]@##@@select a random element from array `[1, 2, 3]`##$$##random.choice([1, 2, 3])@##@@creating a 5x6 matrix filled with `None` and save it as `x`##$$##x = [[None for _ in range(5)] for _ in range(6)]@##@@create a new 2D array with 2 random rows from array `A`##$$##A[(np.random.choice(A.shape[0], 2, replace=False)), :]@##@@create a new 2 dimensional array containing two random rows from array `A`##$$##A[(np.random.randint(A.shape[0], size=2)), :]@##@@combining rows in pandas by adding their values##$$##df.groupby(df.index).sum()@##@@find all `owl:Class` tags by parsing xml with namespace##$$##root.findall('{http://www.w3.org/2002/07/owl#}Class')@##@@generate a random string of length `x`  containing lower cased ASCII letters##$$##"""""".join(random.choice(string.lowercase) for x in range(X))@##@@add a path `/path/to/2014_07_13_test` to system path##$$##sys.path.append('/path/to/2014_07_13_test')@##@@round number `x` to nearest integer##$$##int(round(x))@##@@round number `h` to nearest integer##$$##h = int(round(h))@##@@round number 32.268907563 up to 3 decimal points##$$##round(32.268907563, 3)@##@@round number `value` up to `significantDigit` decimal places##$$##round(value, significantDigit)@##@@round number 1.0005 up to 3 decimal places##$$##round(1.0005, 3)@##@@round number 2.0005 up to 3 decimal places##$$##round(2.0005, 3)@##@@round number 3.0005 up to 3 decimal places##$$##round(3.0005, 3)@##@@round number 4.0005 up to 3 decimal places##$$##round(4.0005, 3)@##@@round number 8.005 up to 2 decimal places##$$##round(8.005, 2)@##@@round number 7.005 up to 2 decimal places##$$##round(7.005, 2)@##@@round number 6.005 up to 2 decimal places##$$##round(6.005, 2)@##@@round number 1.005 up to 2 decimal places##$$##round(1.005, 2)@##@@fill missing value in one column 'Cat1' with the value of another column 'Cat2'##$$##df['Cat1'].fillna(df['Cat2'])@##@@convert the argument `date` with string formatting in logging##$$##logging.info('date=%s', date)@##@@Log message of level 'info' with value of `date` in the message##$$##logging.info('date={}'.format(date))@##@@convert values in dictionary `d` into integers##$$##{k: int(v) for k, v in d.items()}@##@@sum elements at the same index of each list in list `lists`##$$##map(sum, zip(*lists))@##@@Convert a string `s` containing hex bytes to a hex string##$$##s.decode('hex')@##@@convert a string `s` containing hex bytes to a hex string##$$##binascii.a2b_hex(s)@##@@send data 'HTTP/1.0 200 OK\r\n\r\n' to socket `connection`##$$##connection.send('HTTP/1.0 200 established\r\n\r\n')@##@@send data 'HTTP/1.0 200 OK\r\n\r\n' to socket `connection`##$$##connection.send('HTTP/1.0 200 OK\r\n\r\n')@##@@set the value of cell `['x']['C']` equal to 10 in dataframe `df`##$$##df['x']['C'] = 10@##@@normalize the dataframe `df` along the rows##$$##np.sqrt(np.square(df).sum(axis=1))@##@@remove identical items from list `my_list` and sort it alphabetically##$$##sorted(set(my_list))@##@@find the index of the element with the maximum value from a list 'a'.##$$##max(enumerate(a), key=lambda x: x[1])[0]@##@@create a list where each element is a value of the key 'Name' for each dictionary `d` in the list `thisismylist`##$$##[d['Name'] for d in thisismylist]@##@@create a list of tuples with the values of keys 'Name' and 'Age' from each dictionary `d` in the list `thisismylist`##$$##[(d['Name'], d['Age']) for d in thisismylist]@##@@grab one random item from a database `model` in django/postgresql##$$##model.objects.all().order_by('?')[0]@##@@run python script 'script2.py' from another python script, passing in 1 as an argument##$$##os.system('script2.py 1')@##@@python regex for hyphenated words in `text`##$$##re.findall('\\w+(?:-\\w+)+', text)@##@@create variable key/value pairs with argparse##$$##parser.add_argument('--conf', nargs=2, action='append')@##@@Get `3` unique items from a list##$$##random.sample(list(range(1, 16)), 3)@##@@sort list `strings` in alphabetical order based on the letter after percent character `%` in each element##$$##strings.sort(key=lambda str: re.sub('.*%(.).*', '\\1', str))@##@@sort a list of strings `strings` based on regex match##$$##strings.sort(key=lambda str: re.sub('.*%', '', str))@##@@Create list `listy` containing 3 empty lists##$$##listy = [[] for i in range(3)]@##@@sort numpy float array `A` column by column##$$##A = np.array(sorted(A, key=tuple))@##@@Get a list from two strings `12345` and `ab` with values as each character concatenated##$$##[(x + y) for x in '12345' for y in 'ab']@##@@trim string " Hello "##$$##' Hello '.strip()@##@@trim string `myString `##$$##myString.strip()@##@@Trimming a string " Hello "##$$##' Hello '.strip()@##@@Trimming a string " Hello"##$$##' Hello'.strip()@##@@Trimming a string "Bob has a cat"##$$##'Bob has a cat'.strip()@##@@Trimming a string "          Hello        "##$$##'          Hello        '.strip()@##@@Trimming a string `str`##$$##str.strip()@##@@Trimming "\n" from string `myString`##$$##myString.strip('\n')@##@@left trimming "\n\r" from string `myString`##$$##myString.lstrip('\n\r')@##@@right trimming "\n\t" from string `myString`##$$##myString.rstrip('\n\t')@##@@Trimming a string "  Hello\n" by space##$$##'  Hello\n'.strip(' ')@##@@sort a list of tuples 'unsorted' based on two elements, second and third##$$##sorted(unsorted, key=lambda element: (element[1], element[2]))@##@@decode string `content` to UTF-8 code##$$##print(content.decode('utf8'))@##@@find the index of the maximum value in the array `arr` where the boolean condition in array `cond` is true##$$##np.ma.array(np.tile(arr, 2).reshape(2, 3), mask=~cond).argmax(axis=1)@##@@convert a dataframe `df`'s column `ID` into datetime, after removing the first and last 3 letters##$$##pd.to_datetime(df.ID.str[1:-3])@##@@read CSV file 'my.csv' into a dataframe `df` with datatype of float for column 'my_column' considering character 'n/a' as NaN value##$$##df = pd.read_csv('my.csv', dtype={'my_column': np.float64}, na_values=['n/a'])@##@@convert nan values to ‘n/a’ while reading rows from a csv `read_csv` with pandas##$$##df = pd.read_csv('my.csv', na_values=['n/a'])@##@@create a list containing all cartesian products of elements in list `a`##$$##list(itertools.product(*a))@##@@remove uppercased characters in string `s`##$$##re.sub('[^A-Z]', '', s)@##@@convert string '2011221' into a DateTime object using format '%Y%W%w'##$$##datetime.strptime('2011221', '%Y%W%w')@##@@read file 'myfile' using encoding 'iso-8859-1'##$$##codecs.open('myfile', 'r', 'iso-8859-1').read()@##@@create a list containing elements from list `list` that are predicate to function `f`##$$##[f(x) for x in list]@##@@regex matching 5-digit substrings not enclosed with digits in `s`##$$##re.findall('(?<!\\d)\\d{5}(?!\\d)', s)@##@@create a list containing elements of list `a` if the sum of the element is greater than 10##$$##[item for item in a if sum(item) > 10]@##@@convert currency string `dollars` to decimal `cents_int`##$$##cents_int = int(round(float(dollars.strip('$')) * 100))@##@@remove letters from string `example_line` if the letter exist in list `bad_chars`##$$##"""""".join(dropwhile(lambda x: x in bad_chars, example_line[::-1]))[::-1]@##@@Creating an empty list `l`##$$##l = []@##@@Creating an empty list `l`##$$##l = list()@##@@Creating an empty list##$$##list()@##@@Creating an empty list##$$##[]@##@@properly quit a program##$$##sys.exit(0)@##@@add string `-` in `4th` position of a string `s`##$$##s[:4] + '-' + s[4:]@##@@append 3 lists in one list##$$##[[] for i in range(3)]@##@@Initialize a list of empty lists `a` of size 3##$$##a = [[] for i in range(3)]@##@@request URL `url` using http header `{'referer': my_referer}`##$$##requests.get(url, headers={'referer': my_referer})@##@@set the y axis range to `0, 1000` in subplot using pylab##$$##pylab.ylim([0, 1000])@##@@convert a column of list in series `s` to dummies##$$##pd.get_dummies(s.apply(pd.Series).stack()).sum(level=0)@##@@None##$$##max(abs(x - y) for x, y in zip(values[1:], values[:-1]))@##@@convert a hex string `x` to string##$$##y = str(int(x, 16))@##@@check if string `a` is an integer##$$##a.isdigit()@##@@function to check if a string is a number##$$##isdigit()@##@@check if string `b` is a number##$$##b.isdigit()@##@@pandas read comma-separated CSV file `s` and skip commented lines starting with '#'##$$##pd.read_csv(StringIO(s), sep=',', comment='#')@##@@pandas: change all the values of a column 'Date' into "int(str(x)[-4:])"##$$##df['Date'] = df['Date'].apply(lambda x: int(str(x)[-4:]))@##@@sum a list of numbers `list_of_nums`##$$##sum(list_of_nums)@##@@Get an item from a list of dictionary `lst` which has maximum value in the key `score` using lambda function##$$##max(lst, key=lambda x: x['score'])@##@@BeautifulSoup find all tags with attribute 'name' equal to 'description'##$$##soup.findAll(attrs={'name': 'description'})@##@@remove all spaces from a string converted from dictionary `{'a': 1, 'b': 'as df'}`##$$##str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')@##@@convert dictionary `dict` into a string formatted object##$$##'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'@##@@concatenate items from list `parts` into a string starting from the second element##$$##"""""".join(parts[1:])@##@@insert a character ',' into a string in front of '+' character in second part of the string##$$##""",+""".join(c.rsplit('+', 1))@##@@delete all rows in a numpy array `a` where any value in a row is zero `0`##$$##a[np.all(a != 0, axis=1)]@##@@extract only alphabetic characters from a string `your string`##$$##""" """.join(re.split('[^a-zA-Z]*', 'your string'))@##@@Extract only characters from a string as a list##$$##re.split('[^a-zA-Z]*', 'your string')@##@@get the union set from list of lists `results_list`##$$##results_union = set().union(*results_list)@##@@get the union of values in list of lists `result_list`##$$##return list(set(itertools.chain(*result_list)))@##@@check if a numpy array `a1` contains any element of another array `a2`##$$##np.any(np.in1d(a1, a2))@##@@removing control characters from a string `s`##$$##return ''.join(ch for ch in s if unicodedata.category(ch)[0] != 'C')@##@@Compare if each value in list `a` is less than respective index value in list `b`##$$##all(i < j for i, j in zip(a, b))@##@@python selenium click on button '.button.c_button.s_button'##$$##driver.find_element_by_css_selector('.button.c_button.s_button').click()@##@@None##$$##driver.find_element_by_css_selector('.button .c_button .s_button').click()@##@@kill a process `make.exe` from python script on windows##$$##os.system('taskkill /im make.exe')@##@@SQLAlchemy select records of columns of table `my_table` in addition to current date column##$$##print(select([my_table, func.current_date()]).execute())@##@@remove duplicate characters from string 'ffffffbbbbbbbqqq'##$$##re.sub('([a-z])\\1+', '\\1', 'ffffffbbbbbbbqqq')@##@@remove periods inbetween capital letters that aren't immediately preceeded by word character(s) in a string `s` using regular expressions##$$##re.sub('(?<!\\w)([A-Z])\\.', '\\1', s)@##@@Get a list of strings `split_text` with fixed chunk size `n` from a string `the_list`##$$##split_list = [the_list[i:i + n] for i in range(0, len(the_list), n)]@##@@match string 'this is my string' with regex '\\b(this|string)\\b'
then replace it with regex '<markup>\\1</markup>'##$$##re.sub('\\b(this|string)\\b', '<markup>\\1</markup>', 'this is my string')@##@@output data of the first 7 columns of Pandas dataframe##$$##pandas.set_option('display.max_columns', 7)@##@@Display maximum output data of columns in dataframe `pandas` that will fit into the screen##$$##pandas.set_option('display.max_columns', None)@##@@set the value in column 'B' to NaN if the corresponding value in column 'A' is equal to 0 in pandas dataframe `df`##$$##df.ix[df.A == 0, 'B'] = np.nan@##@@Selecting Element "//li/label/input" followed by text "polishpottery" with Selenium WebDriver `driver`##$$##driver.find_element_by_xpath("//li/label/input[contains(..,'polishpottery')]")@##@@Sort a list of dictionaries `mylist` by keys "weight" and "factor"##$$##mylist.sort(key=operator.itemgetter('weight', 'factor'))@##@@ordering a list of dictionaries `mylist` by elements 'weight' and 'factor'##$$##mylist.sort(key=lambda d: (d['weight'], d['factor']))@##@@Convert a list of lists `lol` to a dictionary with key as second value of a list and value as list itself##$$##{x[1]: x for x in lol}@##@@sort keys of dictionary 'd' based on their values##$$##sorted(d, key=lambda k: d[k][1])@##@@round 123 to 100##$$##int(round(123, -2))@##@@create file 'x' if file 'x' does not exist##$$##fd = os.open('x', os.O_WRONLY | os.O_CREAT | os.O_EXCL)@##@@get a list of last trailing words from another list  of strings`Original_List`##$$##new_list = [x.split()[-1] for x in Original_List]@##@@Reverse a string 'hello world'##$$##'hello world'[::(-1)]@##@@Reverse list `s`##$$##s[::(-1)]@##@@Reverse string 'foo'##$$##''.join(reversed('foo'))@##@@Reverse a string `string`##$$##''.join(reversed(string))@##@@Reverse a string "foo"##$$##'foo'[::(-1)]@##@@Reverse a string `a_string`##$$##a_string[::(-1)]@##@@Reverse a string `a_string`##$$##def reversed_string(a_string):
    return a_string[::(-1)]@##@@Reverse a string `s`##$$##''.join(reversed(s))@##@@generate a string of numbers separated by comma which is divisible by `4` with remainder `1` or `2`.##$$##""",""".join(str(i) for i in range(100) if i % 4 in (1, 2))@##@@convert list `lst` of key, value pairs into a dictionary##$$##dict([(e[0], int(e[1])) for e in lst])@##@@sorting a list of tuples `list_of_tuples` where each tuple is reversed##$$##sorted(list_of_tuples, key=lambda tup: tup[::-1])@##@@sorting a list of tuples `list_of_tuples` by second key##$$##sorted(list_of_tuples, key=lambda tup: tup[1])@##@@Concatenating two one-dimensional NumPy arrays 'a' and 'b'.##$$##numpy.concatenate([a, b])@##@@writing items in list `thelist` to file `thefile`##$$##for item in thelist:
    thefile.write(('%s\n' % item))@##@@writing items in list `thelist` to file `thefile`##$$##for item in thelist:
    pass@##@@serialize `itemlist` to file `outfile`##$$##pickle.dump(itemlist, outfile)@##@@writing items in list `itemlist` to file `outfile`##$$##outfile.write('\n'.join(itemlist))@##@@Update a user's name as `Bob Marley` having id `123` in SQLAlchemy##$$##session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})@##@@send cookies `cookie` in a post request to url 'http://wikipedia.org' with the python requests library##$$##r = requests.post('http://wikipedia.org', cookies=cookie)@##@@insert directory 'libs' at the 0th index of current directory##$$##sys.path.insert(0, 'libs')@##@@get current date and time##$$##datetime.datetime.now()@##@@get current time##$$##datetime.datetime.now().time()@##@@get current time in pretty format##$$##strftime('%Y-%m-%d %H:%M:%S', gmtime())@##@@get current time in string format##$$##str(datetime.now())@##@@get current time##$$##datetime.datetime.time(datetime.datetime.now())@##@@convert hex '\xff' to integer##$$##ord('\xff')@##@@identify duplicated rows in columns 'PplNum' and 'RoomNum' with additional column in dataframe `df`##$$##df.groupby(['PplNum', 'RoomNum']).cumcount() + 1@##@@get current utc time##$$##datetime.utcnow()@##@@move last item of array `a` to the first position##$$##a[-1:] + a[:-1]@##@@Convert dataframe `df` to a pivot table using column 'year', 'month', and 'item' as indexes##$$##df.set_index(['year', 'month', 'item']).unstack(level=-1)@##@@run a pivot with a multi-index `year` and `month` in a pandas data frame##$$##df.pivot_table(values='value', index=['year', 'month'], columns='item')@##@@print a rational number `3/2`##$$##print('\n\x1b[4m' + '3' + '\x1b[0m' + '\n2')@##@@None##$$##li1.sort(key=lambda x: not x.startswith('b.'))@##@@iterate backwards from 10 to 0##$$##range(10, 0, -1)@##@@get value of first child of xml node `name`##$$##name[0].firstChild.nodeValue@##@@start a new thread for `myfunction` with parameters 'MyStringHere' and 1##$$##thread.start_new_thread(myfunction, ('MyStringHere', 1))@##@@start a new thread for `myfunction` with parameters 'MyStringHere' and 1##$$##thread.start_new_thread(myfunction, ('MyStringHere', 1))@##@@get index of the first biggest element in list `a`##$$##a.index(max(a))@##@@replace periods `.` that are not followed by periods or spaces with a period and a space `. `##$$##re.sub('\\.(?=[^ .])', '. ', para)@##@@convert a string `a` of letters embedded in squared brackets into embedded lists##$$##[i.split() for i in re.findall('\\[([^\\[\\]]+)\\]', a)]@##@@extract dictionary `d` from list `a` where the value associated with the key 'name' of dictionary `d` is equal to 'pluto'##$$##[d for d in a if d['name'] == 'pluto']@##@@extract dictionary from list of dictionaries based on a key's value.##$$##[d for d in a if d['name'] == 'pluto']@##@@Retrieve list of values from dictionary 'd'##$$##list(d.values())@##@@replace occurrences of two whitespaces or more with one whitespace ' ' in string `s`##$$##re.sub(' +', ' ', s)@##@@Change the mode of file 'my_script.sh' to permission number 484##$$##os.chmod('my_script.sh', 484)@##@@write pandas dataframe `df` to the file 'c:\\data\\t.csv' without row names##$$##df.to_csv('c:\\data\\t.csv', index=False)@##@@remove all words which contains number from a string `words` using regex##$$##re.sub('\\w*\\d\\w*', '', words).strip()@##@@control the keyboard and mouse with dogtail in linux##$$##dogtail.rawinput.click(100, 100)@##@@parse date string '2009/05/13 19:19:30 -0400' using format '%Y/%m/%d %H:%M:%S %z'##$$##datetime.strptime('2009/05/13 19:19:30 -0400', '%Y/%m/%d %H:%M:%S %z')@##@@Get the position of a regex match for word `is` in a string `String`##$$##re.search('\\bis\\b', String).start()@##@@Get the position of a regex match `is` in a string `String`##$$##re.search('is', String).start()@##@@input an integer tuple from user##$$##tuple(map(int, input().split(',')))@##@@input a tuple of integers from user##$$##tuple(int(x.strip()) for x in input().split(','))@##@@replace unicode character '\u2022' in string 'str' with '*'##$$##str.decode('utf-8').replace('\u2022', '*').encode('utf-8')@##@@replace unicode characters ''\u2022' in string 'str' with '*'##$$##str.decode('utf-8').replace('\u2022', '*')@##@@convert ndarray with shape 3x3 to array##$$##np.zeros((3, 3)).ravel()@##@@get os name##$$##import platform
platform.system()@##@@get os version##$$##import platform
platform.release()@##@@get the name of the OS##$$##print(os.name)@##@@None##$$##[x for x in my_list if not x.startswith('#')]@##@@replace fields delimited by braces {} in string "Day old bread, 50% sale {0}" with string 'today'##$$##"""Day old bread, 50% sale {0}""".format('today')@##@@Get a minimum value from a list of tuples `list` with values of type `string` and `float` with nan##$$##min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])@##@@Find average of a nested list `a`##$$##a = [(sum(x) / len(x)) for x in zip(*a)]@##@@Log info message 'Log message' with attributes `{'app_name': 'myapp'}`##$$##logging.info('Log message', extra={'app_name': 'myapp'})@##@@replace values of dataframe `df` with True if numeric##$$##df.applymap(lambda x: isinstance(x, (int, float)))@##@@sort list `l` based on its elements' digits##$$##sorted(l, key=lambda x: int(re.search('\\d+', x).group(0)))@##@@close the window in tkinter##$$##self.root.destroy()@##@@get mean of columns `2, 5, 6, 7, 8` for all rows in dataframe `df`##$$##df.iloc[:, ([2, 5, 6, 7, 8])].mean(axis=1)@##@@filter dataframe `df` by sub-level index '0630' in pandas##$$##df[df.index.map(lambda x: x[1].endswith('0630'))]@##@@flask-sqlalchemy delete row `page`##$$##db.session.delete(page)@##@@Format a string `u'Andr\xc3\xa9'` that has unicode characters##$$##"""""".join(chr(ord(c)) for c in 'Andr\xc3\xa9')@##@@convert a unicode 'Andr\xc3\xa9' to a string##$$##"""""".join(chr(ord(c)) for c in 'Andr\xc3\xa9').decode('utf8')@##@@list all files in directory "."##$$##for (dirname, dirnames, filenames) in os.walk('.'):
    for subdirname in dirnames:
        print(os.path.join(dirname, subdirname))
    for filename in filenames:
        pass@##@@list all files in directory `path`##$$##os.listdir(path)@##@@rename file `dir` to `dir` + '!'##$$##os.rename(dir, dir + '!')@##@@Insert a character `-` after every two elements in a string `s`##$$##"""-""".join(a + b for a, b in zip(s[::2], s[1::2]))@##@@printing numbers rounding up to third decimal place##$$##print('%.3f' % 3.1415)@##@@add variable `var` to key 'f' of first element in JSON data `data`##$$##data[0]['f'] = var@##@@get the path of module `a_module`##$$##print(a_module.__file__)@##@@get the path of the current python module##$$##print(os.getcwd())@##@@get the path of the python module `amodule`##$$##path = os.path.abspath(amodule.__file__)@##@@fill list `myList` with 4 0's##$$##self.myList.extend([0] * (4 - len(self.myList)))@##@@drop duplicate indexes in a pandas data frame `df`##$$##df[~df.index.duplicated()]@##@@unpack elements of list `i` as arguments into function `foo`##$$##foo(*i)@##@@generate list of numbers in specific format using string formatting precision.##$$##[('%.2d' % i) for i in range(16)]@##@@sort dictionary `mydict` in descending order based on the sum of each value in it##$$##sorted(iter(mydict.items()), key=lambda tup: sum(tup[1]), reverse=True)[:3]@##@@get top `3` items from a dictionary `mydict` with largest sum of values##$$##heapq.nlargest(3, iter(mydict.items()), key=lambda tup: sum(tup[1]))@##@@get index of character 'b' in list '['a', 'b']'##$$##['a', 'b'].index('b')@##@@set font size of axis legend of plot `plt` to 'xx-small'##$$##plt.setp(legend.get_title(), fontsize='xx-small')@##@@None##$$##int('  23  ')@##@@extract the 2nd elements from a list of tuples##$$##[x[1] for x in elements]@##@@get the opposite diagonal of a numpy array `array`##$$##np.diag(np.rot90(array))@##@@flatten list of tuples `a`##$$##list(chain.from_iterable(a))@##@@substitute two or more whitespace characters with character '|' in string `line`##$$##re.sub('\\s{2,}', '|', line.strip())@##@@print float `a` with two decimal points##$$##print(('%.2f' % a))@##@@print float `a` with two decimal points##$$##print(('{0:.2f}'.format(a)))@##@@print float `a` with two decimal points##$$##print(('{0:.2f}'.format(round(a, 2))))@##@@print float `a` with two decimal points##$$##print(('%.2f' % round(a, 2)))@##@@limit float 13.9499999 to two decimal points##$$##('%.2f' % 13.9499999)@##@@limit float 3.14159 to two decimal points##$$##('%.2f' % 3.14159)@##@@limit float 13.949999999999999 to two decimal points##$$##float('{0:.2f}'.format(13.95))@##@@limit float 13.949999999999999 to two decimal points##$$##'{0:.2f}'.format(13.95)@##@@load a tsv file `c:/~/trainSetRel3.txt` into a pandas data frame##$$##DataFrame.from_csv('c:/~/trainSetRel3.txt', sep='\t')@##@@set UTC offset by 9 hrs ahead for date '2013/09/11 00:17'##$$##dateutil.parser.parse('2013/09/11 00:17 +0900')@##@@pass a list of parameters `((1, 2, 3),) to sql queue 'SELECT * FROM table WHERE column IN %s;'##$$##cur.mogrify('SELECT * FROM table WHERE column IN %s;', ((1, 2, 3),))@##@@sum all elements of two-dimensions list `[[1, 2, 3, 4], [2, 4, 5, 6]]]`##$$##sum([sum(x) for x in [[1, 2, 3, 4], [2, 4, 5, 6]]])@##@@Retrieve an arbitrary value from dictionary `dict`##$$##next(iter(dict.values()))@##@@access an arbitrary value from dictionary `dict`##$$##next(iter(list(dict.values())))@##@@group dataframe `df` by columns 'Month' and 'Fruit'##$$##df.groupby(['Month', 'Fruit']).sum().unstack(level=0)@##@@sort list `mylist` of tuples by arbitrary key from list `order`##$$##sorted(mylist, key=lambda x: order.index(x[1]))@##@@sort a list of dictionary `persons` according to the key `['passport']['birth_info']['date']`##$$##sorted(persons, key=lambda x: x['passport']['birth_info']['date'])@##@@remove the fragment identifier `#something` from a url `http://www.address.com/something#something`##$$##urlparse.urldefrag('http://www.address.com/something#something')@##@@download to a directory '/path/to/dir/filename.ext' from source 'http://example.com/file.ext'##$$##urllib.request.urlretrieve('http://example.com/file.ext', '/path/to/dir/filename.ext')@##@@remove all duplicates from a list of sets `L`##$$##list(set(frozenset(item) for item in L))@##@@remove duplicates from a list of sets 'L'##$$##[set(item) for item in set(frozenset(item) for item in L)]@##@@terminate process `p`##$$##p.terminate()@##@@delete all values in a list `mylist`##$$##del mylist[:]@##@@throw an error window in python in windows##$$##ctypes.windll.user32.MessageBoxW(0, 'Error', 'Error', 0)@##@@remove empty strings from list `str_list`##$$##str_list = list([_f for _f in str_list if _f])@##@@remove newlines and whitespace from string `yourstring`##$$##re.sub('[\\ \\n]{2,}', '', yourstring)@##@@remove the last dot and all text beyond it in string `s`##$$##re.sub('\\.[^.]+$', '', s)@##@@remove elements from an array `A` that are in array `B`##$$##A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]@##@@Write column 'sum' of DataFrame `a` to csv file 'test.csv'##$$##a.to_csv('test.csv', cols=['sum'])@##@@call a Python script "test2.py"##$$##exec(compile(open('test2.py').read(), 'test2.py', 'exec'))@##@@call a Python script "test1.py"##$$##subprocess.call('test1.py', shell=True)@##@@sort a zipped list `zipped` using lambda function##$$##sorted(zipped, key=lambda x: x[1])@##@@None##$$##zipped.sort(key=lambda t: t[1])@##@@sort a dictionary `y` by value then by key##$$##sorted(list(y.items()), key=lambda x: (x[1], x[0]), reverse=True)@##@@using beautifulsoup to select div blocks within html `soup`##$$##soup.find_all('div', class_='crBlock ')@##@@remove elements from list `centroids` the indexes of which are in array `index`##$$##[element for i, element in enumerate(centroids) if i not in index]@##@@list duplicated elements in two lists `listA` and `listB`##$$##list(set(listA) & set(listB))@##@@download "http://randomsite.com/file.gz" from http and save as "file.gz"##$$##testfile = urllib.request.URLopener()
testfile.retrieve('http://randomsite.com/file.gz', 'file.gz')@##@@download file from http url "http://randomsite.com/file.gz" and save as "file.gz"##$$##urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')@##@@download file from http url `file_url`##$$##file_name = wget.download(file_url)@##@@set an array of unicode characters `[u'\xe9', u'\xe3', u'\xe2']` as labels in Matplotlib `ax`##$$##ax.set_yticklabels(['\xe9', '\xe3', '\xe2'])@##@@get a list of all integer points in a `dim` dimensional hypercube with coordinates from `-x` to `y` for all dimensions##$$##list(itertools.product(list(range(-x, y)), repeat=dim))@##@@convert unicode string `s` into string literals##$$##print(s.encode('unicode_escape'))@##@@how to format a list of arguments `my_args` into a string##$$##'Hello %s' % ', '.join(my_args)@##@@search and split string 'aaa bbb ccc ddd eee fff' by delimiter '(ddd)'##$$##re.split('(ddd)', 'aaa bbb ccc ddd eee fff', 1)@##@@regex search and split string 'aaa bbb ccc ddd eee fff' by delimiter '(d(d)d)'##$$##re.split('(d(d)d)', 'aaa bbb ccc ddd eee fff', 1)@##@@convert a list of dictionaries `d` to pandas data frame##$$##pd.DataFrame(d)@##@@split string "This is a string" into words that do not contain whitespaces##$$##"""This is a string""".split()@##@@split string "This     is a     string" into words that does not contain whitespaces##$$##"""This     is a     string""".split()@##@@None##$$##my_series.apply(your_function, args=(2, 3, 4), extra_kw=1)@##@@remove all duplicate items from a list `lseperatedOrblist`##$$##woduplicates = list(set(lseperatedOrblist))@##@@sum of product of combinations in a list `l`##$$##sum([(i * j) for i, j in list(itertools.combinations(l, 2))])@##@@regular expression for validating string 'user' containing a sequence of characters ending with '-' followed by any number of digits.##$$##re.compile('{}-\\d*'.format(user))@##@@convert all of the items in a list `lst` to float##$$##[float(i) for i in lst]@##@@multiply all items in a list `[1, 2, 3, 4, 5, 6]` together##$$##from functools import reduce
reduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])@##@@write a tuple of tuples `A` to a csv file using python##$$##writer.writerow(A)@##@@Write all tuple of tuples `A` at once into csv file##$$##writer.writerows(A)@##@@python, format string "{} %s {}" to have 'foo' and 'bar' in the first and second positions##$$##"""{} %s {}""".format('foo', 'bar')@##@@Truncate `\r\n` from each string in a list of string `example`##$$##example = [x.replace('\r\n', '') for x in example]@##@@split elements of a list `l` by '\t'##$$##[i.partition('\t')[-1] for i in l if '\t' in i]@##@@search for regex pattern 'Test(.*)print' in string `testStr` including new line character '\n'##$$##re.search('Test(.*)print', testStr, re.DOTALL)@##@@find button that is in li class `next` and assign it to variable `next`##$$##next = driver.find_element_by_css_selector('li.next>a')@##@@get the  size of file 'C:\\Python27\\Lib\\genericpath.py'##$$##os.stat('C:\\Python27\\Lib\\genericpath.py').st_size@##@@return a string from a regex match with pattern '<img.*?>' in string 'line'##$$##imtag = re.match('<img.*?>', line).group(0)@##@@Rename a folder `Joe Blow` to `Blow, Joe`##$$##os.rename('Joe Blow', 'Blow, Joe')@##@@find overlapping matches from a string `hello` using regex##$$##re.findall('(?=(\\w\\w))', 'hello')@##@@convert 173 to binary string##$$##bin(173)@##@@convert binary string '01010101111' to integer##$$##int('01010101111', 2)@##@@convert binary string '010101' to integer##$$##int('010101', 2)@##@@convert binary string '0b0010101010' to integer##$$##int('0b0010101010', 2)@##@@convert 21 to binary string##$$##bin(21)@##@@convert binary string '11111111' to integer##$$##int('11111111', 2)@##@@delete all digits in string `s` that are not directly attached to a word character##$$##re.sub('$\\d+\\W+|\\b\\d+\\b|\\W+\\d+$', '', s)@##@@delete digits at the end of string `s`##$$##re.sub('\\b\\d+\\b', '', s)@##@@Delete self-contained digits from string `s`##$$##s = re.sub('^\\d+\\s|\\s\\d+\\s|\\s\\d+$', ' ', s)@##@@truncate string `s` up to character ':'##$$##s.split(':', 1)[1]@##@@print a string `s` by splitting with comma `,`##$$##print(s.split(','))@##@@Create list  by splitting string `mystring` using "," as delimiter##$$##mystring.split(',')@##@@remove parentheses only around single words in a string `s` using regex##$$##re.sub('\\((\\w+)\\)', '\\1', s)@##@@webbrowser open url `url`##$$##webbrowser.open_new(url)@##@@webbrowser open url 'http://example.com'##$$##webbrowser.open('http://example.com')@##@@change the background colour of the button `pushbutton` to red##$$##self.pushButton.setStyleSheet('background-color: red')@##@@apply a list of functions named 'functions' over a list of values named 'values'##$$##[x(y) for x, y in zip(functions, values)]@##@@modify the width of a text control as `300` keeping default height in wxpython##$$##wx.TextCtrl(self, -1, size=(300, -1))@##@@display a grayscale image from array of pixels `imageArray`##$$##imshow(imageArray, cmap='Greys_r')@##@@replace all the nan values with 0 in a pandas dataframe `df`##$$##df.fillna(0)@##@@export a table dataframe `df` in pyspark to csv 'mycsv.csv'##$$##df.toPandas().to_csv('mycsv.csv')@##@@Write DataFrame `df` to csv file 'mycsv.csv'##$$##df.write.csv('mycsv.csv')@##@@get the sum of each second value from a list of tuple `structure`##$$##sum(x[1] for x in structure)@##@@sum the 3 largest integers in groupby by 'STNAME' and 'COUNTY_POP'##$$##df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())@##@@Parse string '21/11/06 16:30' according to format '%d/%m/%y %H:%M'##$$##datetime.strptime('21/11/06 16:30', '%d/%m/%y %H:%M')@##@@get current script directory##$$##os.path.dirname(os.path.abspath(__file__))@##@@double each character in string `text.read()`##$$##re.sub('(.)', '\\1\\1', text.read(), 0, re.S)@##@@concatenate strings in tuple `('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e')` into a single string##$$##"""""".join(('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e'))@##@@get full path of current directory##$$##os.path.dirname(os.path.abspath(__file__))@##@@variable number of digits `digits` in variable `value` in format string "{0:.{1}%}"##$$##"""{0:.{1}%}""".format(value, digits)@##@@get current requested url##$$##self.request.url@##@@get a random item from list `choices`##$$##random_choice = random.choice(choices)@##@@sum the length of all strings in a list `strings`##$$##length = sum(len(s) for s in strings)@##@@sort a list `s` by first and second attributes##$$##s = sorted(s, key=lambda x: (x[1], x[2]))@##@@sort a list of lists `s` by second and third element in each list.##$$##s.sort(key=operator.itemgetter(1, 2))@##@@Mysql commit current transaction##$$##con.commit()@##@@filtering out strings that contain 'ab' from a list of strings `lst`##$$##[k for k in lst if 'ab' in k]@##@@find the first letter of each element in string `input`##$$##output = ''.join(item[0].upper() for item in input.split())@##@@get name of primary field `name` of django model `CustomPK`##$$##CustomPK._meta.pk.name@##@@count the number of words in a string `s`##$$##len(s.split())@##@@multiply array `a` and array `b`respective elements then sum each row of the new array##$$##np.einsum('ji,i->j', a, b)@##@@check python version##$$##sys.version@##@@check python version##$$##sys.version_info@##@@format number 1000000000.0 using latex notation##$$##print('\\num{{{0:.2g}}}'.format(1000000000.0))@##@@Initialize a list of empty lists `x` of size 3##$$##x = [[] for i in range(3)]@##@@apply jinja2 filters `forceescape` and `linebreaks` on variable `my_variable`##$$##{{my_variable | forceescape | linebreaks}}@##@@zip a list of tuples `[(1, 4), (2, 5), (3, 6)]` into a list of tuples according to original tuple index##$$##zip(*[(1, 4), (2, 5), (3, 6)])@##@@split a list of tuples `data` into sub-lists of the same tuple field using itertools##$$##[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]@##@@Convert a string into a list##$$##list('hello')@##@@create new column `A_perc` in dataframe `df` with row values equal to the value in column `A` divided by the value in column `sum`##$$##df['A_perc'] = df['A'] / df['sum']@##@@getting a list of all subdirectories in the directory `directory`##$$##os.walk(directory)@##@@get a list of all subdirectories in the directory `directory`##$$##[x[0] for x in os.walk(directory)]@##@@update all values associated with key `i` to string 'updated' if value `j` is not equal to 'None' in dictionary `d`##$$##{i: 'updated' for i, j in list(d.items()) if j != 'None'}@##@@Filter a dictionary `d` to remove keys with value None and replace other values with 'updated'##$$##dict((k, 'updated') for k, v in d.items() if v is None)@##@@Filter a dictionary `d` to remove keys with value 'None' and replace other values with 'updated'##$$##dict((k, 'updated') for k, v in d.items() if v != 'None')@##@@count number of rows in a group `key_columns` in pandas groupby object `df`##$$##df.groupby(key_columns).size()@##@@return list `result` of sum of elements of each list `b` in list of lists `a`##$$##result = [sum(b) for b in a]@##@@What's the best way to search for a Python dictionary value in a list of dictionaries?##$$##any(d['site'] == 'Superuser' for d in data)@##@@create a 2D array of `Node` objects with dimensions `cols` columns and `rows` rows##$$##nodes = [[Node() for j in range(cols)] for i in range(rows)]@##@@replace extension '.txt' in basename '/home/user/somefile.txt' with extension '.jpg'##$$##print(os.path.splitext('/home/user/somefile.txt')[0] + '.jpg')@##@@Set the resolution of a monitor as `FULLSCREEN` in pygame##$$##pygame.display.set_mode((0, 0), pygame.FULLSCREEN)@##@@format float `3.5e+20`  to `$3.5 \\times 10^{20}$` and set as title of matplotlib plot `ax`##$$##ax.set_title('$%s \\times 10^{%s}$' % ('3.5', '+20'))@##@@Get the age of directory (or file) `/tmp` in seconds.##$$##print(os.path.getmtime('/tmp'))@##@@how to get month name of datetime `today`##$$##today.strftime('%B')@##@@get month name from a datetime object `today`##$$##today.strftime('%B')@##@@Convert nested list `x` into a flat list##$$##[j for i in x for j in i]@##@@get each value from a list of lists `a` using itertools##$$##print(list(itertools.chain.from_iterable(a)))@##@@convert date string 'January 11, 2010'  into day of week##$$##datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%A')@##@@None##$$##datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%a')@##@@remove item "b" in list `a`##$$##a.remove('b')@##@@remove item `c` in list `a`##$$##a.remove(c)@##@@delete the element 6 from list `a`##$$##a.remove(6)@##@@delete the element 6 from list `a`##$$##a.remove(6)@##@@delete the element `c` from list `a`##$$##if (c in a):
    a.remove(c)@##@@delete the element `c` from list `a`##$$##try:
    a.remove(c)
except ValueError:
    pass@##@@Get all matching patterns 'a.*?a' from a string 'a 1 a 2 a 3 a 4 a'.##$$##re.findall('(?=(a.*?a))', 'a 1 a 2 a 3 a 4 a')@##@@outer product of each column of a 2d `X` array to form a 3d array `X`##$$##np.einsum('ij,kj->jik', X, X)@##@@Getting the last element of list `some_list`##$$##some_list[(-1)]@##@@Getting the second to last element of list `some_list`##$$##some_list[(-2)]@##@@gets the `n` th-to-last element in list `some_list`##$$##some_list[(- n)]@##@@get the last element in list `alist`##$$##alist[(-1)]@##@@get the last element in list `astr`##$$##astr[(-1)]@##@@make a list of integers from 0 to `5` where each second element is a duplicate of the previous element##$$##print([u for v in [[i, i] for i in range(5)] for u in v])@##@@create a list of integers with duplicate values `[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]`##$$##[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]@##@@create a list of integers from 1 to 5 with each value duplicated##$$##[(i // 2) for i in range(10)]@##@@remove first and last lines of string `s`##$$##s[s.find('\n') + 1:s.rfind('\n')]@##@@create dict of squared int values in range of 100##$$##{(x ** 2) for x in range(100)}@##@@zip lists `[1, 2], [3, 4], [5, 6]` in a list##$$##zip(*[[1, 2], [3, 4], [5, 6]])@##@@zip lists in a list [[1, 2], [3, 4], [5, 6]]##$$##zip(*[[1, 2], [3, 4], [5, 6]])@##@@request page 'https://www.mysite.com/' with credentials of username 'username' and password 'pwd'##$$##requests.get('https://www.mysite.com/', auth=('username', 'pwd'))@##@@get a new string from the 3rd character to the end of the string `x`##$$##x[2:]@##@@get a new string including the first two characters of string `x`##$$##x[:2]@##@@get a new string including all but the last character of string `x`##$$##x[:(-2)]@##@@get a new string including the last two characters of string `x`##$$##x[(-2):]@##@@get a new string with the 3rd to the second-to-last characters of string `x`##$$##x[2:(-2)]@##@@reverse a string `some_string`##$$##some_string[::(-1)]@##@@select alternate characters of "H-e-l-l-o- -W-o-r-l-d"##$$##'H-e-l-l-o- -W-o-r-l-d'[::2]@##@@select a substring of `s` beginning at `beginning` of length `LENGTH`##$$##s = s[beginning:(beginning + LENGTH)]@##@@terminate the program##$$##sys.exit()@##@@terminate the program##$$##quit()@##@@Terminating a Python script with error message "some error message"##$$##sys.exit('some error message')@##@@encode value of key `City` in dictionary `data` as `ascii`, ignoring non-ascii characters##$$##data['City'].encode('ascii', 'ignore')@##@@get current CPU and RAM usage##$$##psutil.cpu_percent()
psutil.virtual_memory()@##@@get current RAM usage of current program##$$##pid = os.getpid()
py = psutil.Process(pid)
memoryUse = (py.memory_info()[0] / (2.0 ** 30))@##@@print cpu and memory usage##$$##print((psutil.cpu_percent()))
print((psutil.virtual_memory()))@##@@read a ragged csv file `D:/Temp/tt.csv` using `names` parameter in pandas##$$##pd.read_csv('D:/Temp/tt.csv', names=list('abcdef'))@##@@get first non-null value per each row from dataframe `df`##$$##df.stack().groupby(level=0).first()@##@@print two numbers `10` and `20` using string formatting##$$##"""{0} {1}""".format(10, 20)@##@@replace placeholders in string '{1} {ham} {0} {foo} {1}' with arguments `(10, 20, foo='bar', ham='spam')`##$$##"""{1} {ham} {0} {foo} {1}""".format(10, 20, foo='bar', ham='spam')@##@@create list `changed_list ` containing elements of list `original_list` whilst converting strings containing digits to integers##$$##changed_list = [(int(f) if f.isdigit() else f) for f in original_list]@##@@get a dictionary with keys from one list `keys` and values from other list `data`##$$##dict(zip(keys, zip(*data)))@##@@convert string `apple` from iso-8859-1/latin1 to utf-8##$$##apple.decode('iso-8859-1').encode('utf8')@##@@Exclude column names when writing dataframe `df` to a csv file `filename.csv`##$$##df.to_csv('filename.csv', header=False)@##@@Escape character '}' in string '{0}:<15}}{1}:<15}}{2}:<8}}' while using function `format` with arguments `('1', '2', '3')`##$$##print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))@##@@get dictionary with max value of key 'size' in list of dicts `ld`##$$##max(ld, key=lambda d: d['size'])@##@@format parameters 'b' and 'a' into plcaeholders in string "{0}\\w{{2}}b{1}\\w{{2}}quarter"##$$##"""{0}\\w{{2}}b{1}\\w{{2}}quarter""".format('b', 'a')@##@@django create a foreign key column `user` and link it to table 'User'##$$##user = models.ForeignKey('User', unique=True)@##@@write a regex pattern to match even number of letter `A`##$$##re.compile('^([^A]*)AA([^A]|AA)*$')@##@@join Numpy array `b` with Numpy array 'a' along axis 0##$$##b = np.concatenate((a, a), axis=0)@##@@custom sort an alphanumeric list `l`##$$##sorted(l, key=lambda x: x.replace('0', 'Z'))@##@@plot logarithmic axes with matplotlib##$$##ax.set_yscale('log')@##@@Access environment variable "HOME"##$$##os.environ['HOME']@##@@get value of environment variable "HOME"##$$##os.environ['HOME']@##@@print all environment variables##$$##print(os.environ)@##@@get all environment variables##$$##os.environ@##@@get value of the environment variable 'KEY_THAT_MIGHT_EXIST'##$$##print(os.environ.get('KEY_THAT_MIGHT_EXIST'))@##@@get value of the environment variable 'KEY_THAT_MIGHT_EXIST' with default value `default_value`##$$##print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))@##@@get value of the environment variable 'HOME' with default value '/home/username/'##$$##print(os.environ.get('HOME', '/home/username/'))@##@@create a dictionary containing each string in list `my_list` split by '=' as a key/value pairs##$$##print(dict([s.split('=') for s in my_list]))@##@@find the index of element closest to number 11.5 in list `a`##$$##min(enumerate(a), key=lambda x: abs(x[1] - 11.5))@##@@find element `a` that contains string "TEXT A" in file `root`##$$##e = root.xpath('.//a[contains(text(),"TEXT A")]')@##@@Find the`a` tag in html `root` which starts with the text `TEXT A`  and assign it to `e`##$$##e = root.xpath('.//a[starts-with(text(),"TEXT A")]')@##@@find the element that holds string 'TEXT A' in file `root`##$$##e = root.xpath('.//a[text()="TEXT A"]')@##@@create list `c` containing items from list `b` whose index is in list `index`##$$##c = [b[i] for i in index]@##@@get the dot product of two one dimensional numpy arrays##$$##np.dot(a[:, (None)], b[(None), :])@##@@multiplication of two 1-dimensional arrays  in numpy##$$##np.outer(a, b)@##@@execute a file './abc.py' with arguments `arg1` and `arg2` in python shell##$$##subprocess.call(['./abc.py', arg1, arg2])@##@@Replace NaN values in  column 'value' with the mean of data in column 'group' of dataframe `df`##$$##df[['value']].fillna(df.groupby('group').transform('mean'))@##@@separate each character in string `s` by '-'##$$##re.sub('(.)(?=.)', '\\1-', s)@##@@concatenate '-' in between characters of string `str`##$$##re.sub('(?<=.)(?=.)', '-', str)@##@@get the indexes of the x and y axes in Numpy array `np` where variable `a` is equal to variable `value`##$$##i, j = np.where(a == value)@##@@print letter that appears most frequently in string `s`##$$##print(collections.Counter(s).most_common(1)[0])@##@@find float number proceeding sub-string `par` in string `dir`##$$##float(re.findall('(?:^|_)' + par + '(\\d+\\.\\d*)', dir)[0])@##@@Get all the matches from a string `abcd` if it begins with a character `a`##$$##re.findall('[^a]', 'abcd')@##@@get a list of variables from module 'adfix.py' in current module.##$$##print([item for item in dir(adfix) if not item.startswith('__')])@##@@get the first element of each tuple in a list `rows`##$$##[x[0] for x in rows]@##@@get a list `res_list` of the first elements of each tuple in a list of tuples `rows`##$$##res_list = [x[0] for x in rows]@##@@duplicate data in pandas dataframe `x` for 5 times##$$##pd.concat([x] * 5, ignore_index=True)@##@@Get a repeated pandas data frame object `x` by `5` times##$$##pd.concat([x] * 5)@##@@sort json `ips_data` by a key 'data_two'##$$##sorted_list_of_keyvalues = sorted(list(ips_data.items()), key=item[1]['data_two'])@##@@read json `elevations` to pandas dataframe `df`##$$##pd.read_json(elevations)@##@@generate a random number in 1 to 7 with a given distribution [0.1, 0.05, 0.05, 0.2, 0.4, 0.2]##$$##numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])@##@@Return rows of data associated with the maximum value of column 'Value' in dataframe `df`##$$##df.loc[df['Value'].idxmax()]@##@@find recurring patterns in a string '42344343434'##$$##re.findall('^(.+?)((.+)\\3+)$', '42344343434')[0][:-1]@##@@convert binary string '\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@' to numpy array##$$##np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='<f4')@##@@convert binary string to numpy array##$$##np.fromstring('\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@', dtype='>f4')@##@@insert variables `(var1, var2, var3)` into sql statement 'INSERT INTO table VALUES (?, ?, ?)'##$$##cursor.execute('INSERT INTO table VALUES (?, ?, ?)', (var1, var2, var3))@##@@Execute a sql statement using variables `var1`, `var2` and `var3`##$$##cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))@##@@None##$$##cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))@##@@pandas split strings in column 'stats' by ',' into columns in dataframe `df`##$$##df['stats'].str[1:-1].str.split(',', expand=True).astype(float)@##@@split string in column 'stats' by ',' into separate columns in dataframe `df`##$$##df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)@##@@Unpack column 'stats' in dataframe `df` into a series of columns##$$##df['stats'].apply(pd.Series)@##@@wait for shell command `p` evoked by  subprocess.Popen to complete##$$##p.wait()@##@@encode string `s` to utf-8 code##$$##s.encode('utf8')@##@@parse string '01-Jan-1995' into a datetime object using format '%d-%b-%Y'##$$##datetime.datetime.strptime('01-Jan-1995', '%d-%b-%Y')@##@@copy a file from `src` to `dst`##$$##copyfile(src, dst)@##@@copy file "/dir/file.ext" to "/new/dir/newname.ext"##$$##shutil.copy2('/dir/file.ext', '/new/dir/newname.ext')@##@@copy file '/dir/file.ext' to '/new/dir'##$$##shutil.copy2('/dir/file.ext', '/new/dir')@##@@print a list of integers `list_of_ints` using string formatting##$$##print(', '.join(str(x) for x in list_of_ints))@##@@multiply column 'A' and column 'B' by column 'C' in datafram `df`##$$##df[['A', 'B']].multiply(df['C'], axis='index')@##@@convert string 'a' to hex##$$##hex(ord('a'))@##@@Get the sum of values to the power of their indices in a list `l`##$$##sum(j ** i for i, j in enumerate(l, 1))@##@@remove extra white spaces & tabs from a string `s`##$$##""" """.join(s.split())@##@@replace comma in string `s` with empty string ''##$$##s = s.replace(',', '')@##@@Resample dataframe `frame` to resolution of 1 hour `1H` for timeseries index, summing values in the column `radiation` averaging those in column `tamb`##$$##frame.resample('1H').agg({'radiation': np.sum, 'tamb': np.mean})@##@@None##$$##root.destroy()@##@@create a pandas dataframe `df` from elements of a dictionary `nvalues`##$$##df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})@##@@Flask get value of request variable 'firstname'##$$##first_name = request.args.get('firstname')@##@@Flask get posted form data 'firstname'##$$##first_name = request.form.get('firstname')@##@@get a list of substrings consisting of the first 5 characters of every string in list `buckets`##$$##[s[:5] for s in buckets]@##@@sort list `the_list` by the length of string followed by alphabetical order##$$##the_list.sort(key=lambda item: (-len(item), item))@##@@Set index equal to field 'TRX_DATE' in dataframe `df`##$$##df = df.set_index(['TRX_DATE'])@##@@List comprehension with an accumulator in range of 10##$$##list(accumulate(list(range(10))))@##@@How to convert a date string '2013-1-25' in format '%Y-%m-%d' to different format '%m/%d/%y'##$$##datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%m/%d/%y')@##@@convert a date string '2013-1-25' in format '%Y-%m-%d' to different format '%-m/%d/%y'##$$##datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%-m/%d/%y')@##@@get a dataframe `df2` that contains all the columns of dataframe `df` that do not end in `prefix`##$$##df2 = df.ix[:, (~df.columns.str.endswith('prefix'))]@##@@create list `new_list` containing the last 10 elements of list `my_list`##$$##new_list = my_list[-10:]@##@@get the last 10 elements from a list `my_list`##$$##my_list[-10:]@##@@convert matlab engine array `x` to a numpy ndarray##$$##np.array(x._data).reshape(x.size[::-1]).T@##@@select the first row grouped per level 0 of dataframe `df`##$$##df.groupby(level=0, as_index=False).nth(0)@##@@concatenate sequence of numpy arrays  `LIST` into a one dimensional array along the first axis##$$##numpy.concatenate(LIST, axis=0)@##@@convert and escape string "\\xc3\\x85あ" to UTF-8 code##$$##"""\\xc3\\x85あ""".encode('utf-8').decode('unicode_escape')@##@@encode string "\\xc3\\x85あ" to bytes##$$##"""\\xc3\\x85あ""".encode('utf-8')@##@@interleave the elements of two lists `a` and `b`##$$##[j for i in zip(a, b) for j in i]@##@@merge two lists `a` and `b` into a single list##$$##[j for i in zip(a, b) for j in i]@##@@delete all occureces of `8` in each string `s` in list `lst`##$$##print([s.replace('8', '') for s in lst])@##@@Split string `Hello` into a string of letters seperated by `,`##$$##""",""".join('Hello')@##@@in Django, select 100 random records from the database `Content.objects`##$$##Content.objects.all().order_by('?')[:100]@##@@create a NumPy array containing elements of array `A` as pointed to by index in array `B`##$$##A[np.arange(A.shape[0])[:, (None)], B]@##@@pivot dataframe `df` so that values for `upc` become column headings and values for `saleid` become the index##$$##df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)@##@@match zero-or-more instances of lower case alphabet characters in a string `f233op `##$$##re.findall('([a-z]*)', 'f233op')@##@@match zero-or-more instances of lower case alphabet characters in a string `f233op `##$$##re.findall('([a-z])*', 'f233op')@##@@split string 'happy_hats_for_cats' using string '_for_'##$$##re.split('_for_', 'happy_hats_for_cats')@##@@Split string 'sad_pandas_and_happy_cats_for_people' based on string 'and', 'or' or 'for'##$$##re.split('_(?:for|or|and)_', 'sad_pandas_and_happy_cats_for_people')@##@@Split a string `l` by multiple words `for` or `or` or `and`##$$##[re.split('_(?:f?or|and)_', s) for s in l]@##@@zip keys with individual values in lists `k` and `v`##$$##[dict(zip(k, x)) for x in v]@##@@Sort a list 'lst' in descending order.##$$##sorted(lst, reverse=True)@##@@sort array `order_array` based on column 'year', 'month' and 'day'##$$##order_array.sort(order=['year', 'month', 'day'])@##@@Sort a structured numpy array 'df' on multiple columns 'year', 'month' and 'day'.##$$##df.sort(['year', 'month', 'day'])@##@@check if elements in list `my_list` are coherent in order##$$##return my_list == list(range(my_list[0], my_list[-1] + 1))@##@@group rows of pandas dataframe `df` with same 'id'##$$##df.groupby('id').agg(lambda x: x.tolist())@##@@encode `u'X\xc3\xbcY\xc3\x9f'` as unicode and decode with utf-8##$$##'X\xc3\xbcY\xc3\x9f'.encode('raw_unicode_escape').decode('utf-8')@##@@parse string `a` to float##$$##float(a)@##@@Parse String `s` to Float or Int##$$##try:
    return int(s)
except ValueError:
    return float(s)@##@@check if object `a` has property 'property'##$$##if hasattr(a, 'property'):
    pass@##@@check if object `a` has property 'property'##$$##if hasattr(a, 'property'):
    pass@##@@get the value of attribute 'property' of object `a` with default value 'default value'##$$##getattr(a, 'property', 'default value')@##@@delete every 8th column in a numpy array 'a'.##$$##np.delete(a, list(range(0, a.shape[1], 8)), axis=1)@##@@convert `ms` milliseconds to a datetime object##$$##datetime.datetime.fromtimestamp(ms / 1000.0)@##@@find the magnitude (length) squared of a vector `vf` field##$$##np.einsum('...j,...j->...', vf, vf)@##@@request http url `url`##$$##r = requests.get(url)@##@@request http url `url` with parameters `payload`##$$##r = requests.get(url, params=payload)@##@@post request url `url` with parameters `payload`##$$##r = requests.post(url, data=payload)@##@@make an HTTP post request with data `post_data`##$$##post_response = requests.post(url='http://httpbin.org/post', json=post_data)@##@@django jinja slice list `mylist` by '3:8'##$$##{{(mylist | slice): '3:8'}}@##@@create dataframe `df` with content of hdf store file '/home/.../data.h5' with key of 'firstSet'##$$##df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')@##@@get the largest index of the last occurrence of characters '([{' in string `test_string`##$$##max(test_string.rfind(i) for i in '([{')@##@@print 'here is your checkmark: ' plus unicode character u'\u2713'##$$##print('here is your checkmark: ' + '\u2713')@##@@print unicode characters in a string `\u0420\u043e\u0441\u0441\u0438\u044f`##$$##print('\u0420\u043e\u0441\u0441\u0438\u044f')@##@@pads string '5' on the left with 1 zero##$$##print('{0}'.format('5'.zfill(2)))@##@@Remove duplicates elements from list `sequences` and sort it in ascending order##$$##sorted(set(itertools.chain.from_iterable(sequences)))@##@@pandas dataframe `df` column 'a' to list##$$##df['a'].values.tolist()@##@@Get a list of all values in column `a` in pandas data frame `df`##$$##df['a'].tolist()@##@@escaping quotes in string##$$##replace('"', '\\"')@##@@check if all string elements in list `words` are upper-cased##$$##print(all(word[0].isupper() for word in words))@##@@remove items from dictionary `myDict` if the item's value `val` is equal to 42##$$##myDict = {key: val for key, val in list(myDict.items()) if val != 42}@##@@Remove all items from a dictionary `myDict` whose values are `42`##$$##{key: val for key, val in list(myDict.items()) if val != 42}@##@@Determine the byte length of a utf-8 encoded string `s`##$$##return len(s.encode('utf-8'))@##@@kill a process with id `process.pid`##$$##os.kill(process.pid, signal.SIGKILL)@##@@get data of columns with Null values in dataframe `df`##$$##df[pd.isnull(df).any(axis=1)]@##@@strip everything up to and including the character `&` from url `url`, strip the character `=` from the remaining string and concatenate `.html` to the end##$$##url.split('&')[-1].replace('=', '') + '.html'@##@@Parse a file `sample.xml` using expat parsing in python 3##$$##parser.ParseFile(open('sample.xml', 'rb'))@##@@Exit script##$$##sys.exit()@##@@assign value in `group` dynamically to class property `attr`##$$##setattr(self, attr, group)@##@@decode url-encoded string `some_string` to its character equivalents##$$##urllib.parse.unquote(urllib.parse.unquote(some_string))@##@@decode a double URL encoded string 
'FireShot3%2B%25282%2529.png' to
'FireShot3+(2).png'##$$##urllib.parse.unquote(urllib.parse.unquote('FireShot3%2B%25282%2529.png'))@##@@change flask security register url to `/create_account`##$$##app.config['SECURITY_REGISTER_URL'] = '/create_account'@##@@open a file `/home/user/test/wsservice/data.pkl` in binary write mode##$$##output = open('/home/user/test/wsservice/data.pkl', 'wb')@##@@remove the last element in list `a`##$$##del a[(-1)]@##@@remove the element in list `a` with index 1##$$##a.pop(1)@##@@remove the last element in list `a`##$$##a.pop()@##@@remove the element in list `a` at index `index`##$$##a.pop(index)@##@@remove the element in list `a` at index `index`##$$##del a[index]@##@@print a celsius symbol on x axis of a plot `ax`##$$##ax.set_xlabel('Temperature (\u2103)')@##@@Print a celsius symbol with matplotlib##$$##ax.set_xlabel('Temperature ($^\\circ$C)')@##@@convert a list of lists `list_of_lists` into a list of strings keeping empty sub-lists as empty string ''##$$##[''.join(l) for l in list_of_lists]@##@@get a list of all the duplicate items in dataframe `df` using pandas##$$##pd.concat(g for _, g in df.groupby('ID') if len(g) > 1)@##@@Delete third row in a numpy array `x`##$$##x = numpy.delete(x, 2, axis=1)@##@@delete first row of array `x`##$$##x = numpy.delete(x, 0, axis=0)@##@@merge rows from dataframe `df1` with rows from dataframe `df2` and calculate the mean for rows that have the same value of axis 1##$$##pd.concat((df1, df2), axis=1).mean(axis=1)@##@@Get the average values from two numpy arrays `old_set` and `new_set`##$$##np.mean(np.array([old_set, new_set]), axis=0)@##@@Matplotlib change marker size to 500##$$##scatter(x, y, s=500, color='green', marker='h')@##@@Create new list `result` by splitting each item in list `words`##$$##result = [item for word in words for item in word.split(',')]@##@@convert JSON string '2012-05-29T19:30:03.283Z' into a DateTime object using format '%Y-%m-%dT%H:%M:%S.%fZ'##$$##datetime.datetime.strptime('2012-05-29T19:30:03.283Z', '%Y-%m-%dT%H:%M:%S.%fZ')@##@@count `True` values associated with key 'one' in dictionary `tadas`##$$##sum(item['one'] for item in list(tadas.values()))@##@@encode a pdf file `pdf_reference.pdf` with `base64` encoding##$$##a = open('pdf_reference.pdf', 'rb').read().encode('base64')@##@@split string `a` using new-line character '\n' as separator##$$##a.rstrip().split('\n')@##@@split a string `a` with new line character##$$##a.split('\n')[:-1]@##@@return http status code 204 from a django view##$$##return HttpResponse(status=204)@##@@check if 7 is in `a`##$$##(7 in a)@##@@check if 'a' is in list `a`##$$##('a' in a)@##@@sort list `results` by keys value 'year'##$$##sorted(results, key=itemgetter('year'))@##@@get current url in selenium webdriver `browser`##$$##print(browser.current_url)@##@@split string `str` with delimiter '; ' or delimiter ', '##$$##re.split('; |, ', str)@##@@un-escaping characters in a string with python##$$##"""\\u003Cp\\u003E""".decode('unicode-escape')@##@@convert date string `s` in format pattern '%d/%m/%Y' into a timestamp##$$##time.mktime(datetime.datetime.strptime(s, '%d/%m/%Y').timetuple())@##@@convert string '01/12/2011' to an integer timestamp##$$##int(datetime.datetime.strptime('01/12/2011', '%d/%m/%Y').strftime('%s'))@##@@get http header of the key 'your-header-name' in flask##$$##request.headers['your-header-name']@##@@select records of dataframe `df` where the sum of column 'X' for each value in column 'User' is 0##$$##df.groupby('User')['X'].filter(lambda x: x.sum() == 0)@##@@Get data of dataframe `df` where the sum of column 'X' grouped by column 'User' is equal to 0##$$##df.loc[df.groupby('User')['X'].transform(sum) == 0]@##@@Get data from dataframe `df` where column 'X' is equal to 0##$$##df.groupby('User')['X'].transform(sum) == 0@##@@None##$$##driver.find_elements_by_xpath("//*[contains(text(), 'My Button')]")@##@@convert pandas group by object to multi-indexed dataframe with indices 'Name' and 'Destination'##$$##df.set_index(['Name', 'Destination'])@##@@coalesce non-word-characters in string `a`##$$##print(re.sub('(\\W)\\1+', '\\1', a))@##@@open a file "$file" under Unix##$$##os.system('start "$file"')@##@@Convert a Unicode string `title` to a 'ascii' string##$$##unicodedata.normalize('NFKD', title).encode('ascii', 'ignore')@##@@Convert a Unicode string `a` to a 'ascii' string##$$##a.encode('ascii', 'ignore')@##@@create a list `files` containing all files in directory '.' that starts with numbers between 0 and 9 and ends with the extension '.jpg'##$$##files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\.jpg', f)]@##@@adding a 1-d array `[1, 2, 3, 4, 5, 6, 7, 8, 9]` to a 3-d array `np.zeros((6, 9, 20))`##$$##np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]@##@@add array of shape `(6, 9, 20)` to array `[1, 2, 3, 4, 5, 6, 7, 8, 9]`##$$##np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))@##@@None##$$##os.system('start excel.exe <path/to/file>')@##@@get the list with the highest sum value in list `x`##$$##print(max(x, key=sum))@##@@sum the length of lists in list `x` that are more than 1 item in length##$$##sum(len(y) for y in x if len(y) > 1)@##@@Enclose numbers in quotes in a string `This is number 1 and this is number 22`##$$##re.sub('(\\d+)', '"\\1"', 'This is number 1 and this is number 22')@##@@multiply the columns of sparse matrix `m` by array `a` then multiply the rows of the resulting matrix by array `a`##$$##numpy.dot(numpy.dot(a, m), a)@##@@Django check if an object with criteria `name` equal to 'name' and criteria `title` equal to 'title' exists in model `Entry`##$$##Entry.objects.filter(name='name', title='title').exists()@##@@sort a nested list by the inverse of element 2, then by element 1##$$##sorted(l, key=lambda x: (-int(x[1]), x[0]))@##@@get domain/host name from request object in Django##$$##request.META['HTTP_HOST']@##@@get a string `randomkey123xyz987` between two substrings in a string `api('randomkey123xyz987', 'key', 'text')` using regex##$$##re.findall("api\\('(.*?)'", "api('randomkey123xyz987', 'key', 'text')")@##@@invoke perl script './uireplace.pl' using perl interpeter '/usr/bin/perl' and send argument `var` to it##$$##subprocess.call(['/usr/bin/perl', './uireplace.pl', var])@##@@print list of items `myList`##$$##print('\n'.join(str(p) for p in myList))@##@@update the dictionary `mydic` with dynamic keys `i` and values with key 'name' from dictionary `o`##$$##mydic.update({i: o['name']})@##@@split a `utf-8` encoded string `stru` into a list of characters##$$##list(stru.decode('utf-8'))@##@@convert utf-8 with bom string `s` to utf-8 with no bom `u`##$$##u = s.decode('utf-8-sig')@##@@Filter model 'Entry' where 'id' is not equal to 3 in Django##$$##Entry.objects.filter(~Q(id=3))@##@@lookup an attribute in any scope by name 'range'##$$##getattr(__builtins__, 'range')@##@@restart a computer after `900` seconds using subprocess##$$##subprocess.call(['shutdown', '/r', '/t', '900'])@##@@shutdown a computer using subprocess##$$##subprocess.call(['shutdown', '/s'])@##@@abort a computer shutdown using subprocess##$$##subprocess.call(['shutdown', '/a '])@##@@logoff computer having windows operating system using python##$$##subprocess.call(['shutdown', '/l '])@##@@shutdown and restart a computer running windows from script##$$##subprocess.call(['shutdown', '/r'])@##@@erase the contents of a file `filename`##$$##open('filename', 'w').close()@##@@None##$$##open('file.txt', 'w').close()@##@@convert dataframe `df` to list of dictionaries including the index values##$$##df.to_dict('index')@##@@Create list of dictionaries from pandas dataframe `df`##$$##df.to_dict('records')@##@@Group a pandas data frame by monthly frequenct `M` using groupby##$$##df.groupby(pd.TimeGrouper(freq='M'))@##@@divide the members of a list `conversions` by the corresponding members of another list `trials`##$$##[(c / t) for c, t in zip(conversions, trials)]@##@@sort dict `data` by value##$$##sorted(data, key=data.get)@##@@Sort a dictionary `data` by its values##$$##sorted(data.values())@##@@Get a list of pairs of key-value sorted by values in dictionary `data`##$$##sorted(list(data.items()), key=lambda x: x[1])@##@@None##$$##sorted(list(data.items()), key=lambda x: x[1])@##@@display current time##$$##now = datetime.datetime.now().strftime('%H:%M:%S')@##@@find the index of the second occurrence of the substring `bar` in string `foo bar bar bar`##$$##"""foo bar bar bar""".replace('bar', 'XXX', 1).find('bar')@##@@check if key 'stackoverflow' and key 'google' are presented in dictionary `sites`##$$##set(['stackoverflow', 'google']).issubset(sites)@##@@replace string ' and ' in string `stuff` with character '/'##$$##stuff.replace(' and ', '/')@##@@Save array at index 0, index 1 and index 8 of array `np` to tmp file `tmp`##$$##np.savez(tmp, *[getarray[0], getarray[1], getarray[8]])@##@@substract 1 hour and 10 minutes from current time##$$##t = datetime.datetime.now()
(t - datetime.timedelta(hours=1, minutes=10))@##@@subtract 1 hour and 10 minutes from time object `t`##$$##(t - datetime.timedelta(hours=1, minutes=10))@##@@add 1 hour and 2 minutes to time object `t`##$$##dt = datetime.datetime.combine(datetime.date.today(), t)@##@@subtract 5 hours from the time object `dt`##$$##dt -= datetime.timedelta(hours=5)@##@@encode string `data` using hex 'hex' encoding##$$##print(data.encode('hex'))@##@@Return the decimal value for each hex character in data `data`##$$##print(' '.join([str(ord(a)) for a in data]))@##@@Get all the items from a list of tuple 'l' where second item in tuple is '1'.##$$##[x for x in l if x[1] == 1]@##@@Create array `a` containing integers from stdin##$$##a.fromlist([int(val) for val in stdin.read().split()])@##@@place '\' infront of each non-letter char in string `line`##$$##print(re.sub('[_%^$]', '\\\\\\g<0>', line))@##@@Get all `a` tags where the text starts with value `some text` using regex##$$##doc.xpath("//a[starts-with(text(),'some text')]")@##@@convert a list of lists `a` into list of tuples of appropriate elements form nested lists##$$##zip(*a)@##@@convert a list of strings `lst` to list of integers##$$##[map(int, sublist) for sublist in lst]@##@@convert strings in list-of-lists `lst` to ints##$$##[[int(x) for x in sublist] for sublist in lst]@##@@get index of elements in array `A` that occur in another array `B`##$$##np.where(np.in1d(A, B))[0]@##@@create a list where each element is a dictionary with keys 'key1' and 'key2' and values corresponding to each value in the lists referenced by keys 'key1' and 'key2' in dictionary `d`##$$##[{'key1': a, 'key2': b} for a, b in zip(d['key1'], d['key2'])]@##@@None##$$##map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))@##@@Get Last Day of the first month in 2002##$$##calendar.monthrange(2002, 1)@##@@Get Last Day of the second month in 2002##$$##calendar.monthrange(2008, 2)@##@@Get Last Day of the second month in 2100##$$##calendar.monthrange(2100, 2)@##@@Get Last Day of the month `month` in year `year`##$$##calendar.monthrange(year, month)[1]@##@@Get Last Day of the second month in year 2012##$$##monthrange(2012, 2)@##@@Get Last Day of the first month in year 2000##$$##(datetime.date(2000, 2, 1) - datetime.timedelta(days=1))@##@@Calling an external command "ls -l"##$$##from subprocess import call@##@@Calling an external command "some_command with args"##$$##os.system('some_command with args')@##@@Calling an external command "some_command < input_file | another_command > output_file"##$$##os.system('some_command < input_file | another_command > output_file')@##@@Calling an external command "some_command with args"##$$##stream = os.popen('some_command with args')@##@@Calling an external command "echo Hello World"##$$##print(subprocess.Popen('echo Hello World', shell=True, stdout=subprocess.PIPE).stdout.read())@##@@Calling an external command "echo Hello World"##$$##print(os.popen('echo Hello World').read())@##@@Calling an external command "echo Hello World"##$$##return_code = subprocess.call('echo Hello World', shell=True)@##@@Calling an external command "ls"##$$##p = subprocess.Popen('ls', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
for line in p.stdout.readlines():
    print(line, end=' ')
retval = p.wait()@##@@Calling an external command "ls -l"##$$##call(['ls', '-l'])@##@@decode url `url` with utf8 and print it##$$##print(urllib.parse.unquote(url).decode('utf8'))@##@@decode a urllib escaped url string `url` with `utf8`##$$##url = urllib.parse.unquote(url).decode('utf8')@##@@delete letters from string '12454v'##$$##"""""".join(filter(str.isdigit, '12454v'))@##@@Update row values for a column `Season` using vectorized string operation in pandas##$$##df['Season'].str.split('-').str[0].astype(int)@##@@sort a list of tuples `my_list` by second parameter in the tuple##$$##my_list.sort(key=lambda x: x[1])@##@@find indexes of all occurrences of a substring `tt` in a string `ttt`##$$##[m.start() for m in re.finditer('(?=tt)', 'ttt')]@##@@find all occurrences of a substring in a string##$$##[m.start() for m in re.finditer('test', 'test test test test')]@##@@split string `s` based on white spaces##$$##re.findall('\\s+|\\S+', s)@##@@set columns `['race_date', 'track_code', 'race_number']` as indexes in dataframe `rdata`##$$##rdata.set_index(['race_date', 'track_code', 'race_number'])@##@@recursively go through all subdirectories and files in `rootdir`##$$##for (root, subFolders, files) in os.walk(rootdir):
    pass@##@@sort a list of dictionary values by 'date' in reverse order##$$##list.sort(key=lambda item: item['date'], reverse=True)@##@@display first 5 characters of string 'aaabbbccc'##$$##"""{:.5}""".format('aaabbbccc')@##@@unpack hexadecimal string `s` to a list of integer values##$$##struct.unpack('11B', s)@##@@finding the index of an item 'foo' given a list `['foo', 'bar', 'baz']` containing it##$$##[i for i, j in enumerate(['foo', 'bar', 'baz']) if j == 'foo']@##@@generate all permutations of list `[1, 2, 3]` and list `[4, 5, 6]`##$$##print(list(itertools.product([1, 2, 3], [4, 5, 6])))@##@@generate all permutations of a list `[1, 2, 3]`##$$##itertools.permutations([1, 2, 3])@##@@substitute occurrences of unicode regex pattern u'\\p{P}+' with empty string '' in string `text`##$$##return re.sub('\\p{P}+', '', text)@##@@manually throw/raise a `ValueError` exception with the message 'A very specific bad thing happened'##$$##raise ValueError('A very specific bad thing happened')@##@@throw an exception "I know Python!"##$$##raise Exception('I know Python!')@##@@Manually throw an exception "I know python!"##$$##raise Exception('I know python!')@##@@throw a ValueError with message 'represents a hidden bug, do not catch this'##$$##raise ValueError('represents a hidden bug, do not catch this')@##@@throw an Exception with message 'This is the exception you expect to handle'##$$##raise Exception('This is the exception you expect to handle')@##@@throw a value error with message 'A very specific bad thing happened', 'foo', 'bar', 'baz'##$$##raise ValueError('A very specific bad thing happened')@##@@throw a runtime error with message 'specific message'##$$##raise RuntimeError('specific message')@##@@throw an assertion error with message "Unexpected value of 'distance'!", distance##$$##raise AssertionError("Unexpected value of 'distance'!", distance)@##@@if Selenium textarea element `foo` is not empty, clear the field##$$##driver.find_element_by_id('foo').clear()@##@@clear text from textarea 'foo' with selenium##$$##driver.find_element_by_id('foo').clear()@##@@convert a number 2130706433 to ip string##$$##socket.inet_ntoa(struct.pack('!L', 2130706433))@##@@Rearrange the columns 'a','b','x','y' of pandas DataFrame `df` in mentioned sequence 'x' ,'y','a' ,'b'##$$##df = df[['x', 'y', 'a', 'b']]@##@@call base class's __init__ method from the child class `ChildClass`##$$##super(ChildClass, self).__init__(*args, **kwargs)@##@@sum of all values in a python dict `d`##$$##sum(d.values())@##@@None##$$##sum(d.values())@##@@convert python dictionary `your_data` to json array##$$##json.dumps(your_data, ensure_ascii=False)@##@@assign an array of floats in range from 0 to 100 to a variable `values`##$$##values = np.array([i for i in range(100)], dtype=np.float64)@##@@sort a list of dictionaries `list_of_dct` by values in an order `order`##$$##sorted(list_of_dct, key=lambda x: order.index(list(x.values())[0]))@##@@change the case of the first letter in string `s`##$$##return s[0].upper() + s[1:]@##@@join list of numbers `[1,2,3,4] ` to string of numbers.##$$##"""""".join([1, 2, 3, 4])@##@@delete every non `utf-8` characters from a string `line`##$$##line = line.decode('utf-8', 'ignore').encode('utf-8')@##@@execute a command `command ` in the terminal from a python script##$$##os.system(command)@##@@MySQL execute query 'SELECT * FROM foo WHERE bar = %s AND baz = %s' with parameters `param1` and `param2`##$$##c.execute('SELECT * FROM foo WHERE bar = %s AND baz = %s', (param1, param2))@##@@Parse string `datestr` into a datetime object using format pattern '%Y-%m-%d'##$$##dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()@##@@